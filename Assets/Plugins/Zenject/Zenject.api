// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace ModestTree
{
    public static class Assert
    {
        public static Zenject.ZenjectException CreateException();
        public static Zenject.ZenjectException CreateException(string message);
        public static Zenject.ZenjectException CreateException(string message, params object[] parameters);
        public static Zenject.ZenjectException CreateException(System.Exception innerException, string message, params object[] parameters);
        public static void DerivesFrom<T>(System.Type type);
        public static void DerivesFrom(System.Type childType, System.Type parentType);
        public static void DerivesFromOrEqual<T>(System.Type type);
        public static void DerivesFromOrEqual(System.Type childType, System.Type parentType);
        public static void IsApproximately(float left, float right, float epsilon = 1E-05f);
        public static void IsEmpty<T>(System.Collections.Generic.IEnumerable<T> sequence);
        public static void IsEmpty<T>(System.Collections.Generic.IList<T> list);
        public static void IsEqual(object left, object right);
        public static void IsEqual(object left, object right, System.Func<string> messageGenerator);
        public static void IsEqual(object left, object right, string message);
        public static void IsNotEmpty(string str);
        public static void IsNotEmpty<T>(System.Collections.Generic.IEnumerable<T> val, string message = @"");
        public static void IsNotEqual(object left, object right);
        public static void IsNotEqual(object left, object right, System.Func<string> messageGenerator);
        public static void IsNotEqual(object left, object right, string message);
        public static void IsNotNull(object val);
        public static void IsNotNull(object val, string message);
        public static void IsNotNull(object val, string message, object p1);
        public static void IsNotNull(object val, string message, object p1, object p2);
        public static void IsNull(object val);
        public static void IsNull(object val, string message);
        public static void IsNull(object val, string message, object p1);
        public static void IsType<T>(object obj);
        public static void IsType<T>(object obj, string message);
        public static void That(bool condition);
        public static void That(bool condition, string message);
        public static void That(bool condition, string message, object p1);
        public static void That(bool condition, string message, object p1, object p2);
        public static void That(bool condition, string message, object p1, object p2, object p3);
        public static void Throws(System.Action action);
        public static void Throws<TException>(System.Action action) where TException : System.Exception;
        public static void Warn(bool condition);
        public static void Warn(bool condition, System.Func<string> messageGenerator);
        public static void Warn(bool condition, string message);
    }

    public static class LinqExtensions
    {
        public static bool ContainsItem<T>(this System.Collections.Generic.IEnumerable<T> list, T value);
        public static System.Collections.Generic.IEnumerable<T> Except<T>(this System.Collections.Generic.IEnumerable<T> list, T item);
        public static System.Collections.Generic.IEnumerable<T> GetDuplicates<T>(this System.Collections.Generic.IEnumerable<T> list);
        public static bool HasAtLeast<T>(this System.Collections.Generic.IEnumerable<T> enumerable, int amount);
        public static bool HasAtMost<T>(this System.Collections.Generic.IEnumerable<T> enumerable, int amount);
        public static bool HasLessThan<T>(this System.Collections.Generic.IEnumerable<T> enumerable, int amount);
        public static bool HasMoreThan<T>(this System.Collections.Generic.IEnumerable<T> enumerable, int amount);
        public static bool IsEmpty<T>(this System.Collections.Generic.IEnumerable<T> enumerable);
        public static TSource OnlyOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source);
        public static System.Collections.Generic.IEnumerable<T> Yield<T>(this T item);
    }

    public static class Log
    {
        public static void Debug(string message, params object[] args);
        public static void Error(string message, params object[] args);
        public static void ErrorException(System.Exception e);
        public static void ErrorException(string message, System.Exception e);
        public static void Info(string message, params object[] args);
        public static void Trace(string message, params object[] args);
        public static void Warn(string message, params object[] args);
    }

    public static class MiscExtensions
    {
        public static void AllocFreeAddRange<T>(this System.Collections.Generic.IList<T> list, System.Collections.Generic.IList<T> items);
        public static string Fmt(this string s, params object[] args);
        public static TVal GetValueAndRemove<TKey, TVal>(this System.Collections.Generic.IDictionary<TKey, TVal> dictionary, TKey key);
        public static int IndexOf<T>(this System.Collections.Generic.IList<T> list, T item);
        public static string Join(this System.Collections.Generic.IEnumerable<string> values, string separator);
        public static void RemoveWithConfirm<T>(this System.Collections.Generic.HashSet<T> set, T item);
        public static void RemoveWithConfirm<TKey, TVal>(this System.Collections.Generic.IDictionary<TKey, TVal> dictionary, TKey key);
        public static void RemoveWithConfirm<T>(this System.Collections.Generic.IList<T> list, T item);
        public static void RemoveWithConfirm<T>(this System.Collections.Generic.LinkedList<T> list, T item);
    }

    public static class ReflectionUtil
    {
        public static System.Array CreateArray(System.Type elementType, System.Collections.Generic.List<object> instances);
        public static System.Collections.IList CreateGenericList(System.Type elementType, System.Collections.Generic.List<object> instances);
        public static string ToDebugString<TParam1, TParam2, TParam3, TParam4, TParam5>(this ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5> action);
        public static string ToDebugString<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(this ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> action);
        public static string ToDebugString(this System.Action action);
        public static string ToDebugString<TParam1>(this System.Action<TParam1> action);
        public static string ToDebugString<TParam1, TParam2>(this System.Action<TParam1, TParam2> action);
        public static string ToDebugString<TParam1, TParam2, TParam3>(this System.Action<TParam1, TParam2, TParam3> action);
        public static string ToDebugString<TParam1, TParam2, TParam3, TParam4>(this System.Action<TParam1, TParam2, TParam3, TParam4> action);
        public static string ToDebugString<TParam1>(this System.Func<TParam1> func);
        public static string ToDebugString<TParam1, TParam2>(this System.Func<TParam1, TParam2> func);
        public static string ToDebugString<TParam1, TParam2, TParam3>(this System.Func<TParam1, TParam2, TParam3> func);
        public static string ToDebugString<TParam1, TParam2, TParam3, TParam4>(this System.Func<TParam1, TParam2, TParam3, TParam4> func);
        public static string ToDebugString(this System.Reflection.MethodInfo method);
    }

    public static class TypeExtensions
    {
        public static System.Collections.Generic.IEnumerable<T> AllAttributes<T>(this System.Reflection.MemberInfo provider) where T : System.Attribute;
        public static System.Collections.Generic.IEnumerable<T> AllAttributes<T>(this System.Reflection.ParameterInfo provider) where T : System.Attribute;
        public static System.Collections.Generic.IEnumerable<System.Attribute> AllAttributes(this System.Reflection.MemberInfo provider, params System.Type[] attributeTypes);
        public static System.Collections.Generic.IEnumerable<System.Attribute> AllAttributes(this System.Reflection.ParameterInfo provider, params System.Type[] attributeTypes);
        public static System.Type BaseType(this System.Type type);
        public static System.Reflection.ConstructorInfo[] Constructors(this System.Type type);
        public static bool ContainsGenericParameters(this System.Type type);
        public static System.Reflection.FieldInfo[] DeclaredInstanceFields(this System.Type type);
        public static System.Reflection.MethodInfo[] DeclaredInstanceMethods(this System.Type type);
        public static System.Reflection.PropertyInfo[] DeclaredInstanceProperties(this System.Type type);
        public static bool DerivesFrom<T>(this System.Type a);
        public static bool DerivesFrom(this System.Type a, System.Type b);
        public static bool DerivesFromOrEqual<T>(this System.Type a);
        public static bool DerivesFromOrEqual(this System.Type a, System.Type b);
        public static System.Type[] GenericArguments(this System.Type type);
        public static T GetAttribute<T>(this System.Reflection.MemberInfo provider) where T : System.Attribute;
        public static object GetDefaultValue(this System.Type type);
        public static System.Collections.Generic.IEnumerable<System.Type> GetParentTypes(this System.Type type);
        public static bool HasAttribute<T>(this System.Reflection.MemberInfo provider) where T : System.Attribute;
        public static bool HasAttribute<T>(this System.Reflection.ParameterInfo provider) where T : System.Attribute;
        public static bool HasAttribute(this System.Reflection.MemberInfo provider, params System.Type[] attributeTypes);
        public static bool HasAttribute(this System.Reflection.ParameterInfo provider, params System.Type[] attributeTypes);
        public static System.Type[] Interfaces(this System.Type type);
        public static bool IsAbstract(this System.Type type);
        public static bool IsAssignableToGenericType(System.Type givenType, System.Type genericType);
        public static bool IsClosedGenericType(this System.Type type);
        public static bool IsEnum(this System.Type type);
        public static bool IsGenericType(this System.Type type);
        public static bool IsGenericTypeDefinition(this System.Type type);
        public static bool IsInterface(this System.Type type);
        public static bool IsOpenGenericType(this System.Type type);
        public static bool IsPrimitive(this System.Type type);
        public static bool IsSealed(this System.Type type);
        public static bool IsValueType(this System.Type type);
        public static System.Reflection.MethodInfo Method(this System.Delegate del);
        public static T TryGetAttribute<T>(this System.Reflection.MemberInfo provider) where T : System.Attribute;
    }

    public static class TypeStringFormatter
    {
        public static string PrettyName(this System.Type type);
    }
}

namespace ModestTree.Util
{
    public delegate void Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);

    public delegate void Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);

    public delegate void Action<T1, T2, T3, T4, T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);

    public delegate void Action<T1, T2, T3, T4, T5, T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);

    public delegate void Action<T1, T2, T3, T4, T5, T6, T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);

    public delegate void Action<T1, T2, T3, T4, T5, T6, T7, T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);

    public delegate void Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);

    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);

    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);

    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);

    public delegate TResult Func<T1, T2, T3, T4, T5, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);

    public delegate TResult Func<T1, T2, T3, T4, T5, T6, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);

    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);

    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);

    [System.AttributeUsage(System.AttributeTargets.All, AllowMultiple = false)] public class PreserveAttribute : System.Attribute
    {
        public PreserveAttribute() {}
    }

    public static class UnityUtil
    {
        public static System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene> AllLoadedScenes { get; }
        public static System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene> AllScenes { get; }
        public static bool IsAltKeyDown { get; }
        public static bool IsControlKeyDown { get; }
        public static bool IsShiftKeyDown { get; }
        public static bool WasAltKeyJustPressed { get; }
        public static bool WasShiftKeyJustPressed { get; }
        public static System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetAllGameObjects();
        public static System.Collections.Generic.List<UnityEngine.GameObject> GetAllRootGameObjects();
        public static System.Collections.Generic.IEnumerable<UnityEngine.Component> GetComponentsInChildrenBottomUp(UnityEngine.GameObject gameObject, bool includeInactive);
        public static System.Collections.Generic.IEnumerable<UnityEngine.Component> GetComponentsInChildrenTopDown(UnityEngine.GameObject gameObject, bool includeInactive);
        public static int GetDepthLevel(UnityEngine.Transform transform);
        public static System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetDirectChildren(UnityEngine.GameObject obj);
        public static System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetDirectChildrenAndSelf(UnityEngine.GameObject obj);
        public static System.Collections.Generic.IEnumerable<UnityEngine.Transform> GetParents(UnityEngine.Transform transform);
        public static System.Collections.Generic.IEnumerable<UnityEngine.Transform> GetParentsAndSelf(UnityEngine.Transform transform);
        public static UnityEngine.GameObject GetRootParentOrSelf(UnityEngine.GameObject gameObject);
    }

    public static class ValuePair
    {
        public static ModestTree.Util.ValuePair<T1, T2> New<T1, T2>(T1 first, T2 second);
        public static ModestTree.Util.ValuePair<T1, T2, T3> New<T1, T2, T3>(T1 first, T2 second, T3 third);
        public static ModestTree.Util.ValuePair<T1, T2, T3, T4> New<T1, T2, T3, T4>(T1 first, T2 second, T3 third, T4 fourth);
    }

    public class ValuePair<T1, T2>
    {
        public readonly T1 First;
        public readonly T2 Second;
        public ValuePair() {}
        public ValuePair(T1 first, T2 second) {}
        public bool Equals(ModestTree.Util.ValuePair<T1, T2> that);
        public override bool Equals(object obj);
        public override int GetHashCode();
    }

    public class ValuePair<T1, T2, T3>
    {
        public readonly T1 First;
        public readonly T2 Second;
        public readonly T3 Third;
        public ValuePair() {}
        public ValuePair(T1 first, T2 second, T3 third) {}
        public bool Equals(ModestTree.Util.ValuePair<T1, T2, T3> that);
        public override bool Equals(object obj);
        public override int GetHashCode();
    }

    public class ValuePair<T1, T2, T3, T4>
    {
        public readonly T1 First;
        public readonly T4 Fourth;
        public readonly T2 Second;
        public readonly T3 Third;
        public ValuePair() {}
        public ValuePair(T1 first, T2 second, T3 third, T4 fourth) {}
        public bool Equals(ModestTree.Util.ValuePair<T1, T2, T3, T4> that);
        public override bool Equals(object obj);
        public override int GetHashCode();
    }
}

namespace Zenject
{
    public class ActionInstaller : Zenject.Installer<ActionInstaller>
    {
        public ActionInstaller(System.Action<DiContainer> installMethod) {}
        public override void InstallBindings();
    }

    [NoReflectionBaking] public class AddToCurrentGameObjectComponentProvider : IProvider
    {
        protected System.Type ComponentType { get; }
        protected DiContainer Container { get; }
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public AddToCurrentGameObjectComponentProvider(DiContainer container, System.Type componentType, System.Collections.Generic.IEnumerable<TypeValuePair> extraArguments, object concreteIdentifier, System.Action<InjectContext, object> instantiateCallback) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class AddToExistingGameObjectComponentProvider : AddToGameObjectComponentProviderBase
    {
        protected override bool ShouldToggleActive { get; }
        public AddToExistingGameObjectComponentProvider(UnityEngine.GameObject gameObject, DiContainer container, System.Type componentType, System.Collections.Generic.IEnumerable<TypeValuePair> extraArguments, object concreteIdentifier, System.Action<InjectContext, object> instantiateCallback) {}
        protected override UnityEngine.GameObject GetGameObject(InjectContext context);
    }

    [NoReflectionBaking] public class AddToExistingGameObjectComponentProviderGetter : AddToGameObjectComponentProviderBase
    {
        protected override bool ShouldToggleActive { get; }
        public AddToExistingGameObjectComponentProviderGetter(System.Func<InjectContext, UnityEngine.GameObject> gameObjectGetter, DiContainer container, System.Type componentType, System.Collections.Generic.List<TypeValuePair> extraArguments, object concreteIdentifier, System.Action<InjectContext, object> instantiateCallback) {}
        protected override UnityEngine.GameObject GetGameObject(InjectContext context);
    }

    [NoReflectionBaking] public abstract class AddToGameObjectComponentProviderBase : IProvider
    {
        protected System.Type ComponentType { get; }
        protected DiContainer Container { get; }
        public bool IsCached { get; }
        protected abstract bool ShouldToggleActive { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public AddToGameObjectComponentProviderBase(DiContainer container, System.Type componentType, System.Collections.Generic.IEnumerable<TypeValuePair> extraArguments, object concreteIdentifier, System.Action<InjectContext, object> instantiateCallback) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        protected abstract UnityEngine.GameObject GetGameObject(InjectContext context);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class AddToNewGameObjectComponentProvider : AddToGameObjectComponentProviderBase
    {
        protected override bool ShouldToggleActive { get; }
        public AddToNewGameObjectComponentProvider(DiContainer container, System.Type componentType, System.Collections.Generic.IEnumerable<TypeValuePair> extraArguments, GameObjectCreationParameters gameObjectBindInfo, object concreteIdentifier, System.Action<InjectContext, object> instantiateCallback) {}
        protected override UnityEngine.GameObject GetGameObject(InjectContext context);
    }

    public class AnimatorIkHandlerManager : UnityEngine.MonoBehaviour
    {
        public AnimatorIkHandlerManager() {}
        [Inject] public void Construct([Inject(Source = InjectSources.Local)] System.Collections.Generic.List<IAnimatorIkHandler> handlers);
        public void OnAnimatorIk();
    }

    public class AnimatorInstaller : Zenject.Installer<UnityEngine.Animator, AnimatorInstaller>
    {
        public AnimatorInstaller(UnityEngine.Animator animator) {}
        public override void InstallBindings();
    }

    public class AnimatorMoveHandlerManager : UnityEngine.MonoBehaviour
    {
        public AnimatorMoveHandlerManager() {}
        [Inject] public void Construct([Inject(Source = InjectSources.Local)] System.Collections.Generic.List<IAnimatorMoveHandler> handlers);
        public void OnAnimatorMove();
    }

    [NoReflectionBaking] public class ArgConditionCopyNonLazyBinder : InstantiateCallbackConditionCopyNonLazyBinder
    {
        public ArgConditionCopyNonLazyBinder(BindInfo bindInfo) {}
        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments(object[] args);
        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<T>(T param);
        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2>(TParam1 param1, TParam2 param2);
        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3>(TParam1 param1, TParam2 param2, TParam3 param3);
        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3, TParam4>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3, TParam4, TParam5>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
        public InstantiateCallbackConditionCopyNonLazyBinder WithArgumentsExplicit(System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs);
    }

    public class ArrayPool<T> : Zenject.StaticMemoryPoolBaseBase<T[]>
    {
        public ArrayPool(int length) {}
        protected override T[] Alloc();
        public static Zenject.ArrayPool<T> GetPool(int length);
        public T[] Spawn();
    }

    public abstract class BaseMonoKernelDecorator : IDecoratableMonoKernel
    {
        [Inject] protected IDecoratableMonoKernel DecoratedMonoKernel;
        protected BaseMonoKernelDecorator() {}
        public virtual void Dispose();
        public virtual void FixedUpdate();
        public virtual void Initialize();
        public virtual void LateDispose();
        public virtual void LateUpdate();
        public virtual bool ShouldInitializeOnStart();
        public virtual void Update();
    }

    [NoReflectionBaking] public class BindInfo : System.IDisposable
    {
        public readonly System.Collections.Generic.List<TypeValuePair> Arguments;
        public BindingInheritanceMethods BindingInheritanceMethod;
        public object ConcreteIdentifier;
        public BindingCondition Condition;
        public string ContextInfo;
        public readonly System.Collections.Generic.List<System.Type> ContractTypes;
        public object Identifier;
        public System.Action<InjectContext, object> InstantiatedCallback;
        public InvalidBindResponses InvalidBindResponse;
        public bool MarkAsCreationBinding;
        public bool MarkAsUniqueSingleton;
        public bool NonLazy;
        public bool OnlyBindIfNotBound;
        public bool RequireExplicitScope;
        public bool SaveProvider;
        public ScopeTypes Scope;
        public ToChoices ToChoice;
        public readonly System.Collections.Generic.List<System.Type> ToTypes;
        public BindInfo() {}
        public void Dispose();
        public void Reset();
        public void SetContextInfo(string contextInfo);
    }

    public delegate bool BindingCondition(InjectContext c);

    public struct BindingId : System.IEquatable<BindingId>
    {
        public object Identifier { get; set; }
        public System.Type Type { get; set; }
        public BindingId(System.Type type, object identifier) {}
        public override bool Equals(object other);
        public bool Equals(BindingId that);
        public override int GetHashCode();
        public static bool operator ==(BindingId left, BindingId right);
        public static bool operator !=(BindingId left, BindingId right);
        public override string ToString();
    }

    public enum BindingInheritanceMethods
    {
        CopyDirectOnly = 2,
        CopyIntoAll = 1,
        MoveDirectOnly = 4,
        MoveIntoAll = 3,
        None = 0,
    }

    public class BindSignalFromBinder<TObject, TSignal>
    {
        public BindSignalFromBinder(SignalBindingBindInfo signalBindInfo, BindStatement bindStatement, System.Func<TObject, System.Action<TSignal>> methodGetter, DiContainer container) {}
        public SignalCopyBinder From(System.Action<Zenject.ConcreteBinderGeneric<TObject>> objectBindCallback);
        public SignalCopyBinder FromNew();
        public SignalCopyBinder FromResolve();
        public SignalCopyBinder FromResolveAll();
    }

    public class BindSignalIdToBinder<TSignal> : Zenject.BindSignalToBinder<TSignal>
    {
        public BindSignalIdToBinder(DiContainer container, SignalBindingBindInfo signalBindInfo) {}
        public Zenject.BindSignalToBinder<TSignal> WithId(object identifier);
    }

    public class BindSignalToBinder<TSignal>
    {
        protected SignalBindingBindInfo SignalBindInfo { get; }
        public BindSignalToBinder(DiContainer container, SignalBindingBindInfo signalBindInfo) {}
        public Zenject.BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(System.Action<TObject, TSignal> handler);
        public Zenject.BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(System.Func<TObject, System.Action<TSignal>> handlerGetter);
        public Zenject.BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(System.Func<TObject, System.Action> handlerGetter);
        public SignalCopyBinder ToMethod(System.Action callback);
        public SignalCopyBinder ToMethod(System.Action<TSignal> callback);
    }

    [NoReflectionBaking] public class BindStatement : System.IDisposable
    {
        public BindingInheritanceMethods BindingInheritanceMethod { get; }
        public bool HasFinalizer { get; }
        public BindStatement() {}
        public void AddDisposable(System.IDisposable disposable);
        public void Dispose();
        public void FinalizeBinding(DiContainer container);
        public void Reset();
        public void SetFinalizer(IBindingFinalizer bindingFinalizer);
        public BindInfo SpawnBindInfo();
    }

    [NoReflectionBaking] public class CachedOpenTypeProvider : IProvider
    {
        public bool IsCached { get; }
        public int NumInstances { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public CachedOpenTypeProvider(IProvider creator) {}
        public void ClearCache();
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class CachedProvider : IProvider
    {
        public bool IsCached { get; }
        public int NumInstances { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public CachedProvider(IProvider creator) {}
        public void ClearCache();
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    public class CheatSheet : Zenject.Installer<CheatSheet>
    {
        public CheatSheet() {}
        public override void InstallBindings();
        public void InstallMore2();
        public void InstallMore3();
        public class Bar : CheatSheet.IBar, CheatSheet.IFoo
        {
            public CheatSheet.Foo Foo { get; }
            public Bar() {}
        }
        public class Baz
        {
            public Baz() {}
        }
        public class Foo : UnityEngine.MonoBehaviour, CheatSheet.IBar, CheatSheet.IFoo, CheatSheet.IFoo2
        {
            public Foo() {}
            public CheatSheet.Bar GetBar();
            public string GetTitle();
        }
        public class Foo1 : CheatSheet.IFoo
        {
            public Foo1() {}
        }
        public class Foo2 : CheatSheet.IFoo
        {
            public Foo2() {}
        }
        public class Foo3 : CheatSheet.IFoo
        {
            public Foo3() {}
        }
        public class FooInstaller : Zenject.Installer<CheatSheet.FooInstaller>
        {
            public FooInstaller(string foo) {}
            public override void InstallBindings();
        }
        public class FooInstallerWithArgs : Zenject.Installer<string, CheatSheet.FooInstallerWithArgs>
        {
            public FooInstallerWithArgs(string foo) {}
            public override void InstallBindings();
        }
        public class Gui
        {
            public Gui() {}
        }
        public interface IBar : CheatSheet.IFoo
        {
        }
        public interface IFoo
        {
        }
        public interface IFoo2
        {
        }
        public class Norf
        {
            [Inject(Id = @"FooA")] public string Foo;
            public Norf() {}
        }
        public class Norf2
        {
            [Inject] public CheatSheet.Foo Foo;
            public Norf2() {}
        }
        public class Qux
        {
            [Inject(Id = @"FooB")] public string Foo;
            public Qux() {}
        }
        public class Qux2
        {
            [Inject] public CheatSheet.Foo Foo;
            [Inject(Id = @"FooA")] public CheatSheet.Foo Foo2;
            public Qux2() {}
        }
    }

    [NoReflectionBaking] public class ConcreteBinderGeneric<TContract> : Zenject.FromBinderGeneric<TContract>
    {
        public ConcreteBinderGeneric(DiContainer bindContainer, BindInfo bindInfo, BindStatement bindStatement) {}
        public Zenject.FromBinderGeneric<TConcrete> To<TConcrete>() where TConcrete : TContract;
        public FromBinderNonGeneric To(System.Action<ConventionSelectTypesBinder> generator);
        public FromBinderNonGeneric To(System.Collections.Generic.IEnumerable<System.Type> concreteTypes);
        public FromBinderNonGeneric To(params System.Type[] concreteTypes);
        public Zenject.FromBinderGeneric<TContract> ToSelf();
    }

    [NoReflectionBaking] public class ConcreteBinderNonGeneric : FromBinderNonGeneric
    {
        public ConcreteBinderNonGeneric(DiContainer bindContainer, BindInfo bindInfo, BindStatement bindStatement) {}
        public FromBinderNonGeneric To<TConcrete>();
        public FromBinderNonGeneric To(System.Action<ConventionSelectTypesBinder> generator);
        public FromBinderNonGeneric To(System.Collections.Generic.IEnumerable<System.Type> concreteTypes);
        public FromBinderNonGeneric To(params System.Type[] concreteTypes);
        public FromBinderNonGeneric ToSelf();
    }

    [NoReflectionBaking] public class ConcreteIdArgConditionCopyNonLazyBinder : ArgConditionCopyNonLazyBinder
    {
        public ConcreteIdArgConditionCopyNonLazyBinder(BindInfo bindInfo) {}
        public ArgConditionCopyNonLazyBinder WithConcreteId(object id);
    }

    [NoReflectionBaking] public class ConcreteIdBinderGeneric<TContract> : Zenject.ConcreteBinderGeneric<TContract>
    {
        public ConcreteIdBinderGeneric(DiContainer bindContainer, BindInfo bindInfo, BindStatement bindStatement) {}
        public Zenject.ConcreteBinderGeneric<TContract> WithId(object identifier);
    }

    [NoReflectionBaking] public class ConcreteIdBinderNonGeneric : ConcreteBinderNonGeneric
    {
        public ConcreteIdBinderNonGeneric(DiContainer bindContainer, BindInfo bindInfo, BindStatement bindStatement) {}
        public ConcreteBinderNonGeneric WithId(object identifier);
    }

    [NoReflectionBaking] public class ConditionCopyNonLazyBinder : CopyNonLazyBinder
    {
        public ConditionCopyNonLazyBinder(BindInfo bindInfo) {}
        public CopyNonLazyBinder When(BindingCondition condition);
        public CopyNonLazyBinder WhenInjectedInto<T>();
        public CopyNonLazyBinder WhenInjectedInto(params System.Type[] targets);
        public CopyNonLazyBinder WhenInjectedIntoInstance(object instance);
        public CopyNonLazyBinder WhenNotInjectedInto<T>();
    }

    public abstract class Context : UnityEngine.MonoBehaviour
    {
        public abstract DiContainer Container { get; }
        public System.Collections.Generic.IEnumerable<MonoInstaller> InstallerPrefabs { get; set; }
        public System.Collections.Generic.IEnumerable<MonoInstaller> Installers { get; set; }
        public System.Collections.Generic.IEnumerable<InstallerBase> NormalInstallers { get; set; }
        public System.Collections.Generic.IEnumerable<System.Type> NormalInstallerTypes { get; set; }
        public System.Collections.Generic.IEnumerable<ScriptableObjectInstaller> ScriptableObjectInstallers { get; set; }
        protected Context() {}
        public void AddNormalInstaller(InstallerBase installer);
        public void AddNormalInstallerType(System.Type installerType);
        protected abstract void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> components);
        public abstract System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        protected void InstallInstallers();
        protected void InstallInstallers(System.Collections.Generic.List<InstallerBase> normalInstallers, System.Collections.Generic.List<System.Type> normalInstallerTypes, System.Collections.Generic.List<ScriptableObjectInstaller> scriptableObjectInstallers, System.Collections.Generic.List<MonoInstaller> installers, System.Collections.Generic.List<MonoInstaller> installerPrefabs);
        protected void InstallSceneBindings(System.Collections.Generic.List<UnityEngine.MonoBehaviour> injectableMonoBehaviours);
    }

    [NoReflectionBaking] public class ConventionAssemblySelectionBinder
    {
        protected ConventionBindInfo BindInfo { get; }
        public ConventionAssemblySelectionBinder(ConventionBindInfo bindInfo) {}
        public void FromAllAssemblies();
        public void FromAssemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies);
        public void FromAssemblies(params System.Reflection.Assembly[] assemblies);
        public void FromAssembliesContaining(System.Collections.Generic.IEnumerable<System.Type> types);
        public void FromAssembliesContaining(params System.Type[] types);
        public void FromAssembliesWhere(System.Func<System.Reflection.Assembly, bool> predicate);
        public void FromAssembly(System.Reflection.Assembly assembly);
        public void FromAssemblyContaining<T>();
        public void FromThisAssembly();
    }

    [NoReflectionBaking] public class ConventionBindInfo
    {
        public ConventionBindInfo() {}
        public void AddAssemblyFilter(System.Func<System.Reflection.Assembly, bool> predicate);
        public void AddTypeFilter(System.Func<System.Type, bool> predicate);
        public System.Collections.Generic.List<System.Type> ResolveTypes();
    }

    [NoReflectionBaking] public class ConventionFilterTypesBinder : ConventionAssemblySelectionBinder
    {
        public ConventionFilterTypesBinder(ConventionBindInfo bindInfo) {}
        public ConventionFilterTypesBinder DerivingFrom<T>();
        public ConventionFilterTypesBinder DerivingFrom(System.Type parentType);
        public ConventionFilterTypesBinder DerivingFromOrEqual<T>();
        public ConventionFilterTypesBinder DerivingFromOrEqual(System.Type parentType);
        public ConventionFilterTypesBinder InNamespace(string ns);
        public ConventionFilterTypesBinder InNamespaces(System.Collections.Generic.IEnumerable<string> namespaces);
        public ConventionFilterTypesBinder InNamespaces(params string[] namespaces);
        public ConventionFilterTypesBinder MatchingRegex(string pattern);
        public ConventionFilterTypesBinder MatchingRegex(System.Text.RegularExpressions.Regex regex);
        public ConventionFilterTypesBinder MatchingRegex(string pattern, System.Text.RegularExpressions.RegexOptions options);
        public ConventionFilterTypesBinder Where(System.Func<System.Type, bool> predicate);
        public ConventionFilterTypesBinder WithAttribute<T>() where T : System.Attribute;
        public ConventionFilterTypesBinder WithAttribute(System.Type attribute);
        public ConventionFilterTypesBinder WithAttributeWhere<T>(System.Func<T, bool> predicate) where T : System.Attribute;
        public ConventionFilterTypesBinder WithoutAttribute<T>() where T : System.Attribute;
        public ConventionFilterTypesBinder WithoutAttribute(System.Type attribute);
        public ConventionFilterTypesBinder WithPrefix(string prefix);
        public ConventionFilterTypesBinder WithSuffix(string suffix);
    }

    [NoReflectionBaking] public class ConventionSelectTypesBinder
    {
        public ConventionSelectTypesBinder(ConventionBindInfo bindInfo) {}
        public ConventionFilterTypesBinder AllAbstractClasses();
        public ConventionFilterTypesBinder AllClasses();
        public ConventionFilterTypesBinder AllInterfaces();
        public ConventionFilterTypesBinder AllNonAbstractClasses();
        public ConventionFilterTypesBinder AllTypes();
    }

    [NoReflectionBaking] public class CopyNonLazyBinder : NonLazyBinder
    {
        public CopyNonLazyBinder(BindInfo bindInfo) {}
        public NonLazyBinder CopyIntoAllSubContainers();
        public NonLazyBinder CopyIntoDirectSubContainers();
        public NonLazyBinder MoveIntoAllSubContainers();
        public NonLazyBinder MoveIntoDirectSubContainers();
    }

    [NoReflectionBaking] public class DeclareSignalAsyncTickPriorityCopyBinder : SignalTickPriorityCopyBinder
    {
        public DeclareSignalAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo signalBindInfo) {}
        public SignalTickPriorityCopyBinder RunAsync();
        public SignalCopyBinder RunSync();
    }

    [NoReflectionBaking] public class DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder : DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    {
        public DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo signalBindInfo) {}
        public DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder WithId(object identifier);
    }

    [NoReflectionBaking] public class DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder : DeclareSignalAsyncTickPriorityCopyBinder
    {
        public DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo signalBindInfo) {}
        public DeclareSignalAsyncTickPriorityCopyBinder OptionalSubscriber();
        public DeclareSignalAsyncTickPriorityCopyBinder OptionalSubscriberWithWarning();
        public DeclareSignalAsyncTickPriorityCopyBinder RequireSubscriber();
    }

    public class DecoratableMonoKernel : IDecoratableMonoKernel
    {
        [InjectLocal] public DisposableManager DisposablesManager { get; protected set; }
        [InjectLocal] public InitializableManager InitializableManager { get; protected set; }
        [InjectLocal] public TickableManager TickableManager { get; protected set; }
        public DecoratableMonoKernel() {}
        public void Dispose();
        public void FixedUpdate();
        public virtual void Initialize();
        public void LateDispose();
        public void LateUpdate();
        public virtual bool ShouldInitializeOnStart();
        public void Update();
    }

    [NoReflectionBaking] public class DecoratorToChoiceFromBinder<TContract>
    {
        public DecoratorToChoiceFromBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TContract, TConcrete> With<TConcrete>() where TConcrete : TContract;
    }

    public class DefaultGameObjectKernel : MonoKernel
    {
        public DefaultGameObjectKernel() {}
    }

    public class DefaultGameObjectParentInstaller : Zenject.Installer<string, DefaultGameObjectParentInstaller>
    {
        public DefaultGameObjectParentInstaller(string name) {}
        public override void InstallBindings();
    }

    [NoReflectionBaking] public class DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        protected SubContainerCreatorBindInfo SubContainerCreatorBindInfo { get; }
        public DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder(SubContainerCreatorBindInfo subContainerBindInfo, BindInfo bindInfo) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder WithDefaultGameObjectParent(string defaultParentName);
    }

    [NoReflectionBaking] public class DiContainer : IInstantiator
    {
        public System.Collections.Generic.IEnumerable<BindingId> AllContracts { get; }
        public System.Collections.Generic.IEnumerable<IProvider> AllProviders { get; }
        public DiContainer[] AncestorContainers { get; }
        public bool AssertOnNewGameObjects { get; set; }
        public bool ChecksForCircularDependencies { get; }
        public UnityEngine.Transform DefaultParent { get; set; }
        public UnityEngine.Transform InheritedDefaultParent { get; }
        public bool IsInstalling { get; set; }
        public bool IsValidating { get; }
        public DiContainer[] ParentContainers { get; }
        public ZenjectSettings Settings { get; set; }
        public DiContainer() {}
        public DiContainer(bool isValidating) {}
        public DiContainer(System.Collections.Generic.IEnumerable<DiContainer> parentContainers) {}
        public DiContainer(DiContainer parentContainer) {}
        public DiContainer(System.Collections.Generic.IEnumerable<DiContainer> parentContainersEnumerable, bool isValidating) {}
        public DiContainer(DiContainer parentContainer, bool isValidating) {}
        public Zenject.ConcreteIdBinderGeneric<TContract> Bind<TContract>();
        public ConcreteIdBinderNonGeneric Bind(System.Action<ConventionSelectTypesBinder> generator);
        public ConcreteIdBinderNonGeneric Bind(System.Collections.Generic.IEnumerable<System.Type> contractTypes);
        public ConcreteIdBinderNonGeneric Bind(params System.Type[] contractTypes);
        public CopyNonLazyBinder BindDisposableExecutionOrder<T>(int order) where T : System.IDisposable;
        public CopyNonLazyBinder BindDisposableExecutionOrder(System.Type type, int order);
        public void BindExecutionOrder<T>(int order);
        public void BindExecutionOrder(System.Type type, int order);
        public Zenject.FactoryToChoiceIdBinder<TContract> BindFactory<TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TContract> BindFactory<TParam1, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindFactory<TParam1, TParam2, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindFactory<TParam1, TParam2, TParam3, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TContract> BindFactoryCustomInterface<TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TContract>, TFactoryContract where TFactoryContract : IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>, TFactoryContract where TFactoryContract : IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TContract> BindFactoryCustomInterface<TParam1, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TContract>, TFactoryContract where TFactoryContract : IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindFactoryCustomInterface<TParam1, TParam2, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TContract>, TFactoryContract where TFactoryContract : IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TContract>, TFactoryContract where TFactoryContract : IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TContract>, TFactoryContract where TFactoryContract : IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>, TFactoryContract where TFactoryContract : IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>, TFactoryContract where TFactoryContract : IFactory;
        public CopyNonLazyBinder BindFixedTickableExecutionOrder<T>(int order) where T : IFixedTickable;
        public CopyNonLazyBinder BindFixedTickableExecutionOrder(System.Type type, int order);
        public Zenject.FactoryToChoiceIdBinder<TContract> BindIFactory<TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TContract> BindIFactory<TParam1, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindIFactory<TParam1, TParam2, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindIFactory<TParam1, TParam2, TParam3, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>();
        public CopyNonLazyBinder BindInitializableExecutionOrder<T>(int order) where T : IInitializable;
        public CopyNonLazyBinder BindInitializableExecutionOrder(System.Type type, int order);
        public IdScopeConcreteIdArgConditionCopyNonLazyBinder BindInstance<TContract>(TContract instance);
        public void BindInstances(params object[] instances);
        public FromBinderNonGeneric BindInterfacesAndSelfTo<T>();
        public FromBinderNonGeneric BindInterfacesAndSelfTo(System.Type type);
        public FromBinderNonGeneric BindInterfacesTo<T>();
        public FromBinderNonGeneric BindInterfacesTo(System.Type type);
        public CopyNonLazyBinder BindLateDisposableExecutionOrder<T>(int order) where T : ILateDisposable;
        public CopyNonLazyBinder BindLateDisposableExecutionOrder(System.Type type, int order);
        public CopyNonLazyBinder BindLateTickableExecutionOrder<T>(int order) where T : ILateTickable;
        public CopyNonLazyBinder BindLateTickableExecutionOrder(System.Type type, int order);
        public Zenject.MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPool<TItemContract>();
        public Zenject.MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPool<TItemContract, TPool>() where TPool : IMemoryPool;
        public Zenject.MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPoolCustomInterface<TItemContract, TPoolConcrete, TPoolContract>(bool includeConcreteType = false) where TPoolConcrete : TPoolContract, IMemoryPool where TPoolContract : IMemoryPool;
        public Zenject.ConcreteIdBinderGeneric<TContract> BindNoFlush<TContract>();
        public CopyNonLazyBinder BindPoolableExecutionOrder<T>(int order) where T : IPoolable;
        public CopyNonLazyBinder BindPoolableExecutionOrder(System.Type type, int order);
        public CopyNonLazyBinder BindTickableExecutionOrder<T>(int order) where T : ITickable;
        public CopyNonLazyBinder BindTickableExecutionOrder(System.Type type, int order);
        public UnityEngine.GameObject CreateEmptyGameObject(string name);
        public UnityEngine.GameObject CreateEmptyGameObject(GameObjectCreationParameters gameObjectBindInfo, InjectContext context);
        public DiContainer CreateSubContainer();
        public Zenject.DecoratorToChoiceFromBinder<TContract> Decorate<TContract>();
        public void FlushBindings();
        public System.Collections.Generic.IEnumerable<System.Type> GetDependencyContracts<TContract>();
        public System.Collections.Generic.IEnumerable<System.Type> GetDependencyContracts(System.Type contract);
        public bool HasBinding<TContract>();
        public bool HasBinding(System.Type contractType);
        public bool HasBinding(InjectContext context);
        public bool HasBindingId<TContract>(object identifier);
        public bool HasBindingId(System.Type contractType, object identifier);
        public bool HasBindingId(System.Type contractType, object identifier, InjectSources sourceType);
        public void Inject(object injectable);
        public void Inject(object injectable, System.Collections.Generic.IEnumerable<object> extraArgs);
        public void InjectExplicit(object injectable, System.Collections.Generic.List<TypeValuePair> extraArgs);
        public void InjectExplicit(object injectable, System.Type injectableType, System.Collections.Generic.List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier);
        public void InjectGameObject(UnityEngine.GameObject gameObject);
        public T InjectGameObjectForComponent<T>(UnityEngine.GameObject gameObject) where T : UnityEngine.Component;
        public T InjectGameObjectForComponent<T>(UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public object InjectGameObjectForComponent(UnityEngine.GameObject gameObject, System.Type componentType, System.Collections.Generic.IEnumerable<object> extraArgs);
        public UnityEngine.Component InjectGameObjectForComponentExplicit(UnityEngine.GameObject gameObject, System.Type componentType, System.Collections.Generic.List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier);
        public void Install<TInstaller>() where TInstaller : Installer;
        public void Install<TInstaller>(object[] extraArgs) where TInstaller : Installer;
        public T Instantiate<T>();
        public object Instantiate(System.Type concreteType);
        public T Instantiate<T>(System.Collections.Generic.IEnumerable<object> extraArgs);
        public object Instantiate(System.Type concreteType, System.Collections.Generic.IEnumerable<object> extraArgs);
        public TContract InstantiateComponent<TContract>(UnityEngine.GameObject gameObject) where TContract : UnityEngine.Component;
        public TContract InstantiateComponent<TContract>(UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs) where TContract : UnityEngine.Component;
        public UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject);
        public UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs);
        public UnityEngine.Component InstantiateComponentExplicit(System.Type componentType, UnityEngine.GameObject gameObject, System.Collections.Generic.List<TypeValuePair> extraArgs);
        public T InstantiateComponentOnNewGameObject<T>() where T : UnityEngine.Component;
        public T InstantiateComponentOnNewGameObject<T>(System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public T InstantiateComponentOnNewGameObject<T>(string gameObjectName) where T : UnityEngine.Component;
        public T InstantiateComponentOnNewGameObject<T>(string gameObjectName, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public T InstantiateExplicit<T>(System.Collections.Generic.List<TypeValuePair> extraArgs);
        public object InstantiateExplicit(System.Type concreteType, System.Collections.Generic.List<TypeValuePair> extraArgs);
        public object InstantiateExplicit(System.Type concreteType, bool autoInject, System.Collections.Generic.List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier);
        public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab);
        public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Transform parentTransform);
        public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, GameObjectCreationParameters gameObjectBindInfo);
        public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiatePrefabForComponent(System.Type concreteType, UnityEngine.Object prefab, System.Collections.Generic.IEnumerable<object> extraArgs, GameObjectCreationParameters creationInfo);
        public object InstantiatePrefabForComponent(System.Type concreteType, UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiatePrefabForComponentExplicit(System.Type componentType, UnityEngine.Object prefab, System.Collections.Generic.List<TypeValuePair> extraArgs);
        public object InstantiatePrefabForComponentExplicit(System.Type componentType, UnityEngine.Object prefab, System.Collections.Generic.List<TypeValuePair> extraArgs, GameObjectCreationParameters gameObjectBindInfo);
        public object InstantiatePrefabForComponentExplicit(System.Type componentType, UnityEngine.Object prefab, System.Collections.Generic.List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier, GameObjectCreationParameters gameObjectBindInfo);
        public UnityEngine.GameObject InstantiatePrefabResource(string resourcePath);
        public UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, UnityEngine.Transform parentTransform);
        public UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, GameObjectCreationParameters creationInfo);
        public UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiatePrefabResourceForComponent(System.Type concreteType, string resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiatePrefabResourceForComponentExplicit(System.Type componentType, string resourcePath, System.Collections.Generic.List<TypeValuePair> extraArgs, GameObjectCreationParameters creationInfo);
        public object InstantiatePrefabResourceForComponentExplicit(System.Type componentType, string resourcePath, System.Collections.Generic.List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier, GameObjectCreationParameters creationInfo);
        public T InstantiateScriptableObjectResource<T>(string resourcePath) where T : UnityEngine.ScriptableObject;
        public object InstantiateScriptableObjectResource(System.Type scriptableObjectType, string resourcePath);
        public T InstantiateScriptableObjectResource<T>(string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.ScriptableObject;
        public object InstantiateScriptableObjectResource(System.Type scriptableObjectType, string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiateScriptableObjectResourceExplicit(System.Type scriptableObjectType, string resourcePath, System.Collections.Generic.List<TypeValuePair> extraArgs);
        public T LazyInject<T>(T instance);
        public void QueueForInject(object instance);
        public void QueueForValidate(IValidatable validatable);
        public Zenject.ConcreteBinderGeneric<TContract> Rebind<TContract>();
        public ConcreteBinderNonGeneric Rebind(System.Type contractType);
        public Zenject.ConcreteBinderGeneric<TContract> RebindId<TContract>(object identifier);
        public ConcreteBinderNonGeneric RebindId(System.Type contractType, object identifier);
        public void RegisterProvider(BindingId bindingId, BindingCondition condition, IProvider provider, bool nonLazy);
        public TContract Resolve<TContract>();
        public object Resolve(System.Type contractType);
        public object Resolve(BindingId id);
        public object Resolve(InjectContext context);
        public System.Collections.Generic.List<TContract> ResolveAll<TContract>();
        public System.Collections.IList ResolveAll(System.Type contractType);
        public System.Collections.IList ResolveAll(InjectContext context);
        public void ResolveAll(InjectContext context, System.Collections.Generic.List<object> buffer);
        public TContract ResolveId<TContract>(object identifier);
        public object ResolveId(System.Type contractType, object identifier);
        public System.Collections.Generic.List<TContract> ResolveIdAll<TContract>(object identifier);
        public System.Collections.IList ResolveIdAll(System.Type contractType, object identifier);
        public void ResolveRoots();
        public System.Type ResolveType<T>();
        public System.Type ResolveType(System.Type type);
        public System.Type ResolveType(InjectContext context);
        public System.Collections.Generic.List<System.Type> ResolveTypeAll(System.Type type);
        public System.Collections.Generic.List<System.Type> ResolveTypeAll(InjectContext context);
        public System.Collections.Generic.List<System.Type> ResolveTypeAll(System.Type type, object identifier);
        public BindStatement StartBinding(bool flush = true);
        public TContract TryResolve<TContract>() where TContract : class;
        public object TryResolve(System.Type contractType);
        public TContract TryResolveId<TContract>(object identifier) where TContract : class;
        public object TryResolveId(System.Type contractType, object identifier);
        public bool Unbind<TContract>();
        public bool Unbind<TContract, TConcrete>();
        public bool Unbind(System.Type contractType);
        public bool Unbind(System.Type contractType, System.Type concreteType);
        public void UnbindAll();
        public bool UnbindId<TContract>(object identifier);
        public bool UnbindId<TContract, TConcrete>(object identifier);
        public bool UnbindId(System.Type contractType, object identifier);
        public bool UnbindId(System.Type contractType, System.Type concreteType, object identifier);
        public void UnbindInterfacesTo<TConcrete>();
        public void UnbindInterfacesTo(System.Type concreteType);
    }

    public class DictionaryPool<TKey, TValue> : Zenject.StaticMemoryPool<System.Collections.Generic.Dictionary<TKey, TValue>>
    {
        public static Zenject.DictionaryPool<TKey, TValue> Instance { get; }
        public DictionaryPool() {}
    }

    public class DisposableManager : System.IDisposable
    {
        [Inject] public DisposableManager([Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<System.IDisposable> disposables, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ILateDisposable> lateDisposables, [Inject(Id = @"Late", Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> latePriorities) {}
        public void Add(System.IDisposable disposable);
        public void Add(System.IDisposable disposable, int priority);
        public void AddLate(ILateDisposable disposable);
        public void AddLate(ILateDisposable disposable, int priority);
        public void Dispose();
        public void LateDispose();
        public void Remove(System.IDisposable disposable);
    }

    [NoReflectionBaking] public class DisposeBlock : System.IDisposable
    {
        public DisposeBlock() {}
        public void Add(System.IDisposable disposable);
        public void AddRange<T>(System.Collections.Generic.IList<T> disposables) where T : System.IDisposable;
        public void Dispose();
        public void Remove(System.IDisposable disposable);
        public static DisposeBlock Spawn();
        public T Spawn<T>(Zenject.IMemoryPool<T> pool);
        public TValue Spawn<TValue, TParam1>(Zenject.IMemoryPool<TParam1, TValue> pool, TParam1 p1);
        public TValue Spawn<TValue, TParam1, TParam2>(Zenject.IMemoryPool<TParam1, TParam2, TValue> pool, TParam1 p1, TParam2 p2);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4, TParam5>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7);
        public System.Collections.Generic.List<T> SpawnList<T>();
        public System.Collections.Generic.List<T> SpawnList<T>(System.Collections.Generic.IEnumerable<T> elements);
    }

    [NoReflectionBaking] public class EmptyGameObjectProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public EmptyGameObjectProvider(DiContainer container, GameObjectCreationParameters gameObjectBindInfo) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    public class ExecutionOrderInstaller : Zenject.Installer<System.Collections.Generic.List<System.Type>, ExecutionOrderInstaller>
    {
        public ExecutionOrderInstaller(System.Collections.Generic.List<System.Type> typeOrder) {}
        public override void InstallBindings();
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TValue> : Zenject.PlaceholderFactory<TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TValue> : Zenject.PlaceholderFactory<TParam1, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
    {
        public Factory() {}
    }

    [NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TContract> : Zenject.FactoryToChoiceBinder<TContract>
    {
        public FactoryArgumentsToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2>(TParam1 param1, TParam2 param2);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3>(TParam1 param1, TParam2 param2, TParam3 param3);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3, TParam4>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3, TParam4, TParam5>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs);
    }

    [NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
    {
        public FactoryArgumentsToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs);
    }

    [NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TContract>
    {
        public FactoryArgumentsToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs);
    }

    [NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract>
    {
        public FactoryArgumentsToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs);
    }

    [NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract>
    {
        public FactoryArgumentsToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs);
    }

    [NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract>
    {
        public FactoryArgumentsToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs);
    }

    [NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
    {
        public FactoryArgumentsToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs);
    }

    [NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
    {
        public FactoryArgumentsToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs);
    }

    [NoReflectionBaking] public class FactoryBindInfo
    {
        public System.Collections.Generic.List<TypeValuePair> Arguments { get; set; }
        public System.Type FactoryType { get; }
        public System.Func<DiContainer, IProvider> ProviderFunc { get; set; }
        public FactoryBindInfo(System.Type factoryType) {}
    }

    [NoReflectionBaking] public class FactoryFromBinder<TContract> : FactoryFromBinderBase
    {
        public FactoryFromBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public ConditionCopyNonLazyBinder FromComponentInHierarchy(bool includeInactive = true);
        public ArgConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TContract>;
        public ConditionCopyNonLazyBinder FromMethod(System.Func<DiContainer, TContract> method);
        public ConditionCopyNonLazyBinder FromResolveGetter<TObj>(System.Func<TObj, TContract> method);
        public ConditionCopyNonLazyBinder FromResolveGetter<TObj>(object subIdentifier, System.Func<TObj, TContract> method);
        public ConditionCopyNonLazyBinder FromResolveGetter<TObj>(object subIdentifier, System.Func<TObj, TContract> method, InjectSources source);
        public Zenject.FactorySubContainerBinder<TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TContract> FromSubContainerResolve(object subIdentifier);
    }

    [NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : FactoryFromBinderBase
    {
        public FactoryFromBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>;
        public ArgConditionCopyNonLazyBinder FromIFactory(System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>>> factoryBindGenerator);
        public ConditionCopyNonLazyBinder FromMethod(ModestTree.Util.Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [NoReflectionBaking] public class FactoryFromBinder<TParam1, TContract> : FactoryFromBinderBase
    {
        public FactoryFromBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TContract>;
        public ConditionCopyNonLazyBinder FromMethod(System.Func<DiContainer, TParam1, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TContract> : FactoryFromBinderBase
    {
        public FactoryFromBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TContract>;
        public ConditionCopyNonLazyBinder FromMethod(System.Func<DiContainer, TParam1, TParam2, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TContract> : FactoryFromBinderBase
    {
        public FactoryFromBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TContract>;
        public ConditionCopyNonLazyBinder FromMethod(System.Func<DiContainer, TParam1, TParam2, TParam3, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> : FactoryFromBinderBase
    {
        public FactoryFromBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TContract>;
        public ConditionCopyNonLazyBinder FromMethod(ModestTree.Util.Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : FactoryFromBinderBase
    {
        public FactoryFromBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>;
        public ConditionCopyNonLazyBinder FromMethod(ModestTree.Util.Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : FactoryFromBinderBase
    {
        public FactoryFromBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>;
        public ConditionCopyNonLazyBinder FromMethod(ModestTree.Util.Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> FromSubContainerResolve(object subIdentifier);
    }

    public static class FactoryFromBinder0Extensions
    {
        public static ArgConditionCopyNonLazyBinder FromIFactory<TContract>(this Zenject.FactoryFromBinder<TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TContract>>> factoryBindGenerator);
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TContract>(this Zenject.FactoryFromBinder<TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TContract>(this Zenject.FactoryFromBinder<TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract>(this Zenject.FactoryFromBinder<TContract> fromBinder) where TContract : Zenject.IPoolable<IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TContract> fromBinder) where TContract : Zenject.IPoolable<IMemoryPool> where TMemoryPool : Zenject.MemoryPool<IMemoryPool, TContract>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<IMemoryPool> where TMemoryPool : Zenject.MemoryPool<IMemoryPool, TContract>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract>(this Zenject.FactoryFromBinder<TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<IMemoryPool>;
    }

    public static class FactoryFromBinder1Extensions
    {
        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TContract>(this Zenject.FactoryFromBinder<TParam1, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TContract>>> factoryBindGenerator);
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TContract>(this Zenject.FactoryFromBinder<TParam1, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TContract>(this Zenject.FactoryFromBinder<TParam1, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract>(this Zenject.FactoryFromBinder<TParam1, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, IMemoryPool, TContract>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract>(this Zenject.FactoryFromBinder<TParam1, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, IMemoryPool, TContract>;
    }

    public static class FactoryFromBinder2Extensions
    {
        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TContract>>> factoryBindGenerator);
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, IMemoryPool, TContract>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, IMemoryPool, TContract>;
    }

    public static class FactoryFromBinder3Extensions
    {
        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TContract>>> factoryBindGenerator);
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, IMemoryPool, TContract>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, IMemoryPool, TContract>;
    }

    public static class FactoryFromBinder4Extensions
    {
        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TParam4, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TContract>>> factoryBindGenerator);
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, IMemoryPool, TContract>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, IMemoryPool, TContract>;
    }

    public static class FactoryFromBinder5Extensions
    {
        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>>> factoryBindGenerator);
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool, TContract>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool, TContract>;
    }

    public static class FactoryFromBinder6Extensions
    {
        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>>> factoryBindGenerator);
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool, TContract>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>;
        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool>(this Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool, TContract>;
    }

    [NoReflectionBaking] public class FactoryFromBinderBase : ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public System.Collections.Generic.IEnumerable<System.Type> AllParentTypes { get; }
        protected System.Type ContractType { get; }
        protected FactoryBindInfo FactoryBindInfo { get; }
        public FactoryFromBinderBase(DiContainer bindContainer, System.Type contractType, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefab(UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefabResource(string resourcePath);
        public ConditionCopyNonLazyBinder FromComponentOn(System.Func<InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public ConditionCopyNonLazyBinder FromComponentOn(UnityEngine.GameObject gameObject);
        public ConditionCopyNonLazyBinder FromComponentOnRoot();
        public ConditionCopyNonLazyBinder FromInstance(object instance);
        public ConditionCopyNonLazyBinder FromNew();
        public ConditionCopyNonLazyBinder FromNewComponentOn(System.Func<InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public ConditionCopyNonLazyBinder FromNewComponentOn(UnityEngine.GameObject gameObject);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewGameObject();
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefab(UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefabResource(string resourcePath);
        public ConditionCopyNonLazyBinder FromNewScriptableObjectResource(string resourcePath);
        public ConditionCopyNonLazyBinder FromResolve();
        public ConditionCopyNonLazyBinder FromResolve(object subIdentifier);
        public ConditionCopyNonLazyBinder FromResource(string resourcePath);
        public ConditionCopyNonLazyBinder FromScriptableObjectResource(string resourcePath);
    }

    [NoReflectionBaking] public class FactoryFromBinderUntyped : FactoryFromBinderBase
    {
        public FactoryFromBinderUntyped(DiContainer bindContainer, System.Type contractType, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
    }

    public class FactoryProviderWrapper<TContract> : IFactory, Zenject.IFactory<TContract>
    {
        public FactoryProviderWrapper(IProvider provider, InjectContext injectContext) {}
        public TContract Create();
    }

    [NoReflectionBaking] public class FactorySubContainerBinder<TContract> : Zenject.FactorySubContainerBinderBase<TContract>
    {
        public FactorySubContainerBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<DiContainer> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab(UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource(string resourcePath);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<DiContainer> installerMethod);
        [System.Obsolete(@"ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")] public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab(UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<InjectContext, UnityEngine.Object> prefabGetter, System.Action<DiContainer> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<DiContainer> installerMethod);
        [System.Obsolete(@"ByNewPrefabResource has been renamed to ByNewContextPrefabResource to avoid confusion with ByNewPrefabResourceInstaller and ByNewPrefabResourceMethod")] public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource(string resourcePath);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<DiContainer> installerMethod);
    }

    [NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<InjectContext, UnityEngine.Object> prefabGetter, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
    }

    [NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<DiContainer, TParam1> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<DiContainer, TParam1> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<InjectContext, UnityEngine.Object> prefabGetter, System.Action<DiContainer, TParam1> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<DiContainer, TParam1> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<DiContainer, TParam1> installerMethod);
    }

    [NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<DiContainer, TParam1, TParam2> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<DiContainer, TParam1, TParam2> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<InjectContext, UnityEngine.Object> prefabGetter, System.Action<DiContainer, TParam1, TParam2> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<DiContainer, TParam1, TParam2> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<DiContainer, TParam1, TParam2> installerMethod);
    }

    [NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<DiContainer, TParam1, TParam2, TParam3> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<DiContainer, TParam1, TParam2, TParam3> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<InjectContext, UnityEngine.Object> prefabGetter, System.Action<DiContainer, TParam1, TParam2, TParam3> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<DiContainer, TParam1, TParam2, TParam3> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<DiContainer, TParam1, TParam2, TParam3> installerMethod);
    }

    [NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<InjectContext, UnityEngine.Object> prefabGetter, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
    }

    [NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<InjectContext, UnityEngine.Object> prefabGetter, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
    }

    [NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<InjectContext, UnityEngine.Object> prefabGetter, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
    }

    [NoReflectionBaking] public class FactorySubContainerBinderBase<TContract>
    {
        protected DiContainer BindContainer { get; }
        protected BindInfo BindInfo { get; }
        protected System.Type ContractType { get; }
        protected FactoryBindInfo FactoryBindInfo { get; }
        protected System.Func<DiContainer, IProvider> ProviderFunc { get; set; }
        protected object SubIdentifier { get; }
        public FactorySubContainerBinderBase(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller<TInstaller>() where TInstaller : InstallerBase;
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller(System.Type installerType);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller<TInstaller>() where TInstaller : InstallerBase;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller(System.Type installerType);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(System.Func<InjectContext, UnityEngine.Object> prefabGetter) where TInstaller : InstallerBase;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(UnityEngine.Object prefab) where TInstaller : InstallerBase;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(System.Func<InjectContext, UnityEngine.Object> prefabGetter, System.Type installerType);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(UnityEngine.Object prefab, System.Type installerType);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller<TInstaller>(string resourcePath) where TInstaller : InstallerBase;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller(string resourcePath, System.Type installerType);
    }

    [NoReflectionBaking] public class FactorySubContainerBinderWithParams<TContract> : Zenject.FactorySubContainerBinderBase<TContract>
    {
        public FactorySubContainerBinderWithParams(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab<TInstaller>(UnityEngine.Object prefab) where TInstaller : IInstaller;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab(System.Type installerType, UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource<TInstaller>(string resourcePath) where TInstaller : IInstaller;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource(System.Type installerType, string resourcePath);
        [System.Obsolete(@"ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")] public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab<TInstaller>(UnityEngine.Object prefab) where TInstaller : IInstaller;
        [System.Obsolete(@"ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")] public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab(System.Type installerType, UnityEngine.Object prefab);
        [System.Obsolete(@"ByNewPrefabResource has been renamed to ByNewContextPrefabResource to avoid confusion with ByNewPrefabResourceInstaller and ByNewPrefabResourceMethod")] public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource<TInstaller>(string resourcePath) where TInstaller : IInstaller;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource(System.Type installerType, string resourcePath);
    }

    [NoReflectionBaking] public class FactoryToChoiceBinder<TContract> : Zenject.FactoryFromBinder<TContract>
    {
        public FactoryToChoiceBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TConcrete> To<TConcrete>() where TConcrete : TContract;
        public FactoryFromBinderUntyped To(System.Type concreteType);
        public Zenject.FactoryFromBinder<TContract> ToSelf();
    }

    [NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
    {
        public FactoryToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> ToSelf();
    }

    [NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TContract> : Zenject.FactoryFromBinder<TParam1, TContract>
    {
        public FactoryToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TContract> ToSelf();
    }

    [NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TContract>
    {
        public FactoryToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TContract> ToSelf();
    }

    [NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract>
    {
        public FactoryToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> ToSelf();
    }

    [NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract>
    {
        public FactoryToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> ToSelf();
    }

    [NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
    {
        public FactoryToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> ToSelf();
    }

    [NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
    {
        public FactoryToChoiceBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> ToSelf();
    }

    [NoReflectionBaking] public class FactoryToChoiceIdBinder<TContract> : Zenject.FactoryArgumentsToChoiceBinder<TContract>
    {
        public FactoryToChoiceIdBinder(DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TContract> WithId(object identifier);
    }

    [NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
    {
        public FactoryToChoiceIdBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithId(object identifier);
    }

    [NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TContract>
    {
        public FactoryToChoiceIdBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TContract> WithId(object identifier);
    }

    [NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TContract>
    {
        public FactoryToChoiceIdBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TContract> WithId(object identifier);
    }

    [NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TContract>
    {
        public FactoryToChoiceIdBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithId(object identifier);
    }

    [NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract>
    {
        public FactoryToChoiceIdBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithId(object identifier);
    }

    [NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
    {
        public FactoryToChoiceIdBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithId(object identifier);
    }

    [NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
    {
        public FactoryToChoiceIdBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithId(object identifier);
    }

    public class FixedTickablesTaskUpdater : Zenject.TaskUpdater<IFixedTickable>
    {
        public FixedTickablesTaskUpdater() {}
        protected override void UpdateItem(IFixedTickable task);
    }

    public abstract class FromBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        protected System.Collections.Generic.IEnumerable<System.Type> AllParentTypes { get; }
        protected DiContainer BindContainer { get; }
        protected BindStatement BindStatement { get; }
        protected System.Collections.Generic.IEnumerable<System.Type> ConcreteTypes { get; }
        protected IBindingFinalizer SubFinalizer { set; }
        public FromBinder(DiContainer bindContainer, BindInfo bindInfo, BindStatement bindStatement) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInChildren(bool includeInactive = true);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInHierarchy(bool includeInactive = true);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefab(UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefabResource(string resourcePath);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInParents(bool excludeSelf = false, bool includeInactive = true);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentOn(System.Func<InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentOn(UnityEngine.GameObject gameObject);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentOnRoot();
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentSibling();
        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildrenBase(bool excludeSelf, System.Func<UnityEngine.Component, bool> predicate, bool includeInactive);
        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchyBase(System.Func<UnityEngine.Component, bool> predicate = default(System.Func<UnityEngine.Component, bool>), bool includeInactive = true);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInNewPrefab(UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInNewPrefabResource(string resourcePath);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInParents(bool excludeSelf = false, bool includeInactive = true);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsOn(System.Func<InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsOn(UnityEngine.GameObject gameObject);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsOnRoot();
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsSibling();
        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactoryBase<TContract>(System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TContract>>> factoryBindGenerator);
        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstanceBase(object instance);
        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodBase<TConcrete>(System.Func<InjectContext, TConcrete> method);
        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultipleBase<TConcrete>(System.Func<InjectContext, System.Collections.Generic.IEnumerable<TConcrete>> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultipleUntyped(System.Func<InjectContext, System.Collections.Generic.IEnumerable<object>> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodUntyped(System.Func<InjectContext, object> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNew();
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOn(System.Func<InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOn(UnityEngine.GameObject gameObject);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewGameObject();
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefab(UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefabResource(string resourcePath);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnRoot();
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentSibling();
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewScriptableObject(UnityEngine.ScriptableObject resource);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewScriptableObjectResource(string resourcePath);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolve();
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolve(object subIdentifier);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolve(object subIdentifier, InjectSources source);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAll();
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAll(object subIdentifier);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAll(object subIdentifier, InjectSources source);
        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetterBase<TObj, TResult>(object identifier, System.Func<TObj, TResult> method, InjectSources source, bool matchMultiple);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResource(string resourcePath);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResources(string resourcePath);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromScriptableObject(UnityEngine.ScriptableObject resource);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromScriptableObjectResource(string resourcePath);
        public SubContainerBinder FromSubContainerResolve();
        public SubContainerBinder FromSubContainerResolve(object subIdentifier);
        public SubContainerBinder FromSubContainerResolveAll();
        public SubContainerBinder FromSubContainerResolveAll(object subIdentifier);
    }

    [NoReflectionBaking] public class FromBinderGeneric<TContract> : FromBinder
    {
        public FromBinderGeneric(DiContainer bindContainer, BindInfo bindInfo, BindStatement bindStatement) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(System.Func<TContract, bool> predicate, bool includeInactive = true);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(bool excludeSelf = false, System.Func<TContract, bool> predicate = default(System.Func<TContract, bool>), bool includeInactive = true);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchy(System.Func<TContract, bool> predicate = default(System.Func<TContract, bool>), bool includeInactive = true);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromFactory<TFactory>() where TFactory : Zenject.IFactory<TContract>;
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactory(System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TContract>>> factoryBindGenerator);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstance(TContract instance);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod(System.Func<TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod(System.Func<InjectContext, TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultiple(System.Func<InjectContext, System.Collections.Generic.IEnumerable<TContract>> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj>(System.Func<TObj, TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj>(object identifier, System.Func<TObj, TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj>(object identifier, System.Func<TObj, TContract> method, InjectSources source);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj>(System.Func<TObj, TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj>(object identifier, System.Func<TObj, TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj>(object identifier, System.Func<TObj, TContract> method, InjectSources source);
    }

    [NoReflectionBaking] public class FromBinderNonGeneric : FromBinder
    {
        public FromBinderNonGeneric(DiContainer bindContainer, BindInfo bindInfo, BindStatement bindStatement) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(System.Func<UnityEngine.Component, bool> predicate, bool includeInactive = true);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(bool excludeSelf = false, System.Func<UnityEngine.Component, bool> predicate = default(System.Func<UnityEngine.Component, bool>), bool includeInactive = true);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchy(System.Func<UnityEngine.Component, bool> predicate = default(System.Func<UnityEngine.Component, bool>), bool includeInactive = true);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromFactory<TConcrete, TFactory>() where TFactory : Zenject.IFactory<TConcrete>;
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactory<TContract>(System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TContract>>> factoryBindGenerator);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstance(object instance);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod<TConcrete>(System.Func<InjectContext, TConcrete> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultiple<TConcrete>(System.Func<InjectContext, System.Collections.Generic.IEnumerable<TConcrete>> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj, TContract>(System.Func<TObj, TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj, TContract>(object identifier, System.Func<TObj, TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj, TContract>(object identifier, System.Func<TObj, TContract> method, InjectSources source);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj, TContract>(System.Func<TObj, TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj, TContract>(object identifier, System.Func<TObj, TContract> method);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj, TContract>(object identifier, System.Func<TObj, TContract> method, InjectSources source);
    }

    public class GameObjectContext : RunnableContext
    {
        public event System.Action PostInstall;
        public event System.Action PostResolve;
        public event System.Action PreInstall;
        public event System.Action PreResolve;
        public override DiContainer Container { get; }
        public GameObjectContext() {}
        [Inject] public void Construct(DiContainer parentContainer);
        protected override void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public override System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        public void Install(DiContainer parentContainer);
        protected override void RunInternal();
    }

    [NoReflectionBaking] public class GameObjectCreationParameters
    {
        public static readonly GameObjectCreationParameters Default;
        public string GroupName { get; set; }
        public string Name { get; set; }
        public UnityEngine.Transform ParentTransform { get; set; }
        public System.Func<InjectContext, UnityEngine.Transform> ParentTransformGetter { get; set; }
        public System.Nullable<UnityEngine.Vector3> Position { get; set; }
        public System.Nullable<UnityEngine.Quaternion> Rotation { get; set; }
        public GameObjectCreationParameters() {}
        public override bool Equals(object other);
        public bool Equals(GameObjectCreationParameters that);
        public override int GetHashCode();
        public static bool operator ==(GameObjectCreationParameters left, GameObjectCreationParameters right);
        public static bool operator !=(GameObjectCreationParameters left, GameObjectCreationParameters right);
    }

    [NoReflectionBaking] public class GetFromGameObjectComponentProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public GetFromGameObjectComponentProvider(System.Type componentType, UnityEngine.GameObject gameObject, bool matchSingle) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class GetFromGameObjectGetterComponentProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public GetFromGameObjectGetterComponentProvider(System.Type componentType, System.Func<InjectContext, UnityEngine.GameObject> gameObjectGetter, bool matchSingle) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class GetFromPrefabComponentProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public GetFromPrefabComponentProvider(System.Type componentType, IPrefabInstantiator prefabInstantiator, bool matchSingle) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class GetterProvider<TObj, TResult> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public GetterProvider(object identifier, System.Func<TObj, TResult> method, DiContainer container, InjectSources sourceType, bool matchAll) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    public class GuiRenderableManager
    {
        public GuiRenderableManager([Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<IGuiRenderable> renderables, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void OnGui();
    }

    public class GuiRenderer : UnityEngine.MonoBehaviour
    {
        public GuiRenderer() {}
        public void OnGUI();
    }

    public class HashSetPool<T> : Zenject.StaticMemoryPool<System.Collections.Generic.HashSet<T>>
    {
        public static Zenject.HashSetPool<T> Instance { get; }
        public HashSetPool() {}
    }

    public interface IAnimatorIkHandler
    {
        public void OnAnimatorIk();
    }

    public interface IAnimatorMoveHandler
    {
        public void OnAnimatorMove();
    }

    public interface IBindingFinalizer
    {
        public BindingInheritanceMethods BindingInheritanceMethod { get; }
        public void FinalizeBinding(DiContainer container);
    }

    [NoReflectionBaking] public class IdBinder
    {
        public IdBinder(BindInfo bindInfo) {}
        public void WithId(object identifier);
    }

    public interface IDecoratableMonoKernel
    {
        public void Dispose();
        public void FixedUpdate();
        public void Initialize();
        public void LateDispose();
        public void LateUpdate();
        public bool ShouldInitializeOnStart();
        public void Update();
    }

    public interface IDespawnableMemoryPool<TValue> : IMemoryPool
    {
        public void Despawn(TValue item);
    }

    [NoReflectionBaking] public class IdScopeConcreteIdArgConditionCopyNonLazyBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public IdScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo bindInfo) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder WithId(object identifier);
    }

    public interface IFactory
    {
    }

    public interface IFactory<TValue> : IFactory
    {
        public TValue Create();
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TValue> : IFactory
    {
        public TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> : IFactory
    {
        public TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10);
    }

    public interface IFactory<TParam1, TValue> : IFactory
    {
        public TValue Create(TParam1 param);
    }

    public interface IFactory<TParam1, TParam2, TValue> : IFactory
    {
        public TValue Create(TParam1 param1, TParam2 param2);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TValue> : IFactory
    {
        public TValue Create(TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TValue> : IFactory
    {
        public TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : IFactory
    {
        public TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : IFactory
    {
        public TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : IFactory
    {
        public TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : IFactory
    {
        public TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
    }

    [NoReflectionBaking] public class IFactoryProvider<TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(DiContainer container, System.Guid factoryId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(DiContainer container, System.Guid factoryId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [NoReflectionBaking] public class IFactoryProvider<TParam1, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(DiContainer container, System.Guid factoryId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(DiContainer container, System.Guid factoryId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(DiContainer container, System.Guid factoryId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(DiContainer container, System.Guid factoryId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(DiContainer container, System.Guid factoryId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(DiContainer container, System.Guid factoryId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    public abstract class IFactoryProviderBase<TContract> : IProvider
    {
        protected DiContainer Container { get; }
        protected System.Guid FactoryId { get; }
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public IFactoryProviderBase(DiContainer container, System.Guid factoryId) {}
        public abstract void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class IfNotBoundBinder
    {
        public BindInfo BindInfo { get; }
        public IfNotBoundBinder(BindInfo bindInfo) {}
        public void IfNotBound();
    }

    public interface IInstaller
    {
        public bool IsEnabled { get; }
        public void InstallBindings();
    }

    public interface IInstantiator
    {
        public UnityEngine.GameObject CreateEmptyGameObject(string name);
        public T Instantiate<T>();
        public object Instantiate(System.Type concreteType);
        public T Instantiate<T>(System.Collections.Generic.IEnumerable<object> extraArgs);
        public object Instantiate(System.Type concreteType, System.Collections.Generic.IEnumerable<object> extraArgs);
        public TContract InstantiateComponent<TContract>(UnityEngine.GameObject gameObject) where TContract : UnityEngine.Component;
        public TContract InstantiateComponent<TContract>(UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs) where TContract : UnityEngine.Component;
        public UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject);
        public UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiateComponentOnNewGameObject<T>() where T : UnityEngine.Component;
        public T InstantiateComponentOnNewGameObject<T>(System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public T InstantiateComponentOnNewGameObject<T>(string gameObjectName) where T : UnityEngine.Component;
        public T InstantiateComponentOnNewGameObject<T>(string gameObjectName, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab);
        public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Transform parentTransform);
        public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiatePrefabForComponent(System.Type concreteType, UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public UnityEngine.GameObject InstantiatePrefabResource(string resourcePath);
        public UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, UnityEngine.Transform parentTransform);
        public UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiatePrefabResourceForComponent(System.Type concreteType, string resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public T InstantiateScriptableObjectResource<T>(string resourcePath) where T : UnityEngine.ScriptableObject;
        public object InstantiateScriptableObjectResource(System.Type scriptableObjectType, string resourcePath);
        public T InstantiateScriptableObjectResource<T>(string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.ScriptableObject;
        public object InstantiateScriptableObjectResource(System.Type scriptableObjectType, string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs);
    }

    public interface IMemoryPool
    {
        public System.Type ItemType { get; }
        public int NumActive { get; }
        public int NumInactive { get; }
        public int NumTotal { get; }
        public void Clear();
        public void Despawn(object obj);
        public void ExpandBy(int numToAdd);
        public void Resize(int desiredPoolSize);
        public void ShrinkBy(int numToRemove);
    }

    public interface IMemoryPool<TValue> : IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>
    {
        public TValue Spawn();
    }

    public interface IMemoryPool<TParam1, TValue> : IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>
    {
        public TValue Spawn(TParam1 param);
    }

    public interface IMemoryPool<TParam1, TParam2, TValue> : IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>
    {
        public TValue Spawn(TParam1 param1, TParam2 param2);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TValue> : IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>
    {
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>
    {
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>
    {
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>
    {
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>
    {
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>
    {
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
    }

    public class InitializableManager
    {
        protected bool _hasInitialized;
        [Inject] public InitializableManager([Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<IInitializable> initializables, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void Add(IInitializable initializable);
        public void Add(IInitializable initializable, int priority);
        public void Initialize();
    }

    [NoReflectionBaking] public class InjectContext : System.IDisposable
    {
        public System.Collections.Generic.IEnumerable<System.Type> AllObjectTypes { get; }
        public BindingId BindingId { get; }
        public object ConcreteIdentifier { get; set; }
        public DiContainer Container { get; set; }
        public object FallBackValue { get; set; }
        public object Identifier { get; set; }
        public string MemberName { get; set; }
        public System.Type MemberType { get; set; }
        public object ObjectInstance { get; set; }
        public System.Type ObjectType { get; set; }
        public bool Optional { get; set; }
        public InjectContext ParentContext { get; set; }
        public System.Collections.Generic.IEnumerable<InjectContext> ParentContexts { get; }
        public System.Collections.Generic.IEnumerable<InjectContext> ParentContextsAndSelf { get; }
        public InjectSources SourceType { get; set; }
        public InjectContext() {}
        public InjectContext(DiContainer container, System.Type memberType) {}
        public InjectContext(DiContainer container, System.Type memberType, object identifier) {}
        public InjectContext(DiContainer container, System.Type memberType, object identifier, bool optional) {}
        public InjectContext Clone();
        public InjectContext CreateSubContext(System.Type memberType);
        public InjectContext CreateSubContext(System.Type memberType, object identifier);
        public void Dispose();
        public string GetObjectGraphString();
        public void Reset();
    }

    public static class InjectUtil
    {
        public static System.Collections.Generic.List<TypeValuePair> CreateArgList(System.Collections.Generic.IEnumerable<object> args);
        public static System.Collections.Generic.List<TypeValuePair> CreateArgListExplicit<T>(T param);
        public static System.Collections.Generic.List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2>(TParam1 param1, TParam2 param2);
        public static System.Collections.Generic.List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3>(TParam1 param1, TParam2 param2, TParam3 param3);
        public static System.Collections.Generic.List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3, TParam4>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
        public static System.Collections.Generic.List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3, TParam4, TParam5>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
        public static System.Collections.Generic.List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
        public static TypeValuePair CreateTypePair<T>(T param);
        public static bool PopValueWithType(System.Collections.Generic.List<TypeValuePair> extraArgMap, System.Type injectedFieldType, out object value);
    }

    public abstract class Installer : InstallerBase
    {
        protected Installer() {}
    }

    public abstract class Installer<TDerived> : InstallerBase where TDerived : Zenject.Installer<TDerived>
    {
        protected Installer() {}
        public static void Install(DiContainer container);
    }

    public abstract class Installer<TParam1, TDerived> : InstallerBase where TDerived : Zenject.Installer<TParam1, TDerived>
    {
        protected Installer() {}
        public static void Install(DiContainer container, TParam1 p1);
    }

    public abstract class Installer<TParam1, TParam2, TDerived> : InstallerBase where TDerived : Zenject.Installer<TParam1, TParam2, TDerived>
    {
        protected Installer() {}
        public static void Install(DiContainer container, TParam1 p1, TParam2 p2);
    }

    public abstract class Installer<TParam1, TParam2, TParam3, TDerived> : InstallerBase where TDerived : Zenject.Installer<TParam1, TParam2, TParam3, TDerived>
    {
        protected Installer() {}
        public static void Install(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
    }

    public abstract class Installer<TParam1, TParam2, TParam3, TParam4, TDerived> : InstallerBase where TDerived : Zenject.Installer<TParam1, TParam2, TParam3, TParam4, TDerived>
    {
        protected Installer() {}
        public static void Install(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
    }

    public abstract class Installer<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived> : InstallerBase where TDerived : Zenject.Installer<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived>
    {
        protected Installer() {}
        public static void Install(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
    }

    public abstract class InstallerBase : IInstaller
    {
        protected DiContainer Container { get; }
        public virtual bool IsEnabled { get; }
        protected InstallerBase() {}
        public abstract void InstallBindings();
    }

    [NoReflectionBaking] public class InstanceProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public InstanceProvider(System.Type instanceType, object instance, DiContainer container, System.Action<InjectContext, object> instantiateCallback) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class InstantiateCallbackConditionCopyNonLazyBinder : ConditionCopyNonLazyBinder
    {
        public InstantiateCallbackConditionCopyNonLazyBinder(BindInfo bindInfo) {}
        public ConditionCopyNonLazyBinder OnInstantiated(System.Action<InjectContext, object> callback);
        public ConditionCopyNonLazyBinder OnInstantiated<T>(System.Action<InjectContext, T> callback);
    }

    [NoReflectionBaking] public class InstantiateOnPrefabComponentProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public InstantiateOnPrefabComponentProvider(System.Type componentType, IPrefabInstantiator prefabInstantiator) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    public enum InvalidBindResponses
    {
        Assert = 0,
        Skip = 1,
    }

    public interface IPlaceholderFactory : IValidatable
    {
    }

    public interface IPrefabInstantiator
    {
        public System.Type ArgumentTarget { get; }
        public System.Collections.Generic.List<TypeValuePair> ExtraArguments { get; }
        public GameObjectCreationParameters GameObjectCreationParameters { get; }
        public UnityEngine.Object GetPrefab(InjectContext context);
        public UnityEngine.GameObject Instantiate(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction);
    }

    public interface IPrefabProvider
    {
        public UnityEngine.Object GetPrefab(InjectContext context);
    }

    public interface IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> instances);
        public System.Type GetInstanceType(InjectContext context);
    }

    public static class IProviderExtensions
    {
        public static void GetAllInstances(this IProvider creator, InjectContext context, System.Collections.Generic.List<object> buffer);
        public static void GetAllInstances(this IProvider creator, InjectContext context, System.Collections.Generic.List<TypeValuePair> args, System.Collections.Generic.List<object> buffer);
        public static void GetAllInstancesWithInjectSplit(this IProvider creator, InjectContext context, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public static object GetInstance(this IProvider creator, InjectContext context);
        public static object GetInstance(this IProvider creator, InjectContext context, System.Collections.Generic.List<TypeValuePair> args);
        public static object TryGetInstance(this IProvider creator, InjectContext context);
        public static object TryGetInstance(this IProvider creator, InjectContext context, System.Collections.Generic.List<TypeValuePair> args);
    }

    public interface ISubContainerCreator
    {
        public DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    public interface IValidatable
    {
        public void Validate();
    }

    public class Kernel : IFixedTickable, IInitializable, ILateDisposable, ILateTickable, ITickable, System.IDisposable
    {
        public Kernel() {}
        public virtual void Dispose();
        public virtual void FixedTick();
        public virtual void Initialize();
        public virtual void LateDispose();
        public virtual void LateTick();
        public virtual void Tick();
    }

    public class KeyedFactory<TBase, TKey> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected override System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key);
    }

    public class KeyedFactory<TBase, TKey, TParam1> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected override System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key, TParam1 param1);
    }

    public class KeyedFactory<TBase, TKey, TParam1, TParam2> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected override System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key, TParam1 param1, TParam2 param2);
    }

    public class KeyedFactory<TBase, TKey, TParam1, TParam2, TParam3> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected override System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key, TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public class KeyedFactory<TBase, TKey, TParam1, TParam2, TParam3, TParam4> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected override System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public abstract class KeyedFactoryBase<TBase, TKey> : IValidatable
    {
        protected DiContainer Container { get; }
        public System.Collections.Generic.ICollection<TKey> Keys { get; }
        protected abstract System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        protected System.Collections.Generic.Dictionary<TKey, System.Type> TypeMap { get; }
        protected KeyedFactoryBase() {}
        protected static ConditionCopyNonLazyBinder AddBindingInternal<TDerived>(DiContainer container, TKey key) where TDerived : TBase;
        protected System.Type GetTypeForKey(TKey key);
        public bool HasKey(TKey key);
        [Inject] public void Initialize();
        public virtual void Validate();
    }

    public class LateTickablesTaskUpdater : Zenject.TaskUpdater<ILateTickable>
    {
        public LateTickablesTaskUpdater() {}
        protected override void UpdateItem(ILateTickable task);
    }

    [NoReflectionBaking] [ZenjectAllowDuringValidation] public class LazyInject<T> : IValidatable
    {
        public T Value { get; }
        public LazyInject(DiContainer container, InjectContext context) {}
    }

    [NoReflectionBaking] public class LazyInstanceInjector
    {
        public System.Collections.Generic.IEnumerable<object> Instances { get; }
        public LazyInstanceInjector(DiContainer container) {}
        public void AddInstance(object instance);
        public void AddInstances(System.Collections.Generic.IEnumerable<object> instances);
        public void LazyInject(object instance);
        public void LazyInjectAll();
    }

    public class ListPool<T> : Zenject.StaticMemoryPool<System.Collections.Generic.List<T>>
    {
        public static Zenject.ListPool<T> Instance { get; }
        public ListPool() {}
    }

    public enum LoadSceneRelationship
    {
        Child = 1,
        None = 0,
        Sibling = 2,
    }

    public class MemoryPool<TValue> : Zenject.MemoryPoolBase<TValue>, IFactory, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory<TValue>, Zenject.IMemoryPool<TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TValue item);
        public TValue Spawn();
    }

    public class MemoryPool<TParam1, TValue> : Zenject.MemoryPoolBase<TValue>, IFactory, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory<TParam1, TValue>, Zenject.IMemoryPool<TParam1, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TValue item);
        public TValue Spawn(TParam1 param);
    }

    public class MemoryPool<TParam1, TParam2, TValue> : Zenject.MemoryPoolBase<TValue>, IFactory, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory<TParam1, TParam2, TValue>, Zenject.IMemoryPool<TParam1, TParam2, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TValue item);
        public TValue Spawn(TParam1 param1, TParam2 param2);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.MemoryPoolBase<TValue>, IFactory, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory<TParam1, TParam2, TParam3, TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TValue item);
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.MemoryPoolBase<TValue>, IFactory, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue item);
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.MemoryPoolBase<TValue>, IFactory, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue item);
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.MemoryPoolBase<TValue>, IFactory, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue item);
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.MemoryPoolBase<TValue>, IFactory, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue item);
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : Zenject.MemoryPoolBase<TValue>, IFactory, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TValue item);
        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
    }

    [ZenjectAllowDuringValidation] public class MemoryPoolBase<TContract> : IMemoryPool, IValidatable, System.IDisposable
    {
        protected DiContainer Container { get; }
        public System.Collections.Generic.IEnumerable<TContract> InactiveItems { get; }
        public System.Type ItemType { get; }
        public int NumActive { get; }
        public int NumInactive { get; }
        public int NumTotal { get; }
        public MemoryPoolBase() {}
        public void Clear();
        public void Despawn(TContract item);
        public void Dispose();
        public void ExpandBy(int numToAdd);
        protected TContract GetInternal();
        protected virtual void OnCreated(TContract item);
        protected virtual void OnDespawned(TContract item);
        protected virtual void OnDestroyed(TContract item);
        protected virtual void OnSpawned(TContract item);
        public void Resize(int desiredPoolSize);
        public void ShrinkBy(int numToRemove);
    }

    [NoReflectionBaking] public class MemoryPoolBindInfo
    {
        public PoolExpandMethods ExpandMethod { get; set; }
        public int InitialSize { get; set; }
        public int MaxSize { get; set; }
        public MemoryPoolBindInfo() {}
    }

    [NoReflectionBaking] public class MemoryPoolBindingFinalizer<TContract> : ProviderBindingFinalizer
    {
        public MemoryPoolBindingFinalizer(BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo) {}
        protected override void OnFinalizeBinding(DiContainer container);
    }

    [NoReflectionBaking] public class MemoryPoolExpandBinder<TContract> : Zenject.FactoryArgumentsToChoiceBinder<TContract>
    {
        protected MemoryPoolBindInfo MemoryPoolBindInfo { get; }
        public MemoryPoolExpandBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TContract> ExpandByDoubling();
        public Zenject.FactoryArgumentsToChoiceBinder<TContract> ExpandByOneAtATime();
    }

    [NoReflectionBaking] public class MemoryPoolIdInitialSizeMaxSizeBinder<TContract> : Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>
    {
        public MemoryPoolIdInitialSizeMaxSizeBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo) {}
        public Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract> WithId(object identifier);
    }

    [NoReflectionBaking] public class MemoryPoolInitialSizeMaxSizeBinder<TContract> : Zenject.MemoryPoolMaxSizeBinder<TContract>
    {
        public MemoryPoolInitialSizeMaxSizeBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TContract> WithFixedSize(int size);
        public Zenject.MemoryPoolMaxSizeBinder<TContract> WithInitialSize(int size);
    }

    [NoReflectionBaking] public class MemoryPoolMaxSizeBinder<TContract> : Zenject.MemoryPoolExpandBinder<TContract>
    {
        public MemoryPoolMaxSizeBinder(DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo) {}
        public Zenject.MemoryPoolExpandBinder<TContract> WithMaxSize(int size);
    }

    public class MemoryPoolSettings
    {
        public static readonly MemoryPoolSettings Default;
        public PoolExpandMethods ExpandMethod = PoolExpandMethods.OneAtATime;
        public int InitialSize = 0;
        public int MaxSize = 2147483647;
        public MemoryPoolSettings() {}
        public MemoryPoolSettings(int initialSize, int maxSize, PoolExpandMethods expandMethod) {}
    }

    [NoReflectionBaking] public class MethodMultipleProviderUntyped : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodMultipleProviderUntyped(System.Func<InjectContext, System.Collections.Generic.IEnumerable<object>> method, DiContainer container) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProvider<TReturn> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProvider(System.Func<InjectContext, TReturn> method, DiContainer container) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderMultiple<TReturn> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderMultiple(System.Func<InjectContext, System.Collections.Generic.IEnumerable<TReturn>> method, DiContainer container) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderSimple<TReturn> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderSimple(System.Func<TReturn> method) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderUntyped : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderUntyped(System.Func<InjectContext, object> method, DiContainer container) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderWithContainer<TValue> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<DiContainer, TValue> method) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(ModestTree.Util.Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> method) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TValue> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<DiContainer, TParam1, TValue> method) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TValue> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<DiContainer, TParam1, TParam2, TValue> method) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TValue> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<DiContainer, TParam1, TParam2, TParam3, TValue> method) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TValue> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(ModestTree.Util.Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TValue> method) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(ModestTree.Util.Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TValue> method) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(ModestTree.Util.Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> method) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    public class MonoInstaller : MonoInstallerBase
    {
        public MonoInstaller() {}
    }

    public class MonoInstaller<TDerived> : MonoInstaller where TDerived : Zenject.MonoInstaller<TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(DiContainer container);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container);
        public static TDerived InstallFromResource(DiContainer container, object[] extraArgs);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, object[] extraArgs);
    }

    public class MonoInstaller<TParam1, TDerived> : MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(DiContainer container, TParam1 p1);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1);
    }

    public class MonoInstaller<TParam1, TParam2, TDerived> : MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TParam2, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2);
    }

    public class MonoInstaller<TParam1, TParam2, TParam3, TDerived> : MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TParam2, TParam3, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
    }

    public class MonoInstaller<TParam1, TParam2, TParam3, TParam4, TDerived> : MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TParam2, TParam3, TParam4, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
    }

    public class MonoInstaller<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived> : MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
    }

    public class MonoInstallerBase : UnityEngine.MonoBehaviour, IInstaller
    {
        [Inject] protected DiContainer Container { get; set; }
        public virtual bool IsEnabled { get; }
        public MonoInstallerBase() {}
        public virtual void InstallBindings();
        public virtual void Start();
    }

    public static class MonoInstallerUtil
    {
        public static TInstaller CreateInstaller<TInstaller>(string resourcePath, DiContainer container) where TInstaller : MonoInstallerBase;
        public static string GetDefaultResourcePath<TInstaller>() where TInstaller : MonoInstallerBase;
    }

    public abstract class MonoKernel : UnityEngine.MonoBehaviour
    {
        protected bool IsDestroyed { get; }
        protected MonoKernel() {}
        public virtual void FixedUpdate();
        public void Initialize();
        public virtual void LateUpdate();
        public virtual void OnDestroy();
        public virtual void Start();
        public virtual void Update();
    }

    public class MonoMemoryPool<TValue> : Zenject.MemoryPool<TValue> where TValue : UnityEngine.Component
    {
        [Inject] public MonoMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TValue> : Zenject.MemoryPool<TParam1, TValue> where TValue : UnityEngine.Component
    {
        [Inject] public MonoMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TParam2, TValue> : Zenject.MemoryPool<TParam1, TParam2, TValue> where TValue : UnityEngine.Component
    {
        [Inject] public MonoMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : UnityEngine.Component
    {
        [Inject] public MonoMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : UnityEngine.Component
    {
        [Inject] public MonoMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : UnityEngine.Component
    {
        [Inject] public MonoMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void OnSpawned(TValue item);
    }

    public class MonoPoolableMemoryPool<TValue> : Zenject.MemoryPool<TValue> where TValue : UnityEngine.Component, IPoolable
    {
        [Inject] public MonoPoolableMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void Reinitialize(TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TValue> : Zenject.MemoryPool<TParam1, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1>
    {
        [Inject] public MonoPoolableMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void Reinitialize(TParam1 p1, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TValue> : Zenject.MemoryPool<TParam1, TParam2, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2>
    {
        [Inject] public MonoPoolableMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3>
    {
        [Inject] public MonoPoolableMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4>
    {
        [Inject] public MonoPoolableMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5>
    {
        [Inject] public MonoPoolableMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>
    {
        [Inject] public MonoPoolableMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>
    {
        [Inject] public MonoPoolableMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>
    {
        [Inject] public MonoPoolableMemoryPool() {}
        protected override void OnCreated(TValue item);
        protected override void OnDespawned(TValue item);
        protected override void OnDestroyed(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TValue item);
    }

    [NoReflectionBaking] public class NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder : TransformScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo bindInfo, GameObjectCreationParameters gameObjectInfo) {}
        public TransformScopeConcreteIdArgConditionCopyNonLazyBinder WithGameObjectName(string gameObjectName);
    }

    [NoReflectionBaking] public class NonLazyBinder : IfNotBoundBinder
    {
        public NonLazyBinder(BindInfo bindInfo) {}
        public IfNotBoundBinder Lazy();
        public IfNotBoundBinder NonLazy();
    }

    [NoReflectionBaking] public class NullBindingFinalizer : IBindingFinalizer
    {
        public BindingInheritanceMethods BindingInheritanceMethod { get; }
        public NullBindingFinalizer() {}
        public void FinalizeBinding(DiContainer container);
    }

    public class PlaceholderFactory<TValue> : Zenject.PlaceholderFactoryBase<TValue>, IFactory, Zenject.IFactory<TValue>
    {
        protected System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create();
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> : Zenject.PlaceholderFactoryBase<TValue>, IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue>
    {
        protected System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10);
    }

    public class PlaceholderFactory<TParam1, TValue> : Zenject.PlaceholderFactoryBase<TValue>, IFactory, Zenject.IFactory<TParam1, TValue>
    {
        protected System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param);
    }

    public class PlaceholderFactory<TParam1, TParam2, TValue> : Zenject.PlaceholderFactoryBase<TValue>, IFactory, Zenject.IFactory<TParam1, TParam2, TValue>
    {
        protected System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2);
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TValue> : Zenject.PlaceholderFactoryBase<TValue>, IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TValue>
    {
        protected System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.PlaceholderFactoryBase<TValue>, IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TValue>
    {
        protected System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.PlaceholderFactoryBase<TValue>, IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
    {
        protected System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.PlaceholderFactoryBase<TValue>, IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
    {
        protected System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    }

    public abstract class PlaceholderFactoryBase<TValue> : IPlaceholderFactory, IValidatable
    {
        protected abstract System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        protected PlaceholderFactoryBase() {}
        protected TValue CreateInternal(System.Collections.Generic.List<TypeValuePair> extraArgs);
        public virtual void Validate();
    }

    [NoReflectionBaking] public class PlaceholderFactoryBindingFinalizer<TContract> : ProviderBindingFinalizer
    {
        public PlaceholderFactoryBindingFinalizer(BindInfo bindInfo, FactoryBindInfo factoryBindInfo) {}
        protected override void OnFinalizeBinding(DiContainer container);
    }

    public class PoolableManager
    {
        public PoolableManager([InjectLocal] System.Collections.Generic.List<IPoolable> poolables, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned();
    }

    public class PoolableManager<T>
    {
        public PoolableManager([InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T>> poolables, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T param);
    }

    public class PoolableManager<T1, T2>
    {
        public PoolableManager([InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T1, T2>> poolables, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T1 p1, T2 p2);
    }

    public class PoolableManager<T1, T2, T3>
    {
        public PoolableManager([InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T1, T2, T3>> poolables, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T1 p1, T2 p2, T3 p3);
    }

    public class PoolableManager<T1, T2, T3, T4>
    {
        public PoolableManager([InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T1, T2, T3, T4>> poolables, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T1 p1, T2 p2, T3 p3, T4 p4);
    }

    public class PoolableManager<T1, T2, T3, T4, T5>
    {
        public PoolableManager([InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T1, T2, T3, T4, T5>> poolables, [Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5);
    }

    public class PoolableMemoryPool<TValue> : Zenject.MemoryPool<TValue> where TValue : IPoolable
    {
        public PoolableMemoryPool() {}
        protected override void OnDespawned(TValue item);
        protected override void Reinitialize(TValue item);
    }

    public class PoolableMemoryPool<TParam1, TValue> : Zenject.MemoryPool<TParam1, TValue> where TValue : Zenject.IPoolable<TParam1>
    {
        public PoolableMemoryPool() {}
        protected override void OnDespawned(TValue item);
        protected override void Reinitialize(TParam1 p1, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TValue> : Zenject.MemoryPool<TParam1, TParam2, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2>
    {
        public PoolableMemoryPool() {}
        protected override void OnDespawned(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3>
    {
        public PoolableMemoryPool() {}
        protected override void OnDespawned(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4>
    {
        public PoolableMemoryPool() {}
        protected override void OnDespawned(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5>
    {
        public PoolableMemoryPool() {}
        protected override void OnDespawned(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>
    {
        public PoolableMemoryPool() {}
        protected override void OnDespawned(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>
    {
        public PoolableMemoryPool() {}
        protected override void OnDespawned(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>
    {
        public PoolableMemoryPool() {}
        protected override void OnDespawned(TValue item);
        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TValue item);
    }

    [NoReflectionBaking] public class PoolableMemoryPoolProvider<TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, IValidatable where TContract : Zenject.IPoolable<IMemoryPool> where TMemoryPool : Zenject.MemoryPool<IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(DiContainer container, System.Guid poolId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public void Validate();
    }

    [NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, IValidatable where TContract : Zenject.IPoolable<TParam1, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(DiContainer container, System.Guid poolId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public void Validate();
    }

    [NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(DiContainer container, System.Guid poolId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public void Validate();
    }

    [NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(DiContainer container, System.Guid poolId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public void Validate();
    }

    [NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(DiContainer container, System.Guid poolId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public void Validate();
    }

    [NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(DiContainer container, System.Guid poolId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public void Validate();
    }

    [NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(DiContainer container, System.Guid poolId) {}
        public override void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public void Validate();
    }

    public abstract class PoolableMemoryPoolProviderBase<TContract> : IProvider
    {
        protected DiContainer Container { get; }
        public bool IsCached { get; }
        protected System.Guid PoolId { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public PoolableMemoryPoolProviderBase(DiContainer container, System.Guid poolId) {}
        public abstract void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    public class PoolableStaticMemoryPool<TValue> : Zenject.StaticMemoryPool<TValue> where TValue : class, IPoolable, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TValue> : Zenject.StaticMemoryPool<TParam1, TValue> where TValue : class, Zenject.IPoolable<TParam1>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolCleanupChecker : ILateDisposable
    {
        public PoolCleanupChecker([Inject(Optional = true, Source = InjectSources.Local)] System.Collections.Generic.List<IMemoryPool> poolFactories, [Inject(Source = InjectSources.Local)] System.Collections.Generic.List<System.Type> ignoredPools) {}
        public void LateDispose();
    }

    [NoReflectionBaking] public class PoolExceededFixedSizeException : System.Exception
    {
        public PoolExceededFixedSizeException(string errorMessage) {}
    }

    public enum PoolExpandMethods
    {
        Disabled = 2,
        Double = 1,
        OneAtATime = 0,
    }

    public class PoolWrapperFactory<T> : IFactory, Zenject.IFactory<T> where T : System.IDisposable
    {
        public PoolWrapperFactory(Zenject.IMemoryPool<T> pool) {}
        public T Create();
    }

    public class PoolWrapperFactory<TParam1, TValue> : IFactory, Zenject.IFactory<TParam1, TValue> where TValue : System.IDisposable
    {
        public PoolWrapperFactory(Zenject.IMemoryPool<TParam1, TValue> pool) {}
        public TValue Create(TParam1 arg);
    }

    [NoReflectionBaking] public class PrefabBindingFinalizer : ProviderBindingFinalizer
    {
        public PrefabBindingFinalizer(BindInfo bindInfo, GameObjectCreationParameters gameObjectBindInfo, UnityEngine.Object prefab, System.Func<System.Type, IPrefabInstantiator, IProvider> providerFactory) {}
        protected override void OnFinalizeBinding(DiContainer container);
    }

    public class PrefabFactory<T> : IFactory, Zenject.IFactory<UnityEngine.Object, T>
    {
        public DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab);
    }

    public class PrefabFactory<P1, T> : IFactory, Zenject.IFactory<UnityEngine.Object, P1, T>
    {
        public DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab, P1 param);
    }

    public class PrefabFactory<P1, P2, T> : IFactory, Zenject.IFactory<UnityEngine.Object, P1, P2, T>
    {
        public DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab, P1 param, P2 param2);
    }

    public class PrefabFactory<P1, P2, P3, T> : IFactory, Zenject.IFactory<UnityEngine.Object, P1, P2, P3, T>
    {
        public DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab, P1 param, P2 param2, P3 param3);
    }

    public class PrefabFactory<P1, P2, P3, P4, T> : IFactory, Zenject.IFactory<UnityEngine.Object, P1, P2, P3, P4, T>
    {
        public DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab, P1 param, P2 param2, P3 param3, P4 param4);
    }

    [NoReflectionBaking] public class PrefabGameObjectProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public PrefabGameObjectProvider(IPrefabInstantiator prefabCreator) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class PrefabInstantiator : IPrefabInstantiator
    {
        public System.Type ArgumentTarget { get; }
        public System.Collections.Generic.List<TypeValuePair> ExtraArguments { get; }
        public GameObjectCreationParameters GameObjectCreationParameters { get; }
        public PrefabInstantiator(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, System.Type argumentTarget, System.Collections.Generic.IEnumerable<System.Type> instantiateCallbackTypes, System.Collections.Generic.IEnumerable<TypeValuePair> extraArguments, IPrefabProvider prefabProvider, System.Action<InjectContext, object> instantiateCallback) {}
        public UnityEngine.Object GetPrefab(InjectContext context);
        public UnityEngine.GameObject Instantiate(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction);
    }

    [NoReflectionBaking] public class PrefabInstantiatorCached : IPrefabInstantiator
    {
        public System.Type ArgumentTarget { get; }
        public System.Collections.Generic.List<TypeValuePair> ExtraArguments { get; }
        public GameObjectCreationParameters GameObjectCreationParameters { get; }
        public PrefabInstantiatorCached(IPrefabInstantiator subInstantiator) {}
        public UnityEngine.Object GetPrefab(InjectContext context);
        public UnityEngine.GameObject Instantiate(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction);
    }

    [NoReflectionBaking] public class PrefabProvider : IPrefabProvider
    {
        public PrefabProvider(UnityEngine.Object prefab) {}
        public UnityEngine.Object GetPrefab(InjectContext _);
    }

    [NoReflectionBaking] public class PrefabProviderCustom : IPrefabProvider
    {
        public PrefabProviderCustom(System.Func<InjectContext, UnityEngine.Object> getter) {}
        public UnityEngine.Object GetPrefab(InjectContext context);
    }

    [NoReflectionBaking] public class PrefabProviderResource : IPrefabProvider
    {
        public PrefabProviderResource(string resourcePath) {}
        public UnityEngine.Object GetPrefab(InjectContext context);
    }

    [NoReflectionBaking] public class PrefabResourceBindingFinalizer : ProviderBindingFinalizer
    {
        public PrefabResourceBindingFinalizer(BindInfo bindInfo, GameObjectCreationParameters gameObjectBindInfo, string resourcePath, System.Func<System.Type, IPrefabInstantiator, IProvider> providerFactory) {}
        protected override void OnFinalizeBinding(DiContainer container);
    }

    public class PrefabResourceFactory<T> : IFactory, Zenject.IFactory<string, T>
    {
        public DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName);
    }

    public class PrefabResourceFactory<P1, T> : IFactory, Zenject.IFactory<string, P1, T>
    {
        public DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName, P1 param);
    }

    public class PrefabResourceFactory<P1, P2, T> : IFactory, Zenject.IFactory<string, P1, P2, T>
    {
        public DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName, P1 param, P2 param2);
    }

    public class PrefabResourceFactory<P1, P2, P3, T> : IFactory, Zenject.IFactory<string, P1, P2, P3, T>
    {
        public DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName, P1 param, P2 param2, P3 param3);
    }

    public class PrefabResourceFactory<P1, P2, P3, P4, T> : IFactory, Zenject.IFactory<string, P1, P2, P3, P4, T>
    {
        public DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName, P1 param, P2 param2, P3 param3, P4 param4);
    }

    [NoReflectionBaking] public class ProfileBlock : System.IDisposable
    {
        public static System.Text.RegularExpressions.Regex ProfilePattern { get; set; }
        public static System.Threading.Thread UnityMainThread { get; set; }
        public void Dispose();
        public static ProfileBlock Start(string sampleName);
        public static ProfileBlock Start(string sampleNameFormat, object obj);
        public static ProfileBlock Start(string sampleNameFormat, object obj1, object obj2);
    }

    public class ProjectContext : Context
    {
        public const string ProjectContextResourcePath = @"ProjectContext";
        public const string ProjectContextResourcePathOld = @"ProjectCompositionRoot";
        public static event System.Action PostInstall;
        public static event System.Action PostResolve;
        public static event System.Action PreInstall;
        public static event System.Action PreResolve;
        public override DiContainer Container { get; }
        public static bool HasInstance { get; }
        public static ProjectContext Instance { get; }
        public bool ParentNewObjectsUnderContext { get; set; }
        public static bool ValidateOnNextRun { get; set; }
        public ProjectContext() {}
        public void Awake();
        public void EnsureIsInitialized();
        protected override void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public override System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        public static UnityEngine.GameObject TryGetPrefab();
    }

    public class ProjectKernel : MonoKernel
    {
        public ProjectKernel() {}
        public void DestroyEverythingInOrder();
        public void ForceUnloadAllScenes(bool immediate = false);
        public void OnApplicationQuit();
    }

    [NoReflectionBaking] public abstract class ProviderBindingFinalizer : IBindingFinalizer
    {
        protected BindInfo BindInfo { get; }
        public BindingInheritanceMethods BindingInheritanceMethod { get; }
        public ProviderBindingFinalizer(BindInfo bindInfo) {}
        public void FinalizeBinding(DiContainer container);
        protected ScopeTypes GetScope();
        protected abstract void OnFinalizeBinding(DiContainer container);
        protected void RegisterProvider<TContract>(DiContainer container, IProvider provider);
        protected void RegisterProvider(DiContainer container, System.Type contractType, IProvider provider);
        protected void RegisterProviderForAllContracts(DiContainer container, IProvider provider);
        protected void RegisterProviderPerContract(DiContainer container, System.Func<DiContainer, System.Type, IProvider> providerFunc);
        protected void RegisterProvidersForAllContractsPerConcreteType(DiContainer container, System.Collections.Generic.List<System.Type> concreteTypes, System.Func<DiContainer, System.Type, IProvider> providerFunc);
        protected void RegisterProvidersPerContractAndConcreteType(DiContainer container, System.Collections.Generic.List<System.Type> concreteTypes, System.Func<System.Type, System.Type, IProvider> providerFunc);
    }

    public static class ProviderUtil
    {
        public static System.Type GetTypeToInstantiate(System.Type contractType, System.Type concreteType);
    }

    public enum ReflectionBakingCoverageModes
    {
        FallbackToDirectReflection = 0,
        FallbackToDirectReflectionWithWarning = 2,
        NoCheckAssumeFullCoverage = 1,
    }

    [NoReflectionBaking] public class ResolveProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public ResolveProvider(System.Type contractType, DiContainer container, object identifier, bool isOptional, InjectSources source, bool matchAll) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class ResourceProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public ResourceProvider(string resourcePath, System.Type resourceType, bool matchSingle) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    public enum RootResolveMethods
    {
        All = 1,
        NonLazyOnly = 0,
    }

    public abstract class RunnableContext : Context
    {
        public bool Initialized { get; }
        protected RunnableContext() {}
        public static T CreateComponent<T>(UnityEngine.GameObject gameObject) where T : RunnableContext;
        protected void Initialize();
        public void Run();
        protected abstract void RunInternal();
    }

    public class SceneContext : RunnableContext
    {
        public static System.Action<DiContainer> ExtraBindingsInstallMethod;
        public static System.Action<DiContainer> ExtraBindingsLateInstallMethod;
        public UnityEngine.Events.UnityEvent OnPostInstall;
        public UnityEngine.Events.UnityEvent OnPostResolve;
        public UnityEngine.Events.UnityEvent OnPreInstall;
        public UnityEngine.Events.UnityEvent OnPreResolve;
        public static System.Collections.Generic.IEnumerable<DiContainer> ParentContainers;
        public event System.Action PostInstall;
        public event System.Action PostResolve;
        public event System.Action PreInstall;
        public event System.Action PreResolve;
        public override DiContainer Container { get; }
        public System.Collections.Generic.IEnumerable<string> ContractNames { get; set; }
        public bool HasInstalled { get; }
        public bool HasResolved { get; }
        public bool IsValidating { get; }
        public System.Collections.Generic.IEnumerable<string> ParentContractNames { get; set; }
        public bool ParentNewObjectsUnderSceneContext { get; set; }
        public SceneContext() {}
        public void Awake();
        public static SceneContext Create();
        protected override void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public override System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        public void Install();
        public void Resolve();
        protected override void RunInternal();
        public void Validate();
    }

    public class SceneContextRegistry
    {
        public System.Collections.Generic.IEnumerable<SceneContext> SceneContexts { get; }
        public SceneContextRegistry() {}
        public void Add(SceneContext context);
        public DiContainer GetContainerForScene(UnityEngine.SceneManagement.Scene scene);
        public SceneContext GetSceneContextForScene(string name);
        public SceneContext GetSceneContextForScene(UnityEngine.SceneManagement.Scene scene);
        public void Remove(SceneContext context);
        public DiContainer TryGetContainerForScene(UnityEngine.SceneManagement.Scene scene);
        public SceneContext TryGetSceneContextForScene(string name);
        public SceneContext TryGetSceneContextForScene(UnityEngine.SceneManagement.Scene scene);
    }

    public class SceneContextRegistryAdderAndRemover : IInitializable, System.IDisposable
    {
        public SceneContextRegistryAdderAndRemover(SceneContext sceneContext, SceneContextRegistry registry) {}
        public void Dispose();
        public void Initialize();
    }

    public class SceneDecoratorContext : Context
    {
        public override DiContainer Container { get; }
        public string DecoratedContractName { get; }
        public System.Collections.Generic.IEnumerable<MonoInstaller> LateInstallerPrefabs { get; set; }
        public System.Collections.Generic.IEnumerable<MonoInstaller> LateInstallers { get; set; }
        public System.Collections.Generic.IEnumerable<ScriptableObjectInstaller> LateScriptableObjectInstallers { get; set; }
        public SceneDecoratorContext() {}
        protected override void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public override System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        public void Initialize(DiContainer container);
        public void InstallDecoratorInstallers();
        public void InstallDecoratorSceneBindings();
        public void InstallLateDecoratorInstallers();
    }

    public class SceneKernel : MonoKernel
    {
        public SceneKernel() {}
    }

    [NoReflectionBaking] public class ScopableBindingFinalizer : ProviderBindingFinalizer
    {
        public ScopableBindingFinalizer(BindInfo bindInfo, System.Func<DiContainer, System.Type, IProvider> providerFactory) {}
        protected override void OnFinalizeBinding(DiContainer container);
    }

    [NoReflectionBaking] public class ScopeConcreteIdArgConditionCopyNonLazyBinder : ConcreteIdArgConditionCopyNonLazyBinder
    {
        public ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo bindInfo) {}
        public ConcreteIdArgConditionCopyNonLazyBinder AsCached();
        public ConcreteIdArgConditionCopyNonLazyBinder AsSingle();
        public ConcreteIdArgConditionCopyNonLazyBinder AsTransient();
    }

    public enum ScopeTypes
    {
        Singleton = 2,
        Transient = 1,
        Unset = 0,
    }

    public class ScriptableObjectInstaller : ScriptableObjectInstallerBase
    {
        public ScriptableObjectInstaller() {}
    }

    public class ScriptableObjectInstaller<TDerived> : ScriptableObjectInstaller where TDerived : Zenject.ScriptableObjectInstaller<TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(DiContainer container);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container);
    }

    public class ScriptableObjectInstaller<TParam1, TDerived> : ScriptableObjectInstallerBase where TDerived : Zenject.ScriptableObjectInstaller<TParam1, TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(DiContainer container, TParam1 p1);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1);
    }

    public class ScriptableObjectInstaller<TParam1, TParam2, TDerived> : ScriptableObjectInstallerBase where TDerived : Zenject.ScriptableObjectInstaller<TParam1, TParam2, TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2);
    }

    public class ScriptableObjectInstaller<TParam1, TParam2, TParam3, TDerived> : ScriptableObjectInstallerBase where TDerived : Zenject.ScriptableObjectInstaller<TParam1, TParam2, TParam3, TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
    }

    public class ScriptableObjectInstaller<TParam1, TParam2, TParam3, TParam4, TDerived> : ScriptableObjectInstallerBase where TDerived : Zenject.ScriptableObjectInstaller<TParam1, TParam2, TParam3, TParam4, TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
    }

    public class ScriptableObjectInstallerBase : UnityEngine.ScriptableObject, IInstaller
    {
        protected DiContainer Container { get; }
        public ScriptableObjectInstallerBase() {}
        public virtual void InstallBindings();
    }

    public static class ScriptableObjectInstallerUtil
    {
        public static TInstaller CreateInstaller<TInstaller>(string resourcePath, DiContainer container) where TInstaller : ScriptableObjectInstallerBase;
        public static string GetDefaultResourcePath<TInstaller>() where TInstaller : ScriptableObjectInstallerBase;
    }

    [NoReflectionBaking] public class ScriptableObjectInstanceProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public ScriptableObjectInstanceProvider(UnityEngine.Object resource, System.Type resourceType, DiContainer container, System.Collections.Generic.IEnumerable<TypeValuePair> extraArguments, bool createNew, object concreteIdentifier, System.Action<InjectContext, object> instantiateCallback) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class ScriptableObjectResourceProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public ScriptableObjectResourceProvider(string resourcePath, System.Type resourceType, DiContainer container, System.Collections.Generic.IEnumerable<TypeValuePair> extraArguments, bool createNew, object concreteIdentifier, System.Action<InjectContext, object> instantiateCallback) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class SignalBindingBindInfo
    {
        public object Identifier { get; set; }
        public System.Type SignalType { get; }
        public SignalBindingBindInfo(System.Type signalType) {}
    }

    public class SignalBus : ILateDisposable
    {
        public int NumSubscribers { get; }
        public SignalBus ParentBus { get; }
        public SignalBus([Inject(Source = InjectSources.Local)] System.Collections.Generic.List<SignalDeclaration> signalDeclarations, [Inject(Optional = true, Source = InjectSources.Parent)] SignalBus parentBus, [InjectOptional] ZenjectSettings zenjectSettings, SignalSubscription.Pool subscriptionPool, SignalDeclaration.Factory signalDeclarationFactory, DiContainer container) {}
        public void AbstractFire<TSignal>() where TSignal : new();
        public void AbstractFire<TSignal>(TSignal signal);
        public void AbstractFireId<TSignal>(object identifier, TSignal signal);
        public void DeclareSignal<T>(object identifier = default(object), System.Nullable<SignalMissingHandlerResponses> missingHandlerResponse = default(System.Nullable<SignalMissingHandlerResponses>), System.Nullable<bool> forceAsync = default(System.Nullable<bool>), System.Nullable<int> asyncTickPriority = default(System.Nullable<int>));
        public void DeclareSignal(System.Type signalType, object identifier = default(object), System.Nullable<SignalMissingHandlerResponses> missingHandlerResponse = default(System.Nullable<SignalMissingHandlerResponses>), System.Nullable<bool> forceAsync = default(System.Nullable<bool>), System.Nullable<int> asyncTickPriority = default(System.Nullable<int>));
        public void Fire<TSignal>();
        public void Fire(object signal);
        public void Fire<TSignal>(TSignal signal);
        public void FireId<TSignal>(object identifier);
        public void FireId(object identifier, object signal);
        public void FireId<TSignal>(object identifier, TSignal signal);
        public bool IsSignalDeclared<TSignal>();
        public bool IsSignalDeclared<TSignal>(object identifier);
        public bool IsSignalDeclared(System.Type signalType);
        public bool IsSignalDeclared(System.Type signalType, object identifier);
        public void LateDispose();
        public void Subscribe<TSignal>(System.Action callback);
        public void Subscribe<TSignal>(System.Action<TSignal> callback);
        public void Subscribe(System.Type signalType, System.Action<object> callback);
        public void SubscribeId<TSignal>(object identifier, System.Action callback);
        public void SubscribeId<TSignal>(object identifier, System.Action<TSignal> callback);
        public void SubscribeId(System.Type signalType, object identifier, System.Action<object> callback);
        public void TryFire<TSignal>();
        public void TryFire(object signal);
        public void TryFire<TSignal>(TSignal signal);
        public void TryFireId<TSignal>(object identifier);
        public void TryFireId(object identifier, object signal);
        public void TryFireId<TSignal>(object identifier, TSignal signal);
        public void TryUnsubscribe<TSignal>(System.Action callback);
        public void TryUnsubscribe<TSignal>(System.Action<TSignal> callback);
        public void TryUnsubscribe(System.Type signalType, System.Action callback);
        public void TryUnsubscribe(System.Type signalType, System.Action<object> callback);
        public void TryUnsubscribeId<TSignal>(object identifier, System.Action callback);
        public void TryUnsubscribeId<TSignal>(object identifier, System.Action<TSignal> callback);
        public void TryUnsubscribeId(System.Type signalType, object identifier, System.Action callback);
        public void TryUnsubscribeId(System.Type signalType, object identifier, System.Action<object> callback);
        public void Unsubscribe<TSignal>(System.Action callback);
        public void Unsubscribe<TSignal>(System.Action<TSignal> callback);
        public void Unsubscribe(System.Type signalType, System.Action callback);
        public void Unsubscribe(System.Type signalType, System.Action<object> callback);
        public void UnsubscribeId<TSignal>(object identifier, System.Action callback);
        public void UnsubscribeId<TSignal>(object identifier, System.Action<TSignal> callback);
        public void UnsubscribeId(System.Type signalType, object identifier, System.Action callback);
        public void UnsubscribeId(System.Type signalType, object identifier, System.Action<object> callback);
    }

    public class SignalBusInstaller : Zenject.Installer<SignalBusInstaller>
    {
        public SignalBusInstaller() {}
        public override void InstallBindings();
    }

    public class SignalCallbackWithLookupWrapper : System.IDisposable
    {
        public SignalCallbackWithLookupWrapper(SignalBindingBindInfo signalBindInfo, System.Type objectType, System.Guid lookupId, System.Func<object, System.Action<object>> methodGetter, SignalBus signalBus, DiContainer container) {}
        public void Dispose();
    }

    public class SignalCallbackWrapper : System.IDisposable
    {
        public SignalCallbackWrapper(SignalBindingBindInfo bindInfo, System.Action<object> action, SignalBus signalBus) {}
        public void Dispose();
    }

    [NoReflectionBaking] public class SignalCopyBinder
    {
        public SignalCopyBinder() {}
        public SignalCopyBinder(BindInfo bindInfo) {}
        public void AddCopyBindInfo(BindInfo bindInfo);
        public void CopyIntoAllSubContainers();
        public void CopyIntoDirectSubContainers();
        public void MoveIntoAllSubContainers();
        public void MoveIntoDirectSubContainers();
    }

    public class SignalDeclaration : ITickable, System.IDisposable
    {
        public BindingId BindingId { get; }
        public bool IsAsync { get; }
        public System.Collections.Generic.List<SignalSubscription> Subscriptions { get; }
        public int TickPriority { get; }
        public SignalDeclaration(SignalDeclarationBindInfo bindInfo, [InjectOptional] ZenjectSettings zenjectSettings) {}
        public void Add(SignalSubscription subscription);
        public void Dispose();
        public void Fire(object signal);
        public void Remove(SignalSubscription subscription);
        public void Tick();
        public class Factory : Zenject.PlaceholderFactory<SignalDeclarationBindInfo, SignalDeclaration>
        {
            public Factory() {}
        }
    }

    public class SignalDeclarationAsyncInitializer : IInitializable
    {
        public SignalDeclarationAsyncInitializer([Inject(Source = InjectSources.Local)] System.Collections.Generic.List<SignalDeclaration> declarations, [Inject(Optional = true, Source = InjectSources.Local)] Zenject.LazyInject<TickableManager> tickManager) {}
        public void Initialize();
    }

    [NoReflectionBaking] public class SignalDeclarationBindInfo
    {
        public object Identifier { get; set; }
        public SignalMissingHandlerResponses MissingHandlerResponse { get; set; }
        public bool RunAsync { get; set; }
        public System.Type SignalType { get; }
        public int TickPriority { get; set; }
        public SignalDeclarationBindInfo(System.Type signalType) {}
    }

    public enum SignalDefaultSyncModes
    {
        Asynchronous = 1,
        Synchronous = 0,
    }

    public static class SignalExtensions
    {
        public static Zenject.BindSignalIdToBinder<TSignal> BindSignal<TSignal>(this DiContainer container);
        public static SignalDeclarationBindInfo CreateDefaultSignalDeclarationBindInfo(DiContainer container, System.Type signalType);
        public static DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignal<TSignal>(this DiContainer container);
        public static DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignal(this DiContainer container, System.Type type);
        public static DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignalWithInterfaces<TSignal>(this DiContainer container);
    }

    public enum SignalMissingHandlerResponses
    {
        Ignore = 0,
        Throw = 1,
        Warn = 2,
    }

    public class SignalSubscription : System.IDisposable, Zenject.IPoolable<System.Action<object>, SignalDeclaration>
    {
        public BindingId SignalId { get; }
        public SignalSubscription(SignalSubscription.Pool pool) {}
        public void Dispose();
        public void Invoke(object signal);
        public void OnDeclarationDespawned();
        public void OnDespawned();
        public void OnSpawned(System.Action<object> callback, SignalDeclaration declaration);
        public class Pool : Zenject.PoolableMemoryPool<System.Action<object>, SignalDeclaration, SignalSubscription>
        {
            public Pool() {}
        }
    }

    public struct SignalSubscriptionId : System.IEquatable<SignalSubscriptionId>
    {
        public object Callback { get; }
        public BindingId SignalId { get; }
        public SignalSubscriptionId(BindingId signalId, object callback) {}
        public override bool Equals(object that);
        public bool Equals(SignalSubscriptionId that);
        public override int GetHashCode();
        public static bool operator ==(SignalSubscriptionId left, SignalSubscriptionId right);
        public static bool operator !=(SignalSubscriptionId left, SignalSubscriptionId right);
    }

    [NoReflectionBaking] public class SignalTickPriorityCopyBinder : SignalCopyBinder
    {
        protected SignalDeclarationBindInfo SignalBindInfo { get; }
        public SignalTickPriorityCopyBinder(SignalDeclarationBindInfo signalBindInfo) {}
        public SignalCopyBinder WithTickPriority(int priority);
    }

    [NoReflectionBaking] public class SingleProviderBindingFinalizer : ProviderBindingFinalizer
    {
        public SingleProviderBindingFinalizer(BindInfo bindInfo, System.Func<DiContainer, System.Type, IProvider> providerFactory) {}
        protected override void OnFinalizeBinding(DiContainer container);
    }

    public static class StaticContext
    {
        public static DiContainer Container { get; }
        public static bool HasContainer { get; }
        public static void Clear();
    }

    [NoReflectionBaking] public class StaticMemoryPool<TValue> : Zenject.StaticMemoryPoolBase<TValue>, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool<TValue> where TValue : class, new()
    {
        public System.Action<TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TValue> onSpawnMethod = default(System.Action<TValue>), System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public TValue Spawn();
    }

    [NoReflectionBaking] public class StaticMemoryPool<TParam1, TValue> : Zenject.StaticMemoryPoolBase<TValue>, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool<TParam1, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public TValue Spawn(TParam1 param);
    }

    [NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TValue> : Zenject.StaticMemoryPoolBase<TValue>, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool<TParam1, TParam2, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TParam2, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TParam2, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public TValue Spawn(TParam1 p1, TParam2 p2);
    }

    [NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.StaticMemoryPoolBase<TValue>, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TParam2, TParam3, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TParam2, TParam3, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3);
    }

    [NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.StaticMemoryPoolBase<TValue>, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : class, new()
    {
        public ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
    }

    [NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.StaticMemoryPoolBase<TValue>, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : class, new()
    {
        public ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
    }

    [NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.StaticMemoryPoolBase<TValue>, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> where TValue : class, new()
    {
        public ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6);
    }

    [NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.StaticMemoryPoolBase<TValue>, IMemoryPool, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> where TValue : class, new()
    {
        public ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7);
    }

    [NoReflectionBaking] public abstract class StaticMemoryPoolBase<TValue> : Zenject.StaticMemoryPoolBaseBase<TValue> where TValue : class, new()
    {
        public StaticMemoryPoolBase(System.Action<TValue> onDespawnedMethod) {}
        protected override TValue Alloc();
    }

    [NoReflectionBaking] public abstract class StaticMemoryPoolBaseBase<TValue> : IMemoryPool, System.IDisposable, Zenject.IDespawnableMemoryPool<TValue> where TValue : class
    {
        public System.Type ItemType { get; }
        public int NumActive { get; }
        public int NumInactive { get; }
        public int NumTotal { get; }
        public System.Action<TValue> OnDespawnedMethod { set; }
        public StaticMemoryPoolBaseBase(System.Action<TValue> onDespawnedMethod) {}
        protected abstract TValue Alloc();
        public void Clear();
        public void ClearActiveCount();
        public void Despawn(TValue element);
        public void Dispose();
        public void ExpandBy(int numToAdd);
        public void Resize(int desiredPoolSize);
        public void ShrinkBy(int numToRemove);
        protected TValue SpawnInternal();
    }

    public static class StaticMemoryPoolRegistry
    {
        public static event System.Action<IMemoryPool> PoolAdded;
        public static event System.Action<IMemoryPool> PoolRemoved;
        public static System.Collections.Generic.IEnumerable<IMemoryPool> Pools { get; }
        public static void Add(IMemoryPool memoryPool);
        public static void Remove(IMemoryPool memoryPool);
    }

    [NoReflectionBaking] public class SubContainerBinder
    {
        protected IBindingFinalizer SubFinalizer { set; }
        public SubContainerBinder(BindInfo bindInfo, BindStatement bindStatement, object subIdentifier, bool resolveAll) {}
        public WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller<TInstaller>() where TInstaller : InstallerBase;
        public WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller(System.Type installerType);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstance(DiContainer subContainer);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstanceGetter(System.Func<InjectContext, DiContainer> subContainerGetter);
        public WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<DiContainer> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab(UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource(string resourcePath);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller<TInstaller>() where TInstaller : InstallerBase;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller(System.Type installerType);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<DiContainer> installerMethod);
        [System.Obsolete(@"ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")] public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab(UnityEngine.Object prefab);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(System.Func<InjectContext, UnityEngine.Object> prefabGetter) where TInstaller : InstallerBase;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(UnityEngine.Object prefab) where TInstaller : InstallerBase;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(System.Func<InjectContext, UnityEngine.Object> prefabGetter, System.Type installerType);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(UnityEngine.Object prefab, System.Type installerType);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<InjectContext, UnityEngine.Object> prefabGetter, System.Action<DiContainer> installerMethod);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<DiContainer> installerMethod);
        [System.Obsolete(@"ByNewPrefabResource has been renamed to ByNewContextPrefabResource to avoid confusion with ByNewPrefabResourceInstaller and ByNewPrefabResourceMethod")] public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource(string resourcePath);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller<TInstaller>(string resourcePath) where TInstaller : InstallerBase;
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller(string resourcePath, System.Type installerType);
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<DiContainer> installerMethod);
    }

    [NoReflectionBaking] public class SubContainerBindingFinalizer : ProviderBindingFinalizer
    {
        public SubContainerBindingFinalizer(BindInfo bindInfo, object subIdentifier, bool resolveAll, System.Func<DiContainer, ISubContainerCreator> creatorFactory) {}
        protected override void OnFinalizeBinding(DiContainer container);
    }

    [NoReflectionBaking] public class SubContainerCreatorBindInfo
    {
        public bool CreateKernel { get; set; }
        public string DefaultParentName { get; set; }
        public System.Type KernelType { get; set; }
        public SubContainerCreatorBindInfo() {}
    }

    [NoReflectionBaking] public class SubContainerCreatorByInstaller : ISubContainerCreator
    {
        public SubContainerCreatorByInstaller(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, System.Type installerType) {}
        public SubContainerCreatorByInstaller(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, System.Type installerType, System.Collections.Generic.IEnumerable<TypeValuePair> extraArgs) {}
        public DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByInstance : ISubContainerCreator
    {
        public SubContainerCreatorByInstance(DiContainer subcontainer) {}
        public DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByInstanceGetter : ISubContainerCreator
    {
        public SubContainerCreatorByInstanceGetter(System.Func<InjectContext, DiContainer> subcontainerGetter) {}
        public DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByMethod : SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, System.Action<DiContainer> installMethod) {}
        public override DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1> : SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, System.Action<DiContainer, TParam1> installMethod) {}
        public override DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installMethod) {}
        public override DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2> : SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, System.Action<DiContainer, TParam1, TParam2> installMethod) {}
        public override DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3> : SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, System.Action<DiContainer, TParam1, TParam2, TParam3> installMethod) {}
        public override DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4> : SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installMethod) {}
        public override DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installMethod) {}
        public override DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(DiContainer container, SubContainerCreatorBindInfo containerBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installMethod) {}
        public override DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public abstract class SubContainerCreatorByMethodBase : ISubContainerCreator
    {
        public SubContainerCreatorByMethodBase(DiContainer container, SubContainerCreatorBindInfo containerBindInfo) {}
        protected DiContainer CreateEmptySubContainer();
        public abstract DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public abstract class SubContainerCreatorByNewGameObjectDynamicContext : SubContainerCreatorDynamicContext
    {
        public SubContainerCreatorByNewGameObjectDynamicContext(DiContainer container, GameObjectCreationParameters gameObjectBindInfo) {}
        protected override UnityEngine.GameObject CreateGameObject(InjectContext context, out bool shouldMakeActive);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewGameObjectInstaller : SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectInstaller(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, System.Type installerType, System.Collections.Generic.List<TypeValuePair> extraArgs) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod : SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, System.Action<DiContainer> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1> : SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, System.Action<DiContainer, TParam1> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2> : SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, System.Action<DiContainer, TParam1, TParam2> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3> : SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, System.Action<DiContainer, TParam1, TParam2, TParam3> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4> : SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(DiContainer container, GameObjectCreationParameters gameObjectBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefab : ISubContainerCreator
    {
        public SubContainerCreatorByNewPrefab(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo) {}
        public DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext parentContext, out System.Action injectAction);
    }

    [NoReflectionBaking] public abstract class SubContainerCreatorByNewPrefabDynamicContext : SubContainerCreatorDynamicContext
    {
        public SubContainerCreatorByNewPrefabDynamicContext(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo) {}
        protected override UnityEngine.GameObject CreateGameObject(InjectContext context, out bool shouldMakeActive);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabInstaller : SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabInstaller(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo, System.Type installerType, System.Collections.Generic.List<TypeValuePair> extraArgs) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod : SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo, System.Action<DiContainer> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1> : SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo, System.Action<DiContainer, TParam1> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2> : SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo, System.Action<DiContainer, TParam1, TParam2> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3> : SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo, System.Action<DiContainer, TParam1, TParam2, TParam3> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4> : SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo, ModestTree.Util.Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod) {}
        protected override void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
    }

    [NoReflectionBaking] public class SubContainerCreatorByNewPrefabWithParams : ISubContainerCreator
    {
        protected DiContainer Container { get; }
        public SubContainerCreatorByNewPrefabWithParams(System.Type installerType, DiContainer container, IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo) {}
        public DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext parentContext, out System.Action injectAction);
    }

    [NoReflectionBaking] public class SubContainerCreatorCached : ISubContainerCreator
    {
        public SubContainerCreatorCached(ISubContainerCreator subCreator) {}
        public DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext context, out System.Action injectAction);
    }

    [NoReflectionBaking] public abstract class SubContainerCreatorDynamicContext : ISubContainerCreator
    {
        protected DiContainer Container { get; }
        public SubContainerCreatorDynamicContext(DiContainer container) {}
        protected abstract void AddInstallers(System.Collections.Generic.List<TypeValuePair> args, GameObjectContext context);
        protected abstract UnityEngine.GameObject CreateGameObject(InjectContext context, out bool shouldMakeActive);
        public DiContainer CreateSubContainer(System.Collections.Generic.List<TypeValuePair> args, InjectContext parentContext, out System.Action injectAction);
    }

    public static class SubContainerCreatorUtil
    {
        public static void ApplyBindSettings(SubContainerCreatorBindInfo subContainerBindInfo, DiContainer subContainer);
    }

    [NoReflectionBaking] public class SubContainerDependencyProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public SubContainerDependencyProvider(System.Type dependencyType, object identifier, ISubContainerCreator subContainerCreator, bool resolveAll) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    [NoReflectionBaking] public class SubContainerPrefabBindingFinalizer : ProviderBindingFinalizer
    {
        public SubContainerPrefabBindingFinalizer(BindInfo bindInfo, object subIdentifier, bool resolveAll, System.Func<DiContainer, ISubContainerCreator> subContainerCreatorFactory) {}
        protected override void OnFinalizeBinding(DiContainer container);
    }

    public abstract class TaskUpdater<TTask>
    {
        protected TaskUpdater() {}
        public void AddTask(TTask task, int priority);
        public void OnFrameStart();
        public void RemoveTask(TTask task);
        public void UpdateAll();
        protected abstract void UpdateItem(TTask task);
        public void UpdateRange(int minPriority, int maxPriority);
    }

    public class TickableManager
    {
        public bool IsPaused { get; set; }
        public System.Collections.Generic.IEnumerable<ITickable> Tickables { get; }
        [Inject] public TickableManager() {}
        public void Add(ITickable tickable);
        public void Add(ITickable tickable, int priority);
        public void AddFixed(IFixedTickable tickable);
        public void AddFixed(IFixedTickable tickable, int priority);
        public void AddLate(ILateTickable tickable);
        public void AddLate(ILateTickable tickable, int priority);
        public void FixedUpdate();
        [Inject] public void Initialize();
        public void LateUpdate();
        public void Remove(ITickable tickable);
        public void RemoveFixed(IFixedTickable tickable);
        public void RemoveLate(ILateTickable tickable);
        public void Update();
    }

    public class TickablesTaskUpdater : Zenject.TaskUpdater<ITickable>
    {
        public TickablesTaskUpdater() {}
        protected override void UpdateItem(ITickable task);
    }

    public enum ToChoices
    {
        Concrete = 1,
        Self = 0,
    }

    [NoReflectionBaking] public class TransformScopeConcreteIdArgConditionCopyNonLazyBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        protected GameObjectCreationParameters GameObjectInfo { get; }
        public TransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo bindInfo, GameObjectCreationParameters gameObjectInfo) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder UnderTransform(System.Func<InjectContext, UnityEngine.Transform> parentGetter);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder UnderTransform(UnityEngine.Transform parent);
        public ScopeConcreteIdArgConditionCopyNonLazyBinder UnderTransformGroup(string transformGroupname);
    }

    [NoReflectionBaking] public class TransientProvider : IProvider
    {
        public bool IsCached { get; }
        public bool TypeVariesBasedOnMemberType { get; }
        public TransientProvider(System.Type concreteType, DiContainer container, System.Collections.Generic.IEnumerable<TypeValuePair> extraArguments, string bindingContext, object concreteIdentifier, System.Action<InjectContext, object> instantiateCallback) {}
        public void GetAllInstancesWithInjectSplit(InjectContext context, System.Collections.Generic.List<TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public System.Type GetInstanceType(InjectContext context);
    }

    public static class TypeAnalyzer
    {
        public const string ReflectionBakingFactoryMethodName = @"__zenCreate";
        public const string ReflectionBakingFieldSetterPrefix = @"__zenFieldSetter";
        public const string ReflectionBakingGetInjectInfoMethodName = @"__zenCreateInjectTypeInfo";
        public const string ReflectionBakingInjectMethodPrefix = @"__zenInjectMethod";
        public const string ReflectionBakingPropertySetterPrefix = @"__zenPropertySetter";
        public static ReflectionBakingCoverageModes ReflectionBakingCoverageMode { get; set; }
        public static InjectTypeInfo GetInfo<T>();
        public static InjectTypeInfo GetInfo(System.Type type);
        public static bool HasInfo<T>();
        public static bool HasInfo(System.Type type);
        public static bool ShouldAllowDuringValidation<T>();
        public static bool ShouldAllowDuringValidation(System.Type type);
        public static bool ShouldSkipTypeAnalysis(System.Type type);
        public static InjectTypeInfo TryGetInfo<T>();
        public static InjectTypeInfo TryGetInfo(System.Type type);
    }

    public struct TypeValuePair
    {
        public System.Type Type;
        public object Value;
        public TypeValuePair(System.Type type, object value) {}
    }

    public enum ValidationErrorResponses
    {
        Log = 0,
        Throw = 1,
    }

    [NoReflectionBaking] public class ValidationMarker
    {
        public bool InstantiateFailed { get; }
        public System.Type MarkedType { get; }
        public ValidationMarker(System.Type markedType) {}
        public ValidationMarker(System.Type markedType, bool instantiateFailed) {}
    }

    public static class ValidationUtil
    {
        public static System.Collections.Generic.List<TypeValuePair> CreateDefaultArgs(params System.Type[] argTypes);
    }

    [NoReflectionBaking] public class WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder : DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder(SubContainerCreatorBindInfo subContainerBindInfo, BindInfo bindInfo) {}
        public DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel();
        public DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel<TKernel>() where TKernel : Kernel;
    }

    [NoReflectionBaking] public class WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder(SubContainerCreatorBindInfo subContainerBindInfo, BindInfo bindInfo) {}
        public ScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel();
        public ScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel<TKernel>() where TKernel : Kernel;
    }

    public class ZenAutoInjecter : UnityEngine.MonoBehaviour
    {
        public ZenAutoInjecter.ContainerSources ContainerSource { get; set; }
        public ZenAutoInjecter() {}
        public void Awake();
        [Inject] public void Construct();
        public enum ContainerSources
        {
            ProjectContext = 1,
            SceneContext = 0,
            SearchHierarchy = 2,
        }
    }

    public class ZenjectBinding : UnityEngine.MonoBehaviour
    {
        public ZenjectBinding.BindTypes BindType { get; }
        public UnityEngine.Component[] Components { get; }
        public Context Context { get; set; }
        public string Identifier { get; }
        public bool UseSceneContext { get; }
        public ZenjectBinding() {}
        public void Start();
        public enum BindTypes
        {
            AllInterfaces = 1,
            AllInterfacesAndSelf = 2,
            BaseType = 3,
            Self = 0,
        }
    }

    [NoReflectionBaking] public class ZenjectException : System.Exception
    {
        public ZenjectException(string message) {}
        public ZenjectException(string message, System.Exception innerException) {}
    }

    public class ZenjectManagersInstaller : Zenject.Installer<ZenjectManagersInstaller>
    {
        public ZenjectManagersInstaller() {}
        public override void InstallBindings();
    }

    public class ZenjectSceneLoader
    {
        public ZenjectSceneLoader([InjectOptional] SceneContext sceneRoot, ProjectKernel projectKernel) {}
        public void LoadScene(int sceneIndex, UnityEngine.SceneManagement.LoadSceneMode loadMode = UnityEngine.SceneManagement.LoadSceneMode.Single, System.Action<DiContainer> extraBindings = default(System.Action<DiContainer>), LoadSceneRelationship containerMode = LoadSceneRelationship.None, System.Action<DiContainer> extraBindingsLate = default(System.Action<DiContainer>));
        public void LoadScene(string sceneName, UnityEngine.SceneManagement.LoadSceneMode loadMode = UnityEngine.SceneManagement.LoadSceneMode.Single, System.Action<DiContainer> extraBindings = default(System.Action<DiContainer>), LoadSceneRelationship containerMode = LoadSceneRelationship.None, System.Action<DiContainer> extraBindingsLate = default(System.Action<DiContainer>));
        public UnityEngine.AsyncOperation LoadSceneAsync(int sceneIndex, UnityEngine.SceneManagement.LoadSceneMode loadMode = UnityEngine.SceneManagement.LoadSceneMode.Single, System.Action<DiContainer> extraBindings = default(System.Action<DiContainer>), LoadSceneRelationship containerMode = LoadSceneRelationship.None, System.Action<DiContainer> extraBindingsLate = default(System.Action<DiContainer>));
        public UnityEngine.AsyncOperation LoadSceneAsync(string sceneName, UnityEngine.SceneManagement.LoadSceneMode loadMode = UnityEngine.SceneManagement.LoadSceneMode.Single, System.Action<DiContainer> extraBindings = default(System.Action<DiContainer>), LoadSceneRelationship containerMode = LoadSceneRelationship.None, System.Action<DiContainer> extraBindingsLate = default(System.Action<DiContainer>));
    }

    [NoReflectionBaking] [ZenjectAllowDuringValidation] public class ZenjectSettings
    {
        public static ZenjectSettings Default;
        public bool DisplayWarningWhenResolvingDuringInstall { get; }
        public bool EnsureDeterministicDestructionOrderOnApplicationQuit { get; }
        public ZenjectSettings.SignalSettings Signals { get; }
        public ValidationErrorResponses ValidationErrorResponse { get; }
        public RootResolveMethods ValidationRootResolveMethod { get; }
        public ZenjectSettings() {}
        public ZenjectSettings(ValidationErrorResponses validationErrorResponse, RootResolveMethods validationRootResolveMethod = RootResolveMethods.NonLazyOnly, bool displayWarningWhenResolvingDuringInstall = true, bool ensureDeterministicDestructionOrderOnApplicationQuit = false, ZenjectSettings.SignalSettings signalSettings = default(ZenjectSettings.SignalSettings)) {}
        public class SignalSettings
        {
            public static ZenjectSettings.SignalSettings Default;
            public int DefaultAsyncTickPriority { get; }
            public SignalDefaultSyncModes DefaultSyncMode { get; }
            public SignalMissingHandlerResponses MissingHandlerDefaultResponse { get; }
            public bool RequireStrictUnsubscribe { get; }
            public SignalSettings() {}
            public SignalSettings(SignalDefaultSyncModes defaultSyncMode, SignalMissingHandlerResponses missingHandlerDefaultResponse = SignalMissingHandlerResponses.Warn, bool requireStrictUnsubscribe = false, int defaultAsyncTickPriority = 1) {}
        }
    }

    public class ZenjectStateMachineBehaviourAutoInjecter : UnityEngine.MonoBehaviour
    {
        public ZenjectStateMachineBehaviourAutoInjecter() {}
        [Inject] public void Construct(DiContainer container);
        public void Start();
    }

    public delegate InjectTypeInfo ZenTypeInfoGetter();
}

namespace Zenject.Internal
{
    [NoReflectionBaking] public class DecoratorProvider<TContract> : IDecoratorProvider
    {
        public DecoratorProvider(DiContainer container) {}
        public void AddFactoryId(System.Guid factoryBindId);
        public void GetAllInstances(IProvider provider, InjectContext context, System.Collections.Generic.List<object> buffer);
    }

    public interface IDecoratorProvider
    {
        public void GetAllInstances(IProvider provider, InjectContext context, System.Collections.Generic.List<object> buffer);
    }

    [NoReflectionBaking] public class LookupId
    {
        public BindingId BindingId;
        public IProvider Provider;
        public LookupId() {}
        public LookupId(IProvider provider, BindingId bindingId) {}
        public override int GetHashCode();
        public void Reset();
    }

    public static class ReflectionInfoTypeInfoConverter
    {
        public static InjectTypeInfo.InjectConstructorInfo ConvertConstructor(ReflectionTypeInfo.InjectConstructorInfo injectConstructor, System.Type type);
        public static InjectTypeInfo.InjectMemberInfo ConvertField(System.Type parentType, ReflectionTypeInfo.InjectFieldInfo injectField);
        public static InjectTypeInfo.InjectMethodInfo ConvertMethod(ReflectionTypeInfo.InjectMethodInfo injectMethod);
        public static InjectTypeInfo.InjectMemberInfo ConvertProperty(System.Type parentType, ReflectionTypeInfo.InjectPropertyInfo injectProperty);
    }

    public static class ReflectionTypeAnalyzer
    {
        public static void AddCustomInjectAttribute<T>() where T : System.Attribute;
        public static void AddCustomInjectAttribute(System.Type type);
        public static ReflectionTypeInfo GetReflectionInfo(System.Type type);
    }

    [NoReflectionBaking] public class ReflectionTypeInfo
    {
        public readonly System.Type BaseType;
        public readonly ReflectionTypeInfo.InjectConstructorInfo InjectConstructor;
        public readonly System.Collections.Generic.List<ReflectionTypeInfo.InjectFieldInfo> InjectFields;
        public readonly System.Collections.Generic.List<ReflectionTypeInfo.InjectMethodInfo> InjectMethods;
        public readonly System.Collections.Generic.List<ReflectionTypeInfo.InjectPropertyInfo> InjectProperties;
        public readonly System.Type Type;
        public ReflectionTypeInfo(System.Type type, System.Type baseType, ReflectionTypeInfo.InjectConstructorInfo injectConstructor, System.Collections.Generic.List<ReflectionTypeInfo.InjectMethodInfo> injectMethods, System.Collections.Generic.List<ReflectionTypeInfo.InjectFieldInfo> injectFields, System.Collections.Generic.List<ReflectionTypeInfo.InjectPropertyInfo> injectProperties) {}
        [NoReflectionBaking] public class InjectConstructorInfo
        {
            public readonly System.Reflection.ConstructorInfo ConstructorInfo;
            public readonly System.Collections.Generic.List<ReflectionTypeInfo.InjectParameterInfo> Parameters;
            public InjectConstructorInfo(System.Reflection.ConstructorInfo constructorInfo, System.Collections.Generic.List<ReflectionTypeInfo.InjectParameterInfo> parameters) {}
        }
        [NoReflectionBaking] public class InjectFieldInfo
        {
            public readonly System.Reflection.FieldInfo FieldInfo;
            public readonly InjectableInfo InjectableInfo;
            public InjectFieldInfo(System.Reflection.FieldInfo fieldInfo, InjectableInfo injectableInfo) {}
        }
        [NoReflectionBaking] public class InjectMethodInfo
        {
            public readonly System.Reflection.MethodInfo MethodInfo;
            public readonly System.Collections.Generic.List<ReflectionTypeInfo.InjectParameterInfo> Parameters;
            public InjectMethodInfo(System.Reflection.MethodInfo methodInfo, System.Collections.Generic.List<ReflectionTypeInfo.InjectParameterInfo> parameters) {}
        }
        [NoReflectionBaking] public class InjectParameterInfo
        {
            public readonly InjectableInfo InjectableInfo;
            public readonly System.Reflection.ParameterInfo ParameterInfo;
            public InjectParameterInfo(System.Reflection.ParameterInfo parameterInfo, InjectableInfo injectableInfo) {}
        }
        [NoReflectionBaking] public class InjectPropertyInfo
        {
            public readonly InjectableInfo InjectableInfo;
            public readonly System.Reflection.PropertyInfo PropertyInfo;
            public InjectPropertyInfo(System.Reflection.PropertyInfo propertyInfo, InjectableInfo injectableInfo) {}
        }
    }

    [NoReflectionBaking] public class SingletonMarkRegistry
    {
        public SingletonMarkRegistry() {}
        public void MarkNonSingleton(System.Type type);
        public void MarkSingleton(System.Type type);
    }

    public static class ZenPools
    {
        public static void DespawnArray<T>(T[] arr);
        public static void DespawnBindInfo(BindInfo bindInfo);
        public static void DespawnDictionary<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
        public static void DespawnHashSet<T>(System.Collections.Generic.HashSet<T> set);
        public static void DespawnInjectContext(InjectContext context);
        public static void DespawnList<T>(System.Collections.Generic.List<T> list);
        public static void DespawnLookupId(LookupId lookupId);
        public static void DespawnStatement(BindStatement statement);
        public static T[] SpawnArray<T>(int length);
        public static BindInfo SpawnBindInfo();
        public static System.Collections.Generic.Dictionary<TKey, TValue> SpawnDictionary<TKey, TValue>();
        public static System.Collections.Generic.HashSet<T> SpawnHashSet<T>();
        public static InjectContext SpawnInjectContext(DiContainer container, System.Type memberType);
        public static InjectContext SpawnInjectContext(DiContainer container, InjectableInfo injectableInfo, InjectContext currentContext, object targetInstance, System.Type targetType, object concreteIdentifier);
        public static System.Collections.Generic.List<T> SpawnList<T>();
        public static LookupId SpawnLookupId(IProvider provider, BindingId bindingId);
        public static BindStatement SpawnStatement();
    }

    public static class ZenUtilInternal
    {
        public static void AddStateMachineBehaviourAutoInjectersInScene(UnityEngine.SceneManagement.Scene scene);
        public static void AddStateMachineBehaviourAutoInjectersUnderGameObject(UnityEngine.GameObject root);
        public static bool AreFunctionsEqual(System.Delegate left, System.Delegate right);
        public static System.Collections.Generic.IEnumerable<SceneContext> GetAllSceneContexts();
        public static int GetInheritanceDelta(System.Type derived, System.Type parent);
        public static void GetInjectableMonoBehavioursInScene(UnityEngine.SceneManagement.Scene scene, System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public static void GetInjectableMonoBehavioursUnderGameObject(UnityEngine.GameObject gameObject, System.Collections.Generic.List<UnityEngine.MonoBehaviour> injectableComponents);
        public static UnityEngine.Transform GetOrCreateInactivePrefabParent();
        public static System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects(UnityEngine.SceneManagement.Scene scene);
        public static bool IsInjectableMonoBehaviourType(System.Type type);
        public static bool IsNull(object obj);
        public static bool IsOutsideUnity();
    }
}
