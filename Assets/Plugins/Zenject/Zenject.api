// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace ModestTree
{
    public static class Assert
    {
        public static Zenject.ZenjectException CreateException();
        public static Zenject.ZenjectException CreateException(string message);
        public static Zenject.ZenjectException CreateException(string message, params object[] parameters);
        public static Zenject.ZenjectException CreateException(System.Exception innerException, string message, params object[] parameters);
        public static void DerivesFrom<T>(System.Type type);
        public static void DerivesFrom(System.Type childType, System.Type parentType);
        public static void DerivesFromOrEqual<T>(System.Type type);
        public static void DerivesFromOrEqual(System.Type childType, System.Type parentType);
        public static void IsApproximately(float left, float right, float epsilon = 1E-05);
        public static void IsEmpty<T>(System.Collections.Generic.IEnumerable<T> sequence);
        public static void IsEmpty<T>(System.Collections.Generic.IList<T> list);
        public static void IsEqual(object left, object right);
        public static void IsEqual(object left, object right, System.Func<string> messageGenerator);
        public static void IsEqual(object left, object right, string message);
        public static void IsNotEmpty(string str);
        public static void IsNotEmpty<T>(System.Collections.Generic.IEnumerable<T> val, string message = );
        public static void IsNotEqual(object left, object right);
        public static void IsNotEqual(object left, object right, System.Func<string> messageGenerator);
        public static void IsNotEqual(object left, object right, string message);
        public static void IsNotNull(object val);
        public static void IsNotNull(object val, string message);
        public static void IsNotNull(object val, string message, object p1);
        public static void IsNotNull(object val, string message, object p1, object p2);
        public static void IsNull(object val);
        public static void IsNull(object val, string message);
        public static void IsNull(object val, string message, object p1);
        public static void IsType<T>(object obj);
        public static void IsType<T>(object obj, string message);
        public static void That(bool condition);
        public static void That(bool condition, string message);
        public static void That(bool condition, string message, object p1);
        public static void That(bool condition, string message, object p1, object p2);
        public static void That(bool condition, string message, object p1, object p2, object p3);
        public static void Throws(System.Action action);
        public static void Throws<TException>(System.Action action) where TException : System.Exception;
        public static void Warn(bool condition);
        public static void Warn(bool condition, System.Func<string> messageGenerator);
        public static void Warn(bool condition, string message);
    }

    [System.Runtime.CompilerServices.Extension] public static class LinqExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool ContainsItem<T>(System.Collections.Generic.IEnumerable<T> list, T value);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<T> Except<T>(System.Collections.Generic.IEnumerable<T> list, T item);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<T> GetDuplicates<T>(System.Collections.Generic.IEnumerable<T> list);
        [System.Runtime.CompilerServices.Extension] public static bool HasAtLeast<T>(System.Collections.Generic.IEnumerable<T> enumerable, int amount);
        [System.Runtime.CompilerServices.Extension] public static bool HasAtMost<T>(System.Collections.Generic.IEnumerable<T> enumerable, int amount);
        [System.Runtime.CompilerServices.Extension] public static bool HasLessThan<T>(System.Collections.Generic.IEnumerable<T> enumerable, int amount);
        [System.Runtime.CompilerServices.Extension] public static bool HasMoreThan<T>(System.Collections.Generic.IEnumerable<T> enumerable, int amount);
        [System.Runtime.CompilerServices.Extension] public static bool IsEmpty<T>(System.Collections.Generic.IEnumerable<T> enumerable);
        [System.Runtime.CompilerServices.Extension] public static TSource OnlyOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource> source);
        [System.Runtime.CompilerServices.Extension] [System.Runtime.CompilerServices.IteratorStateMachine(typeof(ModestTree.LinqExtensions.<Yield>d__0<>))] public static System.Collections.Generic.IEnumerable<T> Yield<T>(T item);
    }

    public static class Log
    {
        [System.Diagnostics.Conditional(@"UNITY_EDITOR")] public static void Debug(string message, params object[] args);
        public static void Error(string message, params object[] args);
        public static void ErrorException(System.Exception e);
        public static void ErrorException(string message, System.Exception e);
        public static void Info(string message, params object[] args);
        public static void Trace(string message, params object[] args);
        public static void Warn(string message, params object[] args);
    }

    [System.Runtime.CompilerServices.Extension] public static class MiscExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void AllocFreeAddRange<T>(System.Collections.Generic.IList<T> list, System.Collections.Generic.IList<T> items);
        [System.Runtime.CompilerServices.Extension] public static string Fmt(string s, params object[] args);
        [System.Runtime.CompilerServices.Extension] public static TVal GetValueAndRemove<TKey, TVal>(System.Collections.Generic.IDictionary<TKey, TVal> dictionary, TKey key);
        [System.Runtime.CompilerServices.Extension] public static int IndexOf<T>(System.Collections.Generic.IList<T> list, T item);
        [System.Runtime.CompilerServices.Extension] public static string Join(System.Collections.Generic.IEnumerable<string> values, string separator);
        [System.Runtime.CompilerServices.Extension] public static void RemoveWithConfirm<T>(System.Collections.Generic.HashSet<T> set, T item);
        [System.Runtime.CompilerServices.Extension] public static void RemoveWithConfirm<TKey, TVal>(System.Collections.Generic.IDictionary<TKey, TVal> dictionary, TKey key);
        [System.Runtime.CompilerServices.Extension] public static void RemoveWithConfirm<T>(System.Collections.Generic.IList<T> list, T item);
        [System.Runtime.CompilerServices.Extension] public static void RemoveWithConfirm<T>(System.Collections.Generic.LinkedList<T> list, T item);
    }

    [System.Runtime.CompilerServices.Extension] public static class ReflectionUtil
    {
        public static System.Array CreateArray(System.Type elementType, System.Collections.Generic.List<object> instances);
        public static System.Collections.IList CreateGenericList(System.Type elementType, System.Collections.Generic.List<object> instances);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString(System.Action action);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1>(System.Action<TParam1> action);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1, TParam2>(System.Action<TParam1, TParam2> action);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1, TParam2, TParam3>(System.Action<TParam1, TParam2, TParam3> action);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1, TParam2, TParam3, TParam4>(System.Action<TParam1, TParam2, TParam3, TParam4> action);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1, TParam2, TParam3, TParam4, TParam5>(System.Action<TParam1, TParam2, TParam3, TParam4, TParam5> action);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(System.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> action);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1>(System.Func<TParam1> func);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1, TParam2>(System.Func<TParam1, TParam2> func);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1, TParam2, TParam3>(System.Func<TParam1, TParam2, TParam3> func);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString<TParam1, TParam2, TParam3, TParam4>(System.Func<TParam1, TParam2, TParam3, TParam4> func);
        [System.Runtime.CompilerServices.Extension] public static string ToDebugString(System.Reflection.MethodInfo method);
    }

    [System.Runtime.CompilerServices.Extension] public static class TypeExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<T> AllAttributes<T>(System.Reflection.MemberInfo provider) where T : System.Attribute;
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<T> AllAttributes<T>(System.Reflection.ParameterInfo provider) where T : System.Attribute;
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<System.Attribute> AllAttributes(System.Reflection.MemberInfo provider, params System.Type[] attributeTypes);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<System.Attribute> AllAttributes(System.Reflection.ParameterInfo provider, params System.Type[] attributeTypes);
        [System.Runtime.CompilerServices.Extension] public static System.Type BaseType(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static System.Reflection.ConstructorInfo[] Constructors(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool ContainsGenericParameters(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static System.Reflection.FieldInfo[] DeclaredInstanceFields(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static System.Reflection.MethodInfo[] DeclaredInstanceMethods(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static System.Reflection.PropertyInfo[] DeclaredInstanceProperties(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool DerivesFrom<T>(System.Type a);
        [System.Runtime.CompilerServices.Extension] public static bool DerivesFrom(System.Type a, System.Type b);
        [System.Runtime.CompilerServices.Extension] public static bool DerivesFromOrEqual<T>(System.Type a);
        [System.Runtime.CompilerServices.Extension] public static bool DerivesFromOrEqual(System.Type a, System.Type b);
        [System.Runtime.CompilerServices.Extension] public static System.Type[] GenericArguments(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static T GetAttribute<T>(System.Reflection.MemberInfo provider) where T : System.Attribute;
        [System.Runtime.CompilerServices.Extension] public static object GetDefaultValue(System.Type type);
        [System.Runtime.CompilerServices.Extension] [System.Runtime.CompilerServices.IteratorStateMachine(typeof(ModestTree.TypeExtensions.<GetParentTypes>d__28))] public static System.Collections.Generic.IEnumerable<System.Type> GetParentTypes(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool HasAttribute<T>(System.Reflection.MemberInfo provider) where T : System.Attribute;
        [System.Runtime.CompilerServices.Extension] public static bool HasAttribute<T>(System.Reflection.ParameterInfo provider) where T : System.Attribute;
        [System.Runtime.CompilerServices.Extension] public static bool HasAttribute(System.Reflection.MemberInfo provider, params System.Type[] attributeTypes);
        [System.Runtime.CompilerServices.Extension] public static bool HasAttribute(System.Reflection.ParameterInfo provider, params System.Type[] attributeTypes);
        [System.Runtime.CompilerServices.Extension] public static System.Type[] Interfaces(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool IsAbstract(System.Type type);
        public static bool IsAssignableToGenericType(System.Type givenType, System.Type genericType);
        [System.Runtime.CompilerServices.Extension] public static bool IsClosedGenericType(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool IsEnum(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool IsGenericType(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool IsGenericTypeDefinition(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool IsInterface(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool IsOpenGenericType(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool IsPrimitive(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool IsSealed(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static bool IsValueType(System.Type type);
        [System.Runtime.CompilerServices.Extension] public static System.Reflection.MethodInfo Method(System.Delegate del);
        [System.Runtime.CompilerServices.Extension] public static T TryGetAttribute<T>(System.Reflection.MemberInfo provider) where T : System.Attribute;
    }

    [System.Runtime.CompilerServices.Extension] public static class TypeStringFormatter
    {
        [System.Runtime.CompilerServices.Extension] public static string PrettyName(System.Type type);
    }
}

namespace ModestTree.Util
{
    [System.AttributeUsage(32767, AllowMultiple = false)] public class PreserveAttribute : System.Attribute
    {
        public PreserveAttribute() {}
    }

    public static class UnityUtil
    {
        public static System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene> AllLoadedScenes { get; }
        public static System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene> AllScenes { get; }
        public static bool IsAltKeyDown { get; }
        public static bool IsControlKeyDown { get; }
        public static bool IsShiftKeyDown { get; }
        public static bool WasAltKeyJustPressed { get; }
        public static bool WasShiftKeyJustPressed { get; }
        public static System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetAllGameObjects();
        public static System.Collections.Generic.List<UnityEngine.GameObject> GetAllRootGameObjects();
        public static System.Collections.Generic.IEnumerable<UnityEngine.Component> GetComponentsInChildrenBottomUp(UnityEngine.GameObject gameObject, bool includeInactive);
        public static System.Collections.Generic.IEnumerable<UnityEngine.Component> GetComponentsInChildrenTopDown(UnityEngine.GameObject gameObject, bool includeInactive);
        public static int GetDepthLevel(UnityEngine.Transform transform);
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(ModestTree.Util.UnityUtil.<GetDirectChildren>d__21))] public static System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetDirectChildren(UnityEngine.GameObject obj);
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(ModestTree.Util.UnityUtil.<GetDirectChildrenAndSelf>d__20))] public static System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetDirectChildrenAndSelf(UnityEngine.GameObject obj);
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(ModestTree.Util.UnityUtil.<GetParents>d__16))] public static System.Collections.Generic.IEnumerable<UnityEngine.Transform> GetParents(UnityEngine.Transform transform);
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(ModestTree.Util.UnityUtil.<GetParentsAndSelf>d__17))] public static System.Collections.Generic.IEnumerable<UnityEngine.Transform> GetParentsAndSelf(UnityEngine.Transform transform);
        public static UnityEngine.GameObject GetRootParentOrSelf(UnityEngine.GameObject gameObject);
    }

    public static class ValuePair
    {
        public static ModestTree.Util.ValuePair<T1, T2> New<T1, T2>(T1 first, T2 second);
        public static ModestTree.Util.ValuePair<T1, T2, T3> New<T1, T2, T3>(T1 first, T2 second, T3 third);
        public static ModestTree.Util.ValuePair<T1, T2, T3, T4> New<T1, T2, T3, T4>(T1 first, T2 second, T3 third, T4 fourth);
    }

    public class ValuePair<T1, T2>
    {
        public readonly T1 First;
        public readonly T2 Second;
        public ValuePair() {}
        public ValuePair(T1 first, T2 second) {}
        public bool Equals(ModestTree.Util.ValuePair<T1, T2> that);
        public virtual bool Equals(object obj);
        public virtual int GetHashCode();
    }

    public class ValuePair<T1, T2, T3>
    {
        public readonly T1 First;
        public readonly T2 Second;
        public readonly T3 Third;
        public ValuePair() {}
        public ValuePair(T1 first, T2 second, T3 third) {}
        public bool Equals(ModestTree.Util.ValuePair<T1, T2, T3> that);
        public virtual bool Equals(object obj);
        public virtual int GetHashCode();
    }

    public class ValuePair<T1, T2, T3, T4>
    {
        public readonly T1 First;
        public readonly T4 Fourth;
        public readonly T2 Second;
        public readonly T3 Third;
        public ValuePair() {}
        public ValuePair(T1 first, T2 second, T3 third, T4 fourth) {}
        public bool Equals(ModestTree.Util.ValuePair<T1, T2, T3, T4> that);
        public virtual bool Equals(object obj);
        public virtual int GetHashCode();
    }
}

namespace Zenject
{
    public class ActionInstaller : Zenject.Installer<Zenject.ActionInstaller>
    {
        public ActionInstaller(System.Action<Zenject.DiContainer> installMethod) {}
        public virtual void InstallBindings();
    }

    [Zenject.NoReflectionBaking] public class AddToCurrentGameObjectComponentProvider : Zenject.IProvider
    {
        protected System.Type ComponentType { get; }
        protected Zenject.DiContainer Container { get; }
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public AddToCurrentGameObjectComponentProvider(Zenject.DiContainer container, System.Type componentType, System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArguments, object concreteIdentifier, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class AddToExistingGameObjectComponentProvider : Zenject.AddToGameObjectComponentProviderBase
    {
        protected virtual bool ShouldToggleActive { get; }
        public AddToExistingGameObjectComponentProvider(UnityEngine.GameObject gameObject, Zenject.DiContainer container, System.Type componentType, System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArguments, object concreteIdentifier, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        protected virtual UnityEngine.GameObject GetGameObject(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class AddToExistingGameObjectComponentProviderGetter : Zenject.AddToGameObjectComponentProviderBase
    {
        protected virtual bool ShouldToggleActive { get; }
        public AddToExistingGameObjectComponentProviderGetter(System.Func<Zenject.InjectContext, UnityEngine.GameObject> gameObjectGetter, Zenject.DiContainer container, System.Type componentType, System.Collections.Generic.List<Zenject.TypeValuePair> extraArguments, object concreteIdentifier, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        protected virtual UnityEngine.GameObject GetGameObject(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public abstract class AddToGameObjectComponentProviderBase : Zenject.IProvider
    {
        protected System.Type ComponentType { get; }
        protected Zenject.DiContainer Container { get; }
        public virtual bool IsCached { get; }
        protected abstract bool ShouldToggleActive { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public AddToGameObjectComponentProviderBase(Zenject.DiContainer container, System.Type componentType, System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArguments, object concreteIdentifier, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        protected abstract UnityEngine.GameObject GetGameObject(Zenject.InjectContext context);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class AddToNewGameObjectComponentProvider : Zenject.AddToGameObjectComponentProviderBase
    {
        protected virtual bool ShouldToggleActive { get; }
        public AddToNewGameObjectComponentProvider(Zenject.DiContainer container, System.Type componentType, System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArguments, Zenject.GameObjectCreationParameters gameObjectBindInfo, object concreteIdentifier, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        protected virtual UnityEngine.GameObject GetGameObject(Zenject.InjectContext context);
    }

    public class AnimatorIkHandlerManager : UnityEngine.MonoBehaviour
    {
        public AnimatorIkHandlerManager() {}
        [Zenject.Inject] public void Construct([Zenject.Inject(Source = 1)] System.Collections.Generic.List<Zenject.IAnimatorIkHandler> handlers);
        public void OnAnimatorIk();
    }

    public class AnimatorInstaller : Zenject.Installer<UnityEngine.Animator, Zenject.AnimatorInstaller>
    {
        public AnimatorInstaller(UnityEngine.Animator animator) {}
        public virtual void InstallBindings();
    }

    public class AnimatorMoveHandlerManager : UnityEngine.MonoBehaviour
    {
        public AnimatorMoveHandlerManager() {}
        [Zenject.Inject] public void Construct([Zenject.Inject(Source = 1)] System.Collections.Generic.List<Zenject.IAnimatorMoveHandler> handlers);
        public void OnAnimatorMove();
    }

    [Zenject.NoReflectionBaking] public class ArgConditionCopyNonLazyBinder : Zenject.InstantiateCallbackConditionCopyNonLazyBinder
    {
        public ArgConditionCopyNonLazyBinder(Zenject.BindInfo bindInfo) {}
        public Zenject.InstantiateCallbackConditionCopyNonLazyBinder WithArguments(object[] args);
        public Zenject.InstantiateCallbackConditionCopyNonLazyBinder WithArguments<T>(T param);
        public Zenject.InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2>(TParam1 param1, TParam2 param2);
        public Zenject.InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3>(TParam1 param1, TParam2 param2, TParam3 param3);
        public Zenject.InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3, TParam4>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
        public Zenject.InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3, TParam4, TParam5>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
        public Zenject.InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
        public Zenject.InstantiateCallbackConditionCopyNonLazyBinder WithArgumentsExplicit(System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs);
    }

    public class ArrayPool<T> : Zenject.StaticMemoryPoolBaseBase<T[]>
    {
        public ArrayPool(int length) {}
        protected virtual T[] Alloc();
        public static Zenject.ArrayPool<T> GetPool(int length);
        public T[] Spawn();
    }

    public abstract class BaseMonoKernelDecorator : Zenject.IDecoratableMonoKernel
    {
        [Zenject.Inject] protected Zenject.IDecoratableMonoKernel DecoratedMonoKernel;
        protected BaseMonoKernelDecorator() {}
        public virtual void Dispose();
        public virtual void FixedUpdate();
        public virtual void Initialize();
        public virtual void LateDispose();
        public virtual void LateUpdate();
        public virtual bool ShouldInitializeOnStart();
        public virtual void Update();
    }

    [Zenject.NoReflectionBaking] public class BindInfo : System.IDisposable
    {
        public readonly System.Collections.Generic.List<Zenject.TypeValuePair> Arguments;
        public Zenject.BindingInheritanceMethods BindingInheritanceMethod;
        public object ConcreteIdentifier;
        public Zenject.BindingCondition Condition;
        public string ContextInfo;
        public readonly System.Collections.Generic.List<System.Type> ContractTypes;
        public object Identifier;
        public System.Action<Zenject.InjectContext, object> InstantiatedCallback;
        public Zenject.InvalidBindResponses InvalidBindResponse;
        public bool MarkAsCreationBinding;
        public bool MarkAsUniqueSingleton;
        public bool NonLazy;
        public bool OnlyBindIfNotBound;
        public bool RequireExplicitScope;
        public bool SaveProvider;
        public Zenject.ScopeTypes Scope;
        public Zenject.ToChoices ToChoice;
        public readonly System.Collections.Generic.List<System.Type> ToTypes;
        public BindInfo() {}
        public virtual void Dispose();
        public void Reset();
        [System.Diagnostics.Conditional(@"UNITY_EDITOR")] public void SetContextInfo(string contextInfo);
    }

    public delegate bool BindingCondition(Zenject.InjectContext c);

    [System.Diagnostics.DebuggerStepThrough] public struct BindingId : System.IEquatable<Zenject.BindingId>
    {
        public object Identifier { get; set; }
        public System.Type Type { get; set; }
        public BindingId(System.Type type, object identifier) {}
        public virtual bool Equals(object other);
        public virtual bool Equals(Zenject.BindingId that);
        public virtual int GetHashCode();
        public static bool operator ==(Zenject.BindingId left, Zenject.BindingId right);
        public static bool operator !=(Zenject.BindingId left, Zenject.BindingId right);
        public virtual string ToString();
    }

    public enum BindingInheritanceMethods
    {
        public const Zenject.BindingInheritanceMethods CopyDirectOnly = 2;
        public const Zenject.BindingInheritanceMethods CopyIntoAll = 1;
        public const Zenject.BindingInheritanceMethods MoveDirectOnly = 4;
        public const Zenject.BindingInheritanceMethods MoveIntoAll = 3;
        public const Zenject.BindingInheritanceMethods None = 0;
        public int value__;
    }

    public class BindSignalFromBinder<TObject, TSignal>
    {
        public BindSignalFromBinder(Zenject.SignalBindingBindInfo signalBindInfo, Zenject.BindStatement bindStatement, System.Func<TObject, System.Action<TSignal>> methodGetter, Zenject.DiContainer container) {}
        public Zenject.SignalCopyBinder From(System.Action<Zenject.ConcreteBinderGeneric<TObject>> objectBindCallback);
        public Zenject.SignalCopyBinder FromNew();
        public Zenject.SignalCopyBinder FromResolve();
        public Zenject.SignalCopyBinder FromResolveAll();
    }

    public class BindSignalIdToBinder<TSignal> : Zenject.BindSignalToBinder<TSignal>
    {
        public BindSignalIdToBinder(Zenject.DiContainer container, Zenject.SignalBindingBindInfo signalBindInfo) {}
        public Zenject.BindSignalToBinder<TSignal> WithId(object identifier);
    }

    public class BindSignalToBinder<TSignal>
    {
        protected Zenject.SignalBindingBindInfo SignalBindInfo { get; }
        public BindSignalToBinder(Zenject.DiContainer container, Zenject.SignalBindingBindInfo signalBindInfo) {}
        public Zenject.BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(System.Action<TObject, TSignal> handler);
        public Zenject.BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(System.Func<TObject, System.Action<TSignal>> handlerGetter);
        public Zenject.BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(System.Func<TObject, System.Action> handlerGetter);
        public Zenject.SignalCopyBinder ToMethod(System.Action callback);
        public Zenject.SignalCopyBinder ToMethod(System.Action<TSignal> callback);
    }

    [Zenject.NoReflectionBaking] public class BindStatement : System.IDisposable
    {
        public Zenject.BindingInheritanceMethods BindingInheritanceMethod { get; }
        public bool HasFinalizer { get; }
        public BindStatement() {}
        public void AddDisposable(System.IDisposable disposable);
        public virtual void Dispose();
        public void FinalizeBinding(Zenject.DiContainer container);
        public void Reset();
        public void SetFinalizer(Zenject.IBindingFinalizer bindingFinalizer);
        public Zenject.BindInfo SpawnBindInfo();
    }

    [Zenject.NoReflectionBaking] public class CachedOpenTypeProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public int NumInstances { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public CachedOpenTypeProvider(Zenject.IProvider creator) {}
        public void ClearCache();
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class CachedProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public int NumInstances { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public CachedProvider(Zenject.IProvider creator) {}
        public void ClearCache();
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    public class CheatSheet : Zenject.Installer<Zenject.CheatSheet>
    {
        public CheatSheet() {}
        public virtual void InstallBindings();
        public void InstallMore2();
        public void InstallMore3();
        public class Bar : Zenject.CheatSheet.IBar, Zenject.CheatSheet.IFoo
        {
            public Zenject.CheatSheet.Foo Foo { get; }
            public Bar() {}
        }
        public class Baz
        {
            public Baz() {}
        }
        public class Foo : UnityEngine.MonoBehaviour, Zenject.CheatSheet.IBar, Zenject.CheatSheet.IFoo, Zenject.CheatSheet.IFoo2
        {
            public Foo() {}
            public Zenject.CheatSheet.Bar GetBar();
            public string GetTitle();
        }
        public class Foo1 : Zenject.CheatSheet.IFoo
        {
            public Foo1() {}
        }
        public class Foo2 : Zenject.CheatSheet.IFoo
        {
            public Foo2() {}
        }
        public class Foo3 : Zenject.CheatSheet.IFoo
        {
            public Foo3() {}
        }
        public class FooInstaller : Zenject.Installer<Zenject.CheatSheet.FooInstaller>
        {
            public FooInstaller(string foo) {}
            public virtual void InstallBindings();
        }
        public class FooInstallerWithArgs : Zenject.Installer<string, Zenject.CheatSheet.FooInstallerWithArgs>
        {
            public FooInstallerWithArgs(string foo) {}
            public virtual void InstallBindings();
        }
        public class Gui
        {
            public Gui() {}
        }
        public interface IBar : Zenject.CheatSheet.IFoo
        {
        }
        public interface IFoo
        {
        }
        public interface IFoo2
        {
        }
        public class Norf
        {
            [Zenject.Inject(Id = @"FooA")] public string Foo;
            public Norf() {}
        }
        public class Norf2
        {
            [Zenject.Inject] public Zenject.CheatSheet.Foo Foo;
            public Norf2() {}
        }
        public class Qux
        {
            [Zenject.Inject(Id = @"FooB")] public string Foo;
            public Qux() {}
        }
        public class Qux2
        {
            [Zenject.Inject] public Zenject.CheatSheet.Foo Foo;
            [Zenject.Inject(Id = @"FooA")] public Zenject.CheatSheet.Foo Foo2;
            public Qux2() {}
        }
    }

    [Zenject.NoReflectionBaking] public class ConcreteBinderGeneric<TContract> : Zenject.FromBinderGeneric<TContract>
    {
        public ConcreteBinderGeneric(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement) {}
        public Zenject.FromBinderGeneric<TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FromBinderNonGeneric To(System.Action<Zenject.ConventionSelectTypesBinder> generator);
        public Zenject.FromBinderNonGeneric To(System.Collections.Generic.IEnumerable<System.Type> concreteTypes);
        public Zenject.FromBinderNonGeneric To(params System.Type[] concreteTypes);
        public Zenject.FromBinderGeneric<TContract> ToSelf();
    }

    [Zenject.NoReflectionBaking] public class ConcreteBinderNonGeneric : Zenject.FromBinderNonGeneric
    {
        public ConcreteBinderNonGeneric(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement) {}
        public Zenject.FromBinderNonGeneric To<TConcrete>();
        public Zenject.FromBinderNonGeneric To(System.Action<Zenject.ConventionSelectTypesBinder> generator);
        public Zenject.FromBinderNonGeneric To(System.Collections.Generic.IEnumerable<System.Type> concreteTypes);
        public Zenject.FromBinderNonGeneric To(params System.Type[] concreteTypes);
        public Zenject.FromBinderNonGeneric ToSelf();
    }

    [Zenject.NoReflectionBaking] public class ConcreteIdArgConditionCopyNonLazyBinder : Zenject.ArgConditionCopyNonLazyBinder
    {
        public ConcreteIdArgConditionCopyNonLazyBinder(Zenject.BindInfo bindInfo) {}
        public Zenject.ArgConditionCopyNonLazyBinder WithConcreteId(object id);
    }

    [Zenject.NoReflectionBaking] public class ConcreteIdBinderGeneric<TContract> : Zenject.ConcreteBinderGeneric<TContract>
    {
        public ConcreteIdBinderGeneric(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement) {}
        public Zenject.ConcreteBinderGeneric<TContract> WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class ConcreteIdBinderNonGeneric : Zenject.ConcreteBinderNonGeneric
    {
        public ConcreteIdBinderNonGeneric(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement) {}
        public Zenject.ConcreteBinderNonGeneric WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class ConditionCopyNonLazyBinder : Zenject.CopyNonLazyBinder
    {
        public ConditionCopyNonLazyBinder(Zenject.BindInfo bindInfo) {}
        public Zenject.CopyNonLazyBinder When(Zenject.BindingCondition condition);
        public Zenject.CopyNonLazyBinder WhenInjectedInto<T>();
        public Zenject.CopyNonLazyBinder WhenInjectedInto(params System.Type[] targets);
        public Zenject.CopyNonLazyBinder WhenInjectedIntoInstance(object instance);
        public Zenject.CopyNonLazyBinder WhenNotInjectedInto<T>();
    }

    public abstract class Context : UnityEngine.MonoBehaviour
    {
        public abstract Zenject.DiContainer Container { get; }
        public System.Collections.Generic.IEnumerable<Zenject.MonoInstaller> InstallerPrefabs { get; set; }
        public System.Collections.Generic.IEnumerable<Zenject.MonoInstaller> Installers { get; set; }
        public System.Collections.Generic.IEnumerable<Zenject.InstallerBase> NormalInstallers { get; set; }
        public System.Collections.Generic.IEnumerable<System.Type> NormalInstallerTypes { get; set; }
        public System.Collections.Generic.IEnumerable<Zenject.ScriptableObjectInstaller> ScriptableObjectInstallers { get; set; }
        protected Context() {}
        public void AddNormalInstaller(Zenject.InstallerBase installer);
        public void AddNormalInstallerType(System.Type installerType);
        protected abstract void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> components);
        public abstract System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        protected void InstallInstallers();
        protected void InstallInstallers(System.Collections.Generic.List<Zenject.InstallerBase> normalInstallers, System.Collections.Generic.List<System.Type> normalInstallerTypes, System.Collections.Generic.List<Zenject.ScriptableObjectInstaller> scriptableObjectInstallers, System.Collections.Generic.List<Zenject.MonoInstaller> installers, System.Collections.Generic.List<Zenject.MonoInstaller> installerPrefabs);
        protected void InstallSceneBindings(System.Collections.Generic.List<UnityEngine.MonoBehaviour> injectableMonoBehaviours);
    }

    [Zenject.NoReflectionBaking] public class ConventionAssemblySelectionBinder
    {
        protected Zenject.ConventionBindInfo BindInfo { get; }
        public ConventionAssemblySelectionBinder(Zenject.ConventionBindInfo bindInfo) {}
        public void FromAllAssemblies();
        public void FromAssemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies);
        public void FromAssemblies(params System.Reflection.Assembly[] assemblies);
        public void FromAssembliesContaining(System.Collections.Generic.IEnumerable<System.Type> types);
        public void FromAssembliesContaining(params System.Type[] types);
        public void FromAssembliesWhere(System.Func<System.Reflection.Assembly, bool> predicate);
        public void FromAssembly(System.Reflection.Assembly assembly);
        public void FromAssemblyContaining<T>();
        public void FromThisAssembly();
    }

    [Zenject.NoReflectionBaking] public class ConventionBindInfo
    {
        public ConventionBindInfo() {}
        public void AddAssemblyFilter(System.Func<System.Reflection.Assembly, bool> predicate);
        public void AddTypeFilter(System.Func<System.Type, bool> predicate);
        public System.Collections.Generic.List<System.Type> ResolveTypes();
    }

    [Zenject.NoReflectionBaking] public class ConventionFilterTypesBinder : Zenject.ConventionAssemblySelectionBinder
    {
        public ConventionFilterTypesBinder(Zenject.ConventionBindInfo bindInfo) {}
        public Zenject.ConventionFilterTypesBinder DerivingFrom<T>();
        public Zenject.ConventionFilterTypesBinder DerivingFrom(System.Type parentType);
        public Zenject.ConventionFilterTypesBinder DerivingFromOrEqual<T>();
        public Zenject.ConventionFilterTypesBinder DerivingFromOrEqual(System.Type parentType);
        public Zenject.ConventionFilterTypesBinder InNamespace(string ns);
        public Zenject.ConventionFilterTypesBinder InNamespaces(System.Collections.Generic.IEnumerable<string> namespaces);
        public Zenject.ConventionFilterTypesBinder InNamespaces(params string[] namespaces);
        public Zenject.ConventionFilterTypesBinder MatchingRegex(string pattern);
        public Zenject.ConventionFilterTypesBinder MatchingRegex(System.Text.RegularExpressions.Regex regex);
        public Zenject.ConventionFilterTypesBinder MatchingRegex(string pattern, System.Text.RegularExpressions.RegexOptions options);
        public Zenject.ConventionFilterTypesBinder Where(System.Func<System.Type, bool> predicate);
        public Zenject.ConventionFilterTypesBinder WithAttribute<T>() where T : System.Attribute;
        public Zenject.ConventionFilterTypesBinder WithAttribute(System.Type attribute);
        public Zenject.ConventionFilterTypesBinder WithAttributeWhere<T>(System.Func<T, bool> predicate) where T : System.Attribute;
        public Zenject.ConventionFilterTypesBinder WithoutAttribute<T>() where T : System.Attribute;
        public Zenject.ConventionFilterTypesBinder WithoutAttribute(System.Type attribute);
        public Zenject.ConventionFilterTypesBinder WithPrefix(string prefix);
        public Zenject.ConventionFilterTypesBinder WithSuffix(string suffix);
    }

    [Zenject.NoReflectionBaking] public class ConventionSelectTypesBinder
    {
        public ConventionSelectTypesBinder(Zenject.ConventionBindInfo bindInfo) {}
        public Zenject.ConventionFilterTypesBinder AllAbstractClasses();
        public Zenject.ConventionFilterTypesBinder AllClasses();
        public Zenject.ConventionFilterTypesBinder AllInterfaces();
        public Zenject.ConventionFilterTypesBinder AllNonAbstractClasses();
        public Zenject.ConventionFilterTypesBinder AllTypes();
    }

    [Zenject.NoReflectionBaking] public class CopyNonLazyBinder : Zenject.NonLazyBinder
    {
        public CopyNonLazyBinder(Zenject.BindInfo bindInfo) {}
        public Zenject.NonLazyBinder CopyIntoAllSubContainers();
        public Zenject.NonLazyBinder CopyIntoDirectSubContainers();
        public Zenject.NonLazyBinder MoveIntoAllSubContainers();
        public Zenject.NonLazyBinder MoveIntoDirectSubContainers();
    }

    [Zenject.NoReflectionBaking] public class DeclareSignalAsyncTickPriorityCopyBinder : Zenject.SignalTickPriorityCopyBinder
    {
        public DeclareSignalAsyncTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo signalBindInfo) {}
        public Zenject.SignalTickPriorityCopyBinder RunAsync();
        public Zenject.SignalCopyBinder RunSync();
    }

    [Zenject.NoReflectionBaking] public class DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder : Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
    {
        public DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo signalBindInfo) {}
        public Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder : Zenject.DeclareSignalAsyncTickPriorityCopyBinder
    {
        public DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo signalBindInfo) {}
        public Zenject.DeclareSignalAsyncTickPriorityCopyBinder OptionalSubscriber();
        public Zenject.DeclareSignalAsyncTickPriorityCopyBinder OptionalSubscriberWithWarning();
        public Zenject.DeclareSignalAsyncTickPriorityCopyBinder RequireSubscriber();
    }

    public class DecoratableMonoKernel : Zenject.IDecoratableMonoKernel
    {
        [Zenject.InjectLocal] public Zenject.DisposableManager DisposablesManager { get; protected set; }
        [Zenject.InjectLocal] public Zenject.InitializableManager InitializableManager { get; protected set; }
        [Zenject.InjectLocal] public Zenject.TickableManager TickableManager { get; protected set; }
        public DecoratableMonoKernel() {}
        public virtual void Dispose();
        public virtual void FixedUpdate();
        public virtual void Initialize();
        public virtual void LateDispose();
        public virtual void LateUpdate();
        public virtual bool ShouldInitializeOnStart();
        public virtual void Update();
    }

    [Zenject.NoReflectionBaking] public class DecoratorToChoiceFromBinder<TContract>
    {
        public DecoratorToChoiceFromBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TContract, TConcrete> With<TConcrete>() where TConcrete : TContract;
    }

    public class DefaultGameObjectKernel : Zenject.MonoKernel
    {
        public DefaultGameObjectKernel() {}
    }

    public class DefaultGameObjectParentInstaller : Zenject.Installer<string, Zenject.DefaultGameObjectParentInstaller>
    {
        public DefaultGameObjectParentInstaller(string name) {}
        public virtual void InstallBindings();
    }

    [Zenject.NoReflectionBaking] public class DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder : Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        protected Zenject.SubContainerCreatorBindInfo SubContainerCreatorBindInfo { get; }
        public DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder(Zenject.SubContainerCreatorBindInfo subContainerBindInfo, Zenject.BindInfo bindInfo) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder WithDefaultGameObjectParent(string defaultParentName);
    }

    [Zenject.NoReflectionBaking] public class DiContainer : Zenject.IInstantiator
    {
        public System.Collections.Generic.IEnumerable<Zenject.BindingId> AllContracts { get; }
        public System.Collections.Generic.IEnumerable<Zenject.IProvider> AllProviders { get; }
        public Zenject.DiContainer[] AncestorContainers { get; }
        public bool AssertOnNewGameObjects { get; set; }
        public bool ChecksForCircularDependencies { get; }
        public UnityEngine.Transform DefaultParent { get; set; }
        public UnityEngine.Transform InheritedDefaultParent { get; }
        public bool IsInstalling { get; set; }
        public bool IsValidating { get; }
        public Zenject.DiContainer[] ParentContainers { get; }
        public Zenject.ZenjectSettings Settings { get; set; }
        public DiContainer() {}
        public DiContainer(bool isValidating) {}
        public DiContainer(System.Collections.Generic.IEnumerable<Zenject.DiContainer> parentContainers) {}
        public DiContainer(Zenject.DiContainer parentContainer) {}
        public DiContainer(System.Collections.Generic.IEnumerable<Zenject.DiContainer> parentContainersEnumerable, bool isValidating) {}
        public DiContainer(Zenject.DiContainer parentContainer, bool isValidating) {}
        public Zenject.ConcreteIdBinderGeneric<TContract> Bind<TContract>();
        public Zenject.ConcreteIdBinderNonGeneric Bind(System.Action<Zenject.ConventionSelectTypesBinder> generator);
        public Zenject.ConcreteIdBinderNonGeneric Bind(System.Collections.Generic.IEnumerable<System.Type> contractTypes);
        public Zenject.ConcreteIdBinderNonGeneric Bind(params System.Type[] contractTypes);
        public Zenject.CopyNonLazyBinder BindDisposableExecutionOrder<T>(int order) where T : System.IDisposable;
        public Zenject.CopyNonLazyBinder BindDisposableExecutionOrder(System.Type type, int order);
        public void BindExecutionOrder<T>(int order);
        public void BindExecutionOrder(System.Type type, int order);
        public Zenject.FactoryToChoiceIdBinder<TContract> BindFactory<TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TContract> BindFactory<TParam1, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindFactory<TParam1, TParam2, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindFactory<TParam1, TParam2, TParam3, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TFactory>() where TFactory : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>;
        public Zenject.FactoryToChoiceIdBinder<TContract> BindFactoryCustomInterface<TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TContract>, TFactoryContract where TFactoryContract : Zenject.IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>, TFactoryContract where TFactoryContract : Zenject.IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TContract> BindFactoryCustomInterface<TParam1, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TContract>, TFactoryContract where TFactoryContract : Zenject.IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindFactoryCustomInterface<TParam1, TParam2, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TContract>, TFactoryContract where TFactoryContract : Zenject.IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TContract>, TFactoryContract where TFactoryContract : Zenject.IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TContract>, TFactoryContract where TFactoryContract : Zenject.IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>, TFactoryContract where TFactoryContract : Zenject.IFactory;
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TFactoryConcrete, TFactoryContract>() where TFactoryConcrete : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>, TFactoryContract where TFactoryContract : Zenject.IFactory;
        public Zenject.CopyNonLazyBinder BindFixedTickableExecutionOrder<T>(int order) where T : Zenject.IFixedTickable;
        public Zenject.CopyNonLazyBinder BindFixedTickableExecutionOrder(System.Type type, int order);
        public Zenject.FactoryToChoiceIdBinder<TContract> BindIFactory<TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TContract> BindIFactory<TParam1, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindIFactory<TParam1, TParam2, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindIFactory<TParam1, TParam2, TParam3, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>();
        public Zenject.FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>();
        public Zenject.CopyNonLazyBinder BindInitializableExecutionOrder<T>(int order) where T : Zenject.IInitializable;
        public Zenject.CopyNonLazyBinder BindInitializableExecutionOrder(System.Type type, int order);
        public Zenject.IdScopeConcreteIdArgConditionCopyNonLazyBinder BindInstance<TContract>(TContract instance);
        public void BindInstances(params object[] instances);
        public Zenject.FromBinderNonGeneric BindInterfacesAndSelfTo<T>();
        public Zenject.FromBinderNonGeneric BindInterfacesAndSelfTo(System.Type type);
        public Zenject.FromBinderNonGeneric BindInterfacesTo<T>();
        public Zenject.FromBinderNonGeneric BindInterfacesTo(System.Type type);
        public Zenject.CopyNonLazyBinder BindLateDisposableExecutionOrder<T>(int order) where T : Zenject.ILateDisposable;
        public Zenject.CopyNonLazyBinder BindLateDisposableExecutionOrder(System.Type type, int order);
        public Zenject.CopyNonLazyBinder BindLateTickableExecutionOrder<T>(int order) where T : Zenject.ILateTickable;
        public Zenject.CopyNonLazyBinder BindLateTickableExecutionOrder(System.Type type, int order);
        public Zenject.MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPool<TItemContract>();
        public Zenject.MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPool<TItemContract, TPool>() where TPool : Zenject.IMemoryPool;
        public Zenject.MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPoolCustomInterface<TItemContract, TPoolConcrete, TPoolContract>(bool includeConcreteType = False) where TPoolConcrete : TPoolContract, Zenject.IMemoryPool where TPoolContract : Zenject.IMemoryPool;
        public Zenject.ConcreteIdBinderGeneric<TContract> BindNoFlush<TContract>();
        public Zenject.CopyNonLazyBinder BindPoolableExecutionOrder<T>(int order) where T : Zenject.IPoolable;
        public Zenject.CopyNonLazyBinder BindPoolableExecutionOrder(System.Type type, int order);
        public Zenject.CopyNonLazyBinder BindTickableExecutionOrder<T>(int order) where T : Zenject.ITickable;
        public Zenject.CopyNonLazyBinder BindTickableExecutionOrder(System.Type type, int order);
        public virtual UnityEngine.GameObject CreateEmptyGameObject(string name);
        public UnityEngine.GameObject CreateEmptyGameObject(Zenject.GameObjectCreationParameters gameObjectBindInfo, Zenject.InjectContext context);
        public Zenject.DiContainer CreateSubContainer();
        public Zenject.DecoratorToChoiceFromBinder<TContract> Decorate<TContract>();
        public void FlushBindings();
        public System.Collections.Generic.IEnumerable<System.Type> GetDependencyContracts<TContract>();
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(Zenject.DiContainer.<GetDependencyContracts>d__97))] public System.Collections.Generic.IEnumerable<System.Type> GetDependencyContracts(System.Type contract);
        public bool HasBinding<TContract>();
        public bool HasBinding(System.Type contractType);
        public bool HasBinding(Zenject.InjectContext context);
        public bool HasBindingId<TContract>(object identifier);
        public bool HasBindingId(System.Type contractType, object identifier);
        public bool HasBindingId(System.Type contractType, object identifier, Zenject.InjectSources sourceType);
        public void Inject(object injectable);
        public void Inject(object injectable, System.Collections.Generic.IEnumerable<object> extraArgs);
        public void InjectExplicit(object injectable, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs);
        public void InjectExplicit(object injectable, System.Type injectableType, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, object concreteIdentifier);
        public void InjectGameObject(UnityEngine.GameObject gameObject);
        public T InjectGameObjectForComponent<T>(UnityEngine.GameObject gameObject) where T : UnityEngine.Component;
        public T InjectGameObjectForComponent<T>(UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public object InjectGameObjectForComponent(UnityEngine.GameObject gameObject, System.Type componentType, System.Collections.Generic.IEnumerable<object> extraArgs);
        public UnityEngine.Component InjectGameObjectForComponentExplicit(UnityEngine.GameObject gameObject, System.Type componentType, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, object concreteIdentifier);
        public void Install<TInstaller>() where TInstaller : Zenject.Installer;
        public void Install<TInstaller>(object[] extraArgs) where TInstaller : Zenject.Installer;
        public virtual T Instantiate<T>();
        public virtual object Instantiate(System.Type concreteType);
        public virtual T Instantiate<T>(System.Collections.Generic.IEnumerable<object> extraArgs);
        public virtual object Instantiate(System.Type concreteType, System.Collections.Generic.IEnumerable<object> extraArgs);
        public virtual TContract InstantiateComponent<TContract>(UnityEngine.GameObject gameObject) where TContract : UnityEngine.Component;
        public virtual TContract InstantiateComponent<TContract>(UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs) where TContract : UnityEngine.Component;
        public virtual UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject);
        public virtual UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs);
        public UnityEngine.Component InstantiateComponentExplicit(System.Type componentType, UnityEngine.GameObject gameObject, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs);
        public virtual T InstantiateComponentOnNewGameObject<T>() where T : UnityEngine.Component;
        public virtual T InstantiateComponentOnNewGameObject<T>(System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public virtual T InstantiateComponentOnNewGameObject<T>(string gameObjectName) where T : UnityEngine.Component;
        public virtual T InstantiateComponentOnNewGameObject<T>(string gameObjectName, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public T InstantiateExplicit<T>(System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs);
        public object InstantiateExplicit(System.Type concreteType, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs);
        public object InstantiateExplicit(System.Type concreteType, bool autoInject, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, object concreteIdentifier);
        public virtual UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab);
        public virtual UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Transform parentTransform);
        public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, Zenject.GameObjectCreationParameters gameObjectBindInfo);
        public virtual UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public virtual T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab);
        public virtual T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, System.Collections.Generic.IEnumerable<object> extraArgs);
        public virtual T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Transform parentTransform);
        public virtual T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiatePrefabForComponent(System.Type concreteType, UnityEngine.Object prefab, System.Collections.Generic.IEnumerable<object> extraArgs, Zenject.GameObjectCreationParameters creationInfo);
        public virtual object InstantiatePrefabForComponent(System.Type concreteType, UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public virtual T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public virtual T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiatePrefabForComponentExplicit(System.Type componentType, UnityEngine.Object prefab, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs);
        public object InstantiatePrefabForComponentExplicit(System.Type componentType, UnityEngine.Object prefab, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs, Zenject.GameObjectCreationParameters gameObjectBindInfo);
        public object InstantiatePrefabForComponentExplicit(System.Type componentType, UnityEngine.Object prefab, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, object concreteIdentifier, Zenject.GameObjectCreationParameters gameObjectBindInfo);
        public virtual UnityEngine.GameObject InstantiatePrefabResource(string resourcePath);
        public virtual UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, UnityEngine.Transform parentTransform);
        public UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, Zenject.GameObjectCreationParameters creationInfo);
        public virtual UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public virtual T InstantiatePrefabResourceForComponent<T>(string resourcePath);
        public virtual T InstantiatePrefabResourceForComponent<T>(string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs);
        public virtual T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Transform parentTransform);
        public virtual T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public virtual object InstantiatePrefabResourceForComponent(System.Type concreteType, string resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public virtual T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public virtual T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiatePrefabResourceForComponentExplicit(System.Type componentType, string resourcePath, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs, Zenject.GameObjectCreationParameters creationInfo);
        public object InstantiatePrefabResourceForComponentExplicit(System.Type componentType, string resourcePath, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, object concreteIdentifier, Zenject.GameObjectCreationParameters creationInfo);
        public virtual T InstantiateScriptableObjectResource<T>(string resourcePath) where T : UnityEngine.ScriptableObject;
        public virtual object InstantiateScriptableObjectResource(System.Type scriptableObjectType, string resourcePath);
        public virtual T InstantiateScriptableObjectResource<T>(string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.ScriptableObject;
        public virtual object InstantiateScriptableObjectResource(System.Type scriptableObjectType, string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs);
        public object InstantiateScriptableObjectResourceExplicit(System.Type scriptableObjectType, string resourcePath, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs);
        public T LazyInject<T>(T instance);
        public void QueueForInject(object instance);
        public void QueueForValidate(Zenject.IValidatable validatable);
        public Zenject.ConcreteBinderGeneric<TContract> Rebind<TContract>();
        public Zenject.ConcreteBinderNonGeneric Rebind(System.Type contractType);
        public Zenject.ConcreteBinderGeneric<TContract> RebindId<TContract>(object identifier);
        public Zenject.ConcreteBinderNonGeneric RebindId(System.Type contractType, object identifier);
        public void RegisterProvider(Zenject.BindingId bindingId, Zenject.BindingCondition condition, Zenject.IProvider provider, bool nonLazy);
        public TContract Resolve<TContract>();
        public object Resolve(System.Type contractType);
        public object Resolve(Zenject.BindingId id);
        public object Resolve(Zenject.InjectContext context);
        public System.Collections.Generic.List<TContract> ResolveAll<TContract>();
        public System.Collections.IList ResolveAll(System.Type contractType);
        public System.Collections.IList ResolveAll(Zenject.InjectContext context);
        public void ResolveAll(Zenject.InjectContext context, System.Collections.Generic.List<object> buffer);
        public TContract ResolveId<TContract>(object identifier);
        public object ResolveId(System.Type contractType, object identifier);
        public System.Collections.Generic.List<TContract> ResolveIdAll<TContract>(object identifier);
        public System.Collections.IList ResolveIdAll(System.Type contractType, object identifier);
        public void ResolveRoots();
        public System.Type ResolveType<T>();
        public System.Type ResolveType(System.Type type);
        public System.Type ResolveType(Zenject.InjectContext context);
        public System.Collections.Generic.List<System.Type> ResolveTypeAll(System.Type type);
        public System.Collections.Generic.List<System.Type> ResolveTypeAll(Zenject.InjectContext context);
        public System.Collections.Generic.List<System.Type> ResolveTypeAll(System.Type type, object identifier);
        public Zenject.BindStatement StartBinding(bool flush = True);
        public TContract TryResolve<TContract>() where TContract : class;
        public object TryResolve(System.Type contractType);
        public TContract TryResolveId<TContract>(object identifier) where TContract : class;
        public object TryResolveId(System.Type contractType, object identifier);
        public bool Unbind<TContract>();
        public bool Unbind<TContract, TConcrete>();
        public bool Unbind(System.Type contractType);
        public bool Unbind(System.Type contractType, System.Type concreteType);
        public void UnbindAll();
        public bool UnbindId<TContract>(object identifier);
        public bool UnbindId<TContract, TConcrete>(object identifier);
        public bool UnbindId(System.Type contractType, object identifier);
        public bool UnbindId(System.Type contractType, System.Type concreteType, object identifier);
        public void UnbindInterfacesTo<TConcrete>();
        public void UnbindInterfacesTo(System.Type concreteType);
    }

    public class DictionaryPool<TKey, TValue> : Zenject.StaticMemoryPool<System.Collections.Generic.Dictionary<TKey, TValue>>
    {
        public static Zenject.DictionaryPool<TKey, TValue> Instance { get; }
        public DictionaryPool() {}
    }

    public class DisposableManager : System.IDisposable
    {
        [Zenject.Inject] public DisposableManager([Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<System.IDisposable> disposables, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<Zenject.ILateDisposable> lateDisposables, [Zenject.Inject(Id = @"Late", Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> latePriorities) {}
        public void Add(System.IDisposable disposable);
        public void Add(System.IDisposable disposable, int priority);
        public void AddLate(Zenject.ILateDisposable disposable);
        public void AddLate(Zenject.ILateDisposable disposable, int priority);
        public virtual void Dispose();
        public void LateDispose();
        public void Remove(System.IDisposable disposable);
    }

    [Zenject.NoReflectionBaking] public class DisposeBlock : System.IDisposable
    {
        public DisposeBlock() {}
        public void Add(System.IDisposable disposable);
        public void AddRange<T>(System.Collections.Generic.IList<T> disposables) where T : System.IDisposable;
        public virtual void Dispose();
        public void Remove(System.IDisposable disposable);
        public static Zenject.DisposeBlock Spawn();
        public T Spawn<T>(Zenject.IMemoryPool<T> pool);
        public TValue Spawn<TValue, TParam1>(Zenject.IMemoryPool<TParam1, TValue> pool, TParam1 p1);
        public TValue Spawn<TValue, TParam1, TParam2>(Zenject.IMemoryPool<TParam1, TParam2, TValue> pool, TParam1 p1, TParam2 p2);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4, TParam5>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6);
        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7);
        public System.Collections.Generic.List<T> SpawnList<T>();
        public System.Collections.Generic.List<T> SpawnList<T>(System.Collections.Generic.IEnumerable<T> elements);
    }

    [Zenject.NoReflectionBaking] public class EmptyGameObjectProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public EmptyGameObjectProvider(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    public class ExecutionOrderInstaller : Zenject.Installer<System.Collections.Generic.List<System.Type>, Zenject.ExecutionOrderInstaller>
    {
        public ExecutionOrderInstaller(System.Collections.Generic.List<System.Type> typeOrder) {}
        public virtual void InstallBindings();
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TValue> : Zenject.PlaceholderFactory<TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TValue> : Zenject.PlaceholderFactory<TParam1, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
    {
        public Factory() {}
    }

    [System.Obsolete(@"Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")] public class Factory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
    {
        public Factory() {}
    }

    [Zenject.NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TContract> : Zenject.FactoryToChoiceBinder<TContract>
    {
        public FactoryArgumentsToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2>(TParam1 param1, TParam2 param2);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3>(TParam1 param1, TParam2 param2, TParam3 param3);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3, TParam4>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3, TParam4, TParam5>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
        public Zenject.FactoryToChoiceBinder<TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs);
    }

    [Zenject.NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
    {
        public FactoryArgumentsToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs);
    }

    [Zenject.NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TContract>
    {
        public FactoryArgumentsToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs);
    }

    [Zenject.NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract>
    {
        public FactoryArgumentsToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs);
    }

    [Zenject.NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract>
    {
        public FactoryArgumentsToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs);
    }

    [Zenject.NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract>
    {
        public FactoryArgumentsToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs);
    }

    [Zenject.NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
    {
        public FactoryArgumentsToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs);
    }

    [Zenject.NoReflectionBaking] public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
    {
        public FactoryArgumentsToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments(object[] args);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<T>(T param);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6);
        public Zenject.FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArgumentsExplicit(System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs);
    }

    [Zenject.NoReflectionBaking] public class FactoryBindInfo
    {
        public System.Collections.Generic.List<Zenject.TypeValuePair> Arguments { get; set; }
        public System.Type FactoryType { get; }
        public System.Func<Zenject.DiContainer, Zenject.IProvider> ProviderFunc { get; set; }
        public FactoryBindInfo(System.Type factoryType) {}
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinder<TContract> : Zenject.FactoryFromBinderBase
    {
        public FactoryFromBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.ConditionCopyNonLazyBinder FromComponentInHierarchy(bool includeInactive = True);
        public Zenject.ArgConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TContract>;
        public Zenject.ConditionCopyNonLazyBinder FromMethod(System.Func<Zenject.DiContainer, TContract> method);
        public Zenject.ConditionCopyNonLazyBinder FromResolveGetter<TObj>(System.Func<TObj, TContract> method);
        public Zenject.ConditionCopyNonLazyBinder FromResolveGetter<TObj>(object subIdentifier, System.Func<TObj, TContract> method);
        public Zenject.ConditionCopyNonLazyBinder FromResolveGetter<TObj>(object subIdentifier, System.Func<TObj, TContract> method, Zenject.InjectSources source);
        public Zenject.FactorySubContainerBinder<TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TContract> FromSubContainerResolve(object subIdentifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.FactoryFromBinderBase
    {
        public FactoryFromBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>;
        public Zenject.ArgConditionCopyNonLazyBinder FromIFactory(System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>>> factoryBindGenerator);
        public Zenject.ConditionCopyNonLazyBinder FromMethod(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinder<TParam1, TContract> : Zenject.FactoryFromBinderBase
    {
        public FactoryFromBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TContract>;
        public Zenject.ConditionCopyNonLazyBinder FromMethod(System.Func<Zenject.DiContainer, TParam1, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TContract> : Zenject.FactoryFromBinderBase
    {
        public FactoryFromBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TContract>;
        public Zenject.ConditionCopyNonLazyBinder FromMethod(System.Func<Zenject.DiContainer, TParam1, TParam2, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TContract> : Zenject.FactoryFromBinderBase
    {
        public FactoryFromBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TContract>;
        public Zenject.ConditionCopyNonLazyBinder FromMethod(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.FactoryFromBinderBase
    {
        public FactoryFromBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TContract>;
        public Zenject.ConditionCopyNonLazyBinder FromMethod(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.FactoryFromBinderBase
    {
        public FactoryFromBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>;
        public Zenject.ConditionCopyNonLazyBinder FromMethod(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.FactoryFromBinderBase
    {
        public FactoryFromBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.ConditionCopyNonLazyBinder FromFactory<TSubFactory>() where TSubFactory : Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>;
        public Zenject.ConditionCopyNonLazyBinder FromMethod(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> method);
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> FromSubContainerResolve();
        public Zenject.FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> FromSubContainerResolve(object subIdentifier);
    }

    [System.Runtime.CompilerServices.Extension] public static class FactoryFromBinder0Extensions
    {
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromIFactory<TContract>(Zenject.FactoryFromBinder<TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TContract>>> factoryBindGenerator);
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TContract>(Zenject.FactoryFromBinder<TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TContract>(Zenject.FactoryFromBinder<TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract>(Zenject.FactoryFromBinder<TContract> fromBinder) where TContract : Zenject.IPoolable<Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract, TMemoryPool>(Zenject.FactoryFromBinder<TContract> fromBinder) where TContract : Zenject.IPoolable<Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<Zenject.IMemoryPool, TContract>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract, TMemoryPool>(Zenject.FactoryFromBinder<TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<Zenject.IMemoryPool, TContract>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract>(Zenject.FactoryFromBinder<TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<Zenject.IMemoryPool>;
    }

    [System.Runtime.CompilerServices.Extension] public static class FactoryFromBinder1Extensions
    {
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TContract>(Zenject.FactoryFromBinder<TParam1, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TContract>>> factoryBindGenerator);
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TContract>(Zenject.FactoryFromBinder<TParam1, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TContract>(Zenject.FactoryFromBinder<TParam1, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract>(Zenject.FactoryFromBinder<TParam1, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, Zenject.IMemoryPool, TContract>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract>(Zenject.FactoryFromBinder<TParam1, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, Zenject.IMemoryPool, TContract>;
    }

    [System.Runtime.CompilerServices.Extension] public static class FactoryFromBinder2Extensions
    {
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TContract>>> factoryBindGenerator);
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, Zenject.IMemoryPool, TContract>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, Zenject.IMemoryPool, TContract>;
    }

    [System.Runtime.CompilerServices.Extension] public static class FactoryFromBinder3Extensions
    {
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TContract>>> factoryBindGenerator);
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, Zenject.IMemoryPool, TContract>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, Zenject.IMemoryPool, TContract>;
    }

    [System.Runtime.CompilerServices.Extension] public static class FactoryFromBinder4Extensions
    {
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TParam4, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TContract>>> factoryBindGenerator);
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool, TContract>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool, TContract>;
    }

    [System.Runtime.CompilerServices.Extension] public static class FactoryFromBinder5Extensions
    {
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>>> factoryBindGenerator);
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool, TContract>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool, TContract>;
    }

    [System.Runtime.CompilerServices.Extension] public static class FactoryFromBinder6Extensions
    {
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder, System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>>> factoryBindGenerator);
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool, TContract>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool>;
        [System.Runtime.CompilerServices.Extension] public static Zenject.ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool>(Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder, System.Action<Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator) where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool, TContract>;
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinderBase : Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public System.Collections.Generic.IEnumerable<System.Type> AllParentTypes { get; }
        protected System.Type ContractType { get; }
        protected Zenject.FactoryBindInfo FactoryBindInfo { get; }
        public FactoryFromBinderBase(Zenject.DiContainer bindContainer, System.Type contractType, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefab(UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefabResource(string resourcePath);
        public Zenject.ConditionCopyNonLazyBinder FromComponentOn(System.Func<Zenject.InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public Zenject.ConditionCopyNonLazyBinder FromComponentOn(UnityEngine.GameObject gameObject);
        public Zenject.ConditionCopyNonLazyBinder FromComponentOnRoot();
        public Zenject.ConditionCopyNonLazyBinder FromInstance(object instance);
        public Zenject.ConditionCopyNonLazyBinder FromNew();
        public Zenject.ConditionCopyNonLazyBinder FromNewComponentOn(System.Func<Zenject.InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public Zenject.ConditionCopyNonLazyBinder FromNewComponentOn(UnityEngine.GameObject gameObject);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewGameObject();
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefab(UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefabResource(string resourcePath);
        public Zenject.ConditionCopyNonLazyBinder FromNewScriptableObjectResource(string resourcePath);
        public Zenject.ConditionCopyNonLazyBinder FromResolve();
        public Zenject.ConditionCopyNonLazyBinder FromResolve(object subIdentifier);
        public Zenject.ConditionCopyNonLazyBinder FromResource(string resourcePath);
        public Zenject.ConditionCopyNonLazyBinder FromScriptableObjectResource(string resourcePath);
    }

    [Zenject.NoReflectionBaking] public class FactoryFromBinderUntyped : Zenject.FactoryFromBinderBase
    {
        public FactoryFromBinderUntyped(Zenject.DiContainer bindContainer, System.Type contractType, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
    }

    public class FactoryProviderWrapper<TContract> : Zenject.IFactory, Zenject.IFactory<TContract>
    {
        public FactoryProviderWrapper(Zenject.IProvider provider, Zenject.InjectContext injectContext) {}
        public virtual TContract Create();
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinder<TContract> : Zenject.FactorySubContainerBinderBase<TContract>
    {
        public FactorySubContainerBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<Zenject.DiContainer> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab(UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource(string resourcePath);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<Zenject.DiContainer> installerMethod);
        [System.Obsolete(@"ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")] public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab(UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Action<Zenject.DiContainer> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<Zenject.DiContainer> installerMethod);
        [System.Obsolete(@"ByNewPrefabResource has been renamed to ByNewContextPrefabResource to avoid confusion with ByNewPrefabResourceInstaller and ByNewPrefabResourceMethod")] public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource(string resourcePath);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<Zenject.DiContainer> installerMethod);
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod);
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<Zenject.DiContainer, TParam1> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<Zenject.DiContainer, TParam1> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Action<Zenject.DiContainer, TParam1> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<Zenject.DiContainer, TParam1> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<Zenject.DiContainer, TParam1> installerMethod);
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<Zenject.DiContainer, TParam1, TParam2> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<Zenject.DiContainer, TParam1, TParam2> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Action<Zenject.DiContainer, TParam1, TParam2> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<Zenject.DiContainer, TParam1, TParam2> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<Zenject.DiContainer, TParam1, TParam2> installerMethod);
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3> installerMethod);
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod);
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod);
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.FactorySubContainerBinderWithParams<TContract>
    {
        public FactorySubContainerBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod);
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinderBase<TContract>
    {
        protected Zenject.DiContainer BindContainer { get; }
        protected Zenject.BindInfo BindInfo { get; }
        protected System.Type ContractType { get; }
        protected Zenject.FactoryBindInfo FactoryBindInfo { get; }
        protected System.Func<Zenject.DiContainer, Zenject.IProvider> ProviderFunc { get; set; }
        protected object SubIdentifier { get; }
        public FactorySubContainerBinderBase(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller<TInstaller>() where TInstaller : Zenject.InstallerBase;
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller(System.Type installerType);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller<TInstaller>() where TInstaller : Zenject.InstallerBase;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller(System.Type installerType);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter) where TInstaller : Zenject.InstallerBase;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(UnityEngine.Object prefab) where TInstaller : Zenject.InstallerBase;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Type installerType);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(UnityEngine.Object prefab, System.Type installerType);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller<TInstaller>(string resourcePath) where TInstaller : Zenject.InstallerBase;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller(string resourcePath, System.Type installerType);
    }

    [Zenject.NoReflectionBaking] public class FactorySubContainerBinderWithParams<TContract> : Zenject.FactorySubContainerBinderBase<TContract>
    {
        public FactorySubContainerBinderWithParams(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, object subIdentifier) {}
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab<TInstaller>(UnityEngine.Object prefab) where TInstaller : Zenject.IInstaller;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab(System.Type installerType, UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource<TInstaller>(string resourcePath) where TInstaller : Zenject.IInstaller;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource(System.Type installerType, string resourcePath);
        [System.Obsolete(@"ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")] public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab<TInstaller>(UnityEngine.Object prefab) where TInstaller : Zenject.IInstaller;
        [System.Obsolete(@"ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")] public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab(System.Type installerType, UnityEngine.Object prefab);
        [System.Obsolete(@"ByNewPrefabResource has been renamed to ByNewContextPrefabResource to avoid confusion with ByNewPrefabResourceInstaller and ByNewPrefabResourceMethod")] public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource<TInstaller>(string resourcePath) where TInstaller : Zenject.IInstaller;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource(System.Type installerType, string resourcePath);
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceBinder<TContract> : Zenject.FactoryFromBinder<TContract>
    {
        public FactoryToChoiceBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinderUntyped To(System.Type concreteType);
        public Zenject.FactoryFromBinder<TContract> ToSelf();
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
    {
        public FactoryToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> ToSelf();
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TContract> : Zenject.FactoryFromBinder<TParam1, TContract>
    {
        public FactoryToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TContract> ToSelf();
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TContract>
    {
        public FactoryToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TContract> ToSelf();
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract>
    {
        public FactoryToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TContract> ToSelf();
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract>
    {
        public FactoryToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> ToSelf();
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
    {
        public FactoryToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> ToSelf();
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
    {
        public FactoryToChoiceBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TConcrete> To<TConcrete>() where TConcrete : TContract;
        public Zenject.FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> ToSelf();
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceIdBinder<TContract> : Zenject.FactoryArgumentsToChoiceBinder<TContract>
    {
        public FactoryToChoiceIdBinder(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TContract> WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
    {
        public FactoryToChoiceIdBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TContract>
    {
        public FactoryToChoiceIdBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TContract> WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TContract>
    {
        public FactoryToChoiceIdBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TContract> WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TContract>
    {
        public FactoryToChoiceIdBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract>
    {
        public FactoryToChoiceIdBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
    {
        public FactoryToChoiceIdBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
    {
        public FactoryToChoiceIdBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithId(object identifier);
    }

    public class FixedTickablesTaskUpdater : Zenject.TaskUpdater<Zenject.IFixedTickable>
    {
        public FixedTickablesTaskUpdater() {}
        protected virtual void UpdateItem(Zenject.IFixedTickable task);
    }

    public abstract class FromBinder : Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        protected System.Collections.Generic.IEnumerable<System.Type> AllParentTypes { get; }
        protected Zenject.DiContainer BindContainer { get; }
        protected Zenject.BindStatement BindStatement { get; }
        protected System.Collections.Generic.IEnumerable<System.Type> ConcreteTypes { get; }
        protected Zenject.IBindingFinalizer SubFinalizer { set; }
        public FromBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInChildren(bool includeInactive = True);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInHierarchy(bool includeInactive = True);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefab(UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefabResource(string resourcePath);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInParents(bool excludeSelf = False, bool includeInactive = True);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentOn(System.Func<Zenject.InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentOn(UnityEngine.GameObject gameObject);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentOnRoot();
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentSibling();
        protected Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildrenBase(bool excludeSelf, System.Func<UnityEngine.Component, bool> predicate, bool includeInactive);
        protected Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchyBase(System.Func<UnityEngine.Component, bool> predicate = default(System.Func<UnityEngine.Component, bool>), bool includeInactive = True);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInNewPrefab(UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInNewPrefabResource(string resourcePath);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInParents(bool excludeSelf = False, bool includeInactive = True);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsOn(System.Func<Zenject.InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsOn(UnityEngine.GameObject gameObject);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsOnRoot();
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsSibling();
        protected Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactoryBase<TContract>(System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TContract>>> factoryBindGenerator);
        protected Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstanceBase(object instance);
        protected Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodBase<TConcrete>(System.Func<Zenject.InjectContext, TConcrete> method);
        protected Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultipleBase<TConcrete>(System.Func<Zenject.InjectContext, System.Collections.Generic.IEnumerable<TConcrete>> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultipleUntyped(System.Func<Zenject.InjectContext, System.Collections.Generic.IEnumerable<object>> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodUntyped(System.Func<Zenject.InjectContext, object> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromNew();
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOn(System.Func<Zenject.InjectContext, UnityEngine.GameObject> gameObjectGetter);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOn(UnityEngine.GameObject gameObject);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewGameObject();
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefab(UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefabResource(string resourcePath);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnRoot();
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentSibling();
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewScriptableObject(UnityEngine.ScriptableObject resource);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewScriptableObjectResource(string resourcePath);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolve();
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolve(object subIdentifier);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolve(object subIdentifier, Zenject.InjectSources source);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAll();
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAll(object subIdentifier);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAll(object subIdentifier, Zenject.InjectSources source);
        protected Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetterBase<TObj, TResult>(object identifier, System.Func<TObj, TResult> method, Zenject.InjectSources source, bool matchMultiple);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResource(string resourcePath);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResources(string resourcePath);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromScriptableObject(UnityEngine.ScriptableObject resource);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromScriptableObjectResource(string resourcePath);
        public Zenject.SubContainerBinder FromSubContainerResolve();
        public Zenject.SubContainerBinder FromSubContainerResolve(object subIdentifier);
        public Zenject.SubContainerBinder FromSubContainerResolveAll();
        public Zenject.SubContainerBinder FromSubContainerResolveAll(object subIdentifier);
    }

    [Zenject.NoReflectionBaking] public class FromBinderGeneric<TContract> : Zenject.FromBinder
    {
        public FromBinderGeneric(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(System.Func<TContract, bool> predicate, bool includeInactive = True);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(bool excludeSelf = False, System.Func<TContract, bool> predicate = default(System.Func<TContract, bool>), bool includeInactive = True);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchy(System.Func<TContract, bool> predicate = default(System.Func<TContract, bool>), bool includeInactive = True);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromFactory<TFactory>() where TFactory : Zenject.IFactory<TContract>;
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactory(System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TContract>>> factoryBindGenerator);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstance(TContract instance);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod(System.Func<TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod(System.Func<Zenject.InjectContext, TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultiple(System.Func<Zenject.InjectContext, System.Collections.Generic.IEnumerable<TContract>> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj>(System.Func<TObj, TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj>(object identifier, System.Func<TObj, TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj>(object identifier, System.Func<TObj, TContract> method, Zenject.InjectSources source);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj>(System.Func<TObj, TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj>(object identifier, System.Func<TObj, TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj>(object identifier, System.Func<TObj, TContract> method, Zenject.InjectSources source);
    }

    [Zenject.NoReflectionBaking] public class FromBinderNonGeneric : Zenject.FromBinder
    {
        public FromBinderNonGeneric(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(System.Func<UnityEngine.Component, bool> predicate, bool includeInactive = True);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(bool excludeSelf = False, System.Func<UnityEngine.Component, bool> predicate = default(System.Func<UnityEngine.Component, bool>), bool includeInactive = True);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchy(System.Func<UnityEngine.Component, bool> predicate = default(System.Func<UnityEngine.Component, bool>), bool includeInactive = True);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromFactory<TConcrete, TFactory>() where TFactory : Zenject.IFactory<TConcrete>;
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactory<TContract>(System.Action<Zenject.ConcreteBinderGeneric<Zenject.IFactory<TContract>>> factoryBindGenerator);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstance(object instance);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod<TConcrete>(System.Func<Zenject.InjectContext, TConcrete> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultiple<TConcrete>(System.Func<Zenject.InjectContext, System.Collections.Generic.IEnumerable<TConcrete>> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj, TContract>(System.Func<TObj, TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj, TContract>(object identifier, System.Func<TObj, TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj, TContract>(object identifier, System.Func<TObj, TContract> method, Zenject.InjectSources source);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj, TContract>(System.Func<TObj, TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj, TContract>(object identifier, System.Func<TObj, TContract> method);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj, TContract>(object identifier, System.Func<TObj, TContract> method, Zenject.InjectSources source);
    }

    public class GameObjectContext : Zenject.RunnableContext
    {
        public event System.Action PostInstall;
        public event System.Action PostResolve;
        public event System.Action PreInstall;
        public event System.Action PreResolve;
        public virtual Zenject.DiContainer Container { get; }
        public GameObjectContext() {}
        [Zenject.Inject] public void Construct(Zenject.DiContainer parentContainer);
        protected virtual void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        public void Install(Zenject.DiContainer parentContainer);
        protected virtual void RunInternal();
    }

    [Zenject.NoReflectionBaking] public class GameObjectCreationParameters
    {
        public static readonly Zenject.GameObjectCreationParameters Default;
        public string GroupName { get; set; }
        public string Name { get; set; }
        public UnityEngine.Transform ParentTransform { get; set; }
        public System.Func<Zenject.InjectContext, UnityEngine.Transform> ParentTransformGetter { get; set; }
        public System.Nullable<UnityEngine.Vector3> Position { get; set; }
        public System.Nullable<UnityEngine.Quaternion> Rotation { get; set; }
        public GameObjectCreationParameters() {}
        public virtual bool Equals(object other);
        public bool Equals(Zenject.GameObjectCreationParameters that);
        public virtual int GetHashCode();
        public static bool operator ==(Zenject.GameObjectCreationParameters left, Zenject.GameObjectCreationParameters right);
        public static bool operator !=(Zenject.GameObjectCreationParameters left, Zenject.GameObjectCreationParameters right);
    }

    [Zenject.NoReflectionBaking] public class GetFromGameObjectComponentProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public GetFromGameObjectComponentProvider(System.Type componentType, UnityEngine.GameObject gameObject, bool matchSingle) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class GetFromGameObjectGetterComponentProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public GetFromGameObjectGetterComponentProvider(System.Type componentType, System.Func<Zenject.InjectContext, UnityEngine.GameObject> gameObjectGetter, bool matchSingle) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class GetFromPrefabComponentProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public GetFromPrefabComponentProvider(System.Type componentType, Zenject.IPrefabInstantiator prefabInstantiator, bool matchSingle) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class GetterProvider<TObj, TResult> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public GetterProvider(object identifier, System.Func<TObj, TResult> method, Zenject.DiContainer container, Zenject.InjectSources sourceType, bool matchAll) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    public class GuiRenderableManager
    {
        public GuiRenderableManager([Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<Zenject.IGuiRenderable> renderables, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void OnGui();
    }

    public class GuiRenderer : UnityEngine.MonoBehaviour
    {
        public GuiRenderer() {}
        public void OnGUI();
    }

    public class HashSetPool<T> : Zenject.StaticMemoryPool<System.Collections.Generic.HashSet<T>>
    {
        public static Zenject.HashSetPool<T> Instance { get; }
        public HashSetPool() {}
    }

    public interface IAnimatorIkHandler
    {
        public abstract void OnAnimatorIk();
    }

    public interface IAnimatorMoveHandler
    {
        public abstract void OnAnimatorMove();
    }

    public interface IBindingFinalizer
    {
        public abstract Zenject.BindingInheritanceMethods BindingInheritanceMethod { get; }
        public abstract void FinalizeBinding(Zenject.DiContainer container);
    }

    [Zenject.NoReflectionBaking] public class IdBinder
    {
        public IdBinder(Zenject.BindInfo bindInfo) {}
        public void WithId(object identifier);
    }

    public interface IDecoratableMonoKernel
    {
        public abstract void Dispose();
        public abstract void FixedUpdate();
        public abstract void Initialize();
        public abstract void LateDispose();
        public abstract void LateUpdate();
        public abstract bool ShouldInitializeOnStart();
        public abstract void Update();
    }

    public interface IDespawnableMemoryPool<TValue> : Zenject.IMemoryPool
    {
        public abstract void Despawn(TValue item);
    }

    [Zenject.NoReflectionBaking] public class IdScopeConcreteIdArgConditionCopyNonLazyBinder : Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public IdScopeConcreteIdArgConditionCopyNonLazyBinder(Zenject.BindInfo bindInfo) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder WithId(object identifier);
    }

    public interface IFactory
    {
    }

    public interface IFactory<TValue> : Zenject.IFactory
    {
        public abstract TValue Create();
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10);
    }

    public interface IFactory<TParam1, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param);
    }

    public interface IFactory<TParam1, TParam2, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param1, TParam2 param2);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
    }

    public interface IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : Zenject.IFactory
    {
        public abstract TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
    }

    [Zenject.NoReflectionBaking] public class IFactoryProvider<TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(Zenject.DiContainer container, System.Guid factoryId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [Zenject.NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(Zenject.DiContainer container, System.Guid factoryId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [Zenject.NoReflectionBaking] public class IFactoryProvider<TParam1, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(Zenject.DiContainer container, System.Guid factoryId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [Zenject.NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(Zenject.DiContainer container, System.Guid factoryId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [Zenject.NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(Zenject.DiContainer container, System.Guid factoryId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [Zenject.NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(Zenject.DiContainer container, System.Guid factoryId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [Zenject.NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(Zenject.DiContainer container, System.Guid factoryId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    [Zenject.NoReflectionBaking] public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : Zenject.IFactoryProviderBase<TContract>
    {
        public IFactoryProvider(Zenject.DiContainer container, System.Guid factoryId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
    }

    public abstract class IFactoryProviderBase<TContract> : Zenject.IProvider
    {
        protected Zenject.DiContainer Container { get; }
        protected System.Guid FactoryId { get; }
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public IFactoryProviderBase(Zenject.DiContainer container, System.Guid factoryId) {}
        public abstract void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class IfNotBoundBinder
    {
        public Zenject.BindInfo BindInfo { get; }
        public IfNotBoundBinder(Zenject.BindInfo bindInfo) {}
        public void IfNotBound();
    }

    public interface IInstaller
    {
        public abstract bool IsEnabled { get; }
        public abstract void InstallBindings();
    }

    public interface IInstantiator
    {
        public abstract UnityEngine.GameObject CreateEmptyGameObject(string name);
        public abstract T Instantiate<T>();
        public abstract object Instantiate(System.Type concreteType);
        public abstract T Instantiate<T>(System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract object Instantiate(System.Type concreteType, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract TContract InstantiateComponent<TContract>(UnityEngine.GameObject gameObject) where TContract : UnityEngine.Component;
        public abstract TContract InstantiateComponent<TContract>(UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs) where TContract : UnityEngine.Component;
        public abstract UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject);
        public abstract UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract T InstantiateComponentOnNewGameObject<T>() where T : UnityEngine.Component;
        public abstract T InstantiateComponentOnNewGameObject<T>(System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public abstract T InstantiateComponentOnNewGameObject<T>(string gameObjectName) where T : UnityEngine.Component;
        public abstract T InstantiateComponentOnNewGameObject<T>(string gameObjectName, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.Component;
        public abstract UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab);
        public abstract UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Transform parentTransform);
        public abstract UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public abstract T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab);
        public abstract T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Transform parentTransform);
        public abstract T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract object InstantiatePrefabForComponent(System.Type concreteType, UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public abstract T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract UnityEngine.GameObject InstantiatePrefabResource(string resourcePath);
        public abstract UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, UnityEngine.Transform parentTransform);
        public abstract UnityEngine.GameObject InstantiatePrefabResource(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public abstract T InstantiatePrefabResourceForComponent<T>(string resourcePath);
        public abstract T InstantiatePrefabResourceForComponent<T>(string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Transform parentTransform);
        public abstract T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract object InstantiatePrefabResourceForComponent(System.Type concreteType, string resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform);
        public abstract T InstantiatePrefabResourceForComponent<T>(string resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable<object> extraArgs);
        public abstract T InstantiateScriptableObjectResource<T>(string resourcePath) where T : UnityEngine.ScriptableObject;
        public abstract object InstantiateScriptableObjectResource(System.Type scriptableObjectType, string resourcePath);
        public abstract T InstantiateScriptableObjectResource<T>(string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs) where T : UnityEngine.ScriptableObject;
        public abstract object InstantiateScriptableObjectResource(System.Type scriptableObjectType, string resourcePath, System.Collections.Generic.IEnumerable<object> extraArgs);
    }

    public interface IMemoryPool
    {
        public abstract System.Type ItemType { get; }
        public abstract int NumActive { get; }
        public abstract int NumInactive { get; }
        public abstract int NumTotal { get; }
        public abstract void Clear();
        public abstract void Despawn(object obj);
        public abstract void ExpandBy(int numToAdd);
        public abstract void Resize(int desiredPoolSize);
        public abstract void ShrinkBy(int numToRemove);
    }

    public interface IMemoryPool<TValue> : Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool
    {
        public abstract TValue Spawn();
    }

    public interface IMemoryPool<TParam1, TValue> : Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool
    {
        public abstract TValue Spawn(TParam1 param);
    }

    public interface IMemoryPool<TParam1, TParam2, TValue> : Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool
    {
        public abstract TValue Spawn(TParam1 param1, TParam2 param2);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool
    {
        public abstract TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool
    {
        public abstract TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool
    {
        public abstract TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool
    {
        public abstract TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool
    {
        public abstract TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
    }

    public interface IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool
    {
        public abstract TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
    }

    public class InitializableManager
    {
        protected bool _hasInitialized;
        [Zenject.Inject] public InitializableManager([Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<Zenject.IInitializable> initializables, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void Add(Zenject.IInitializable initializable);
        public void Add(Zenject.IInitializable initializable, int priority);
        public void Initialize();
    }

    [Zenject.NoReflectionBaking] public class InjectContext : System.IDisposable
    {
        public System.Collections.Generic.IEnumerable<System.Type> AllObjectTypes { get; }
        public Zenject.BindingId BindingId { get; }
        public object ConcreteIdentifier { get; set; }
        public Zenject.DiContainer Container { get; set; }
        public object FallBackValue { get; set; }
        public object Identifier { get; set; }
        public string MemberName { get; set; }
        public System.Type MemberType { get; set; }
        public object ObjectInstance { get; set; }
        public System.Type ObjectType { get; set; }
        public bool Optional { get; set; }
        public Zenject.InjectContext ParentContext { get; set; }
        public System.Collections.Generic.IEnumerable<Zenject.InjectContext> ParentContexts { get; }
        public System.Collections.Generic.IEnumerable<Zenject.InjectContext> ParentContextsAndSelf { get; }
        public Zenject.InjectSources SourceType { get; set; }
        public InjectContext() {}
        public InjectContext(Zenject.DiContainer container, System.Type memberType) {}
        public InjectContext(Zenject.DiContainer container, System.Type memberType, object identifier) {}
        public InjectContext(Zenject.DiContainer container, System.Type memberType, object identifier, bool optional) {}
        public Zenject.InjectContext Clone();
        public Zenject.InjectContext CreateSubContext(System.Type memberType);
        public Zenject.InjectContext CreateSubContext(System.Type memberType, object identifier);
        public virtual void Dispose();
        public string GetObjectGraphString();
        public void Reset();
    }

    [System.Diagnostics.DebuggerStepThrough] public static class InjectUtil
    {
        public static System.Collections.Generic.List<Zenject.TypeValuePair> CreateArgList(System.Collections.Generic.IEnumerable<object> args);
        public static System.Collections.Generic.List<Zenject.TypeValuePair> CreateArgListExplicit<T>(T param);
        public static System.Collections.Generic.List<Zenject.TypeValuePair> CreateArgListExplicit<TParam1, TParam2>(TParam1 param1, TParam2 param2);
        public static System.Collections.Generic.List<Zenject.TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3>(TParam1 param1, TParam2 param2, TParam3 param3);
        public static System.Collections.Generic.List<Zenject.TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3, TParam4>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
        public static System.Collections.Generic.List<Zenject.TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3, TParam4, TParam5>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
        public static System.Collections.Generic.List<Zenject.TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
        public static Zenject.TypeValuePair CreateTypePair<T>(T param);
        public static bool PopValueWithType(System.Collections.Generic.List<Zenject.TypeValuePair> extraArgMap, System.Type injectedFieldType, out object value);
    }

    public abstract class Installer : Zenject.InstallerBase
    {
        protected Installer() {}
    }

    public abstract class Installer<TDerived> : Zenject.InstallerBase where TDerived : Zenject.Installer<TDerived>
    {
        protected Installer() {}
        public static void Install(Zenject.DiContainer container);
    }

    public abstract class Installer<TParam1, TDerived> : Zenject.InstallerBase where TDerived : Zenject.Installer<TParam1, TDerived>
    {
        protected Installer() {}
        public static void Install(Zenject.DiContainer container, TParam1 p1);
    }

    public abstract class Installer<TParam1, TParam2, TDerived> : Zenject.InstallerBase where TDerived : Zenject.Installer<TParam1, TParam2, TDerived>
    {
        protected Installer() {}
        public static void Install(Zenject.DiContainer container, TParam1 p1, TParam2 p2);
    }

    public abstract class Installer<TParam1, TParam2, TParam3, TDerived> : Zenject.InstallerBase where TDerived : Zenject.Installer<TParam1, TParam2, TParam3, TDerived>
    {
        protected Installer() {}
        public static void Install(Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
    }

    public abstract class Installer<TParam1, TParam2, TParam3, TParam4, TDerived> : Zenject.InstallerBase where TDerived : Zenject.Installer<TParam1, TParam2, TParam3, TParam4, TDerived>
    {
        protected Installer() {}
        public static void Install(Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
    }

    public abstract class Installer<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived> : Zenject.InstallerBase where TDerived : Zenject.Installer<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived>
    {
        protected Installer() {}
        public static void Install(Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
    }

    public abstract class InstallerBase : Zenject.IInstaller
    {
        protected Zenject.DiContainer Container { get; }
        public virtual bool IsEnabled { get; }
        protected InstallerBase() {}
        public abstract void InstallBindings();
    }

    [Zenject.NoReflectionBaking] public class InstanceProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public InstanceProvider(System.Type instanceType, object instance, Zenject.DiContainer container, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class InstantiateCallbackConditionCopyNonLazyBinder : Zenject.ConditionCopyNonLazyBinder
    {
        public InstantiateCallbackConditionCopyNonLazyBinder(Zenject.BindInfo bindInfo) {}
        public Zenject.ConditionCopyNonLazyBinder OnInstantiated(System.Action<Zenject.InjectContext, object> callback);
        public Zenject.ConditionCopyNonLazyBinder OnInstantiated<T>(System.Action<Zenject.InjectContext, T> callback);
    }

    [Zenject.NoReflectionBaking] public class InstantiateOnPrefabComponentProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public InstantiateOnPrefabComponentProvider(System.Type componentType, Zenject.IPrefabInstantiator prefabInstantiator) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    public enum InvalidBindResponses
    {
        public const Zenject.InvalidBindResponses Assert = 0;
        public const Zenject.InvalidBindResponses Skip = 1;
        public int value__;
    }

    public interface IPlaceholderFactory : Zenject.IValidatable
    {
    }

    public interface IPrefabInstantiator
    {
        public abstract System.Type ArgumentTarget { get; }
        public abstract System.Collections.Generic.List<Zenject.TypeValuePair> ExtraArguments { get; }
        public abstract Zenject.GameObjectCreationParameters GameObjectCreationParameters { get; }
        public abstract UnityEngine.Object GetPrefab(Zenject.InjectContext context);
        public abstract UnityEngine.GameObject Instantiate(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction);
    }

    public interface IPrefabProvider
    {
        public abstract UnityEngine.Object GetPrefab(Zenject.InjectContext context);
    }

    public interface IProvider
    {
        public abstract bool IsCached { get; }
        public abstract bool TypeVariesBasedOnMemberType { get; }
        public abstract void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> instances);
        public abstract System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [System.Runtime.CompilerServices.Extension] public static class IProviderExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void GetAllInstances(Zenject.IProvider creator, Zenject.InjectContext context, System.Collections.Generic.List<object> buffer);
        [System.Runtime.CompilerServices.Extension] public static void GetAllInstances(Zenject.IProvider creator, Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, System.Collections.Generic.List<object> buffer);
        [System.Runtime.CompilerServices.Extension] public static void GetAllInstancesWithInjectSplit(Zenject.IProvider creator, Zenject.InjectContext context, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        [System.Runtime.CompilerServices.Extension] public static object GetInstance(Zenject.IProvider creator, Zenject.InjectContext context);
        [System.Runtime.CompilerServices.Extension] public static object GetInstance(Zenject.IProvider creator, Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args);
        [System.Runtime.CompilerServices.Extension] public static object TryGetInstance(Zenject.IProvider creator, Zenject.InjectContext context);
        [System.Runtime.CompilerServices.Extension] public static object TryGetInstance(Zenject.IProvider creator, Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args);
    }

    public interface ISubContainerCreator
    {
        public abstract Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    public interface IValidatable
    {
        public abstract void Validate();
    }

    [System.Diagnostics.DebuggerStepThrough] public class Kernel : System.IDisposable, Zenject.IFixedTickable, Zenject.IInitializable, Zenject.ILateDisposable, Zenject.ILateTickable, Zenject.ITickable
    {
        public Kernel() {}
        public virtual void Dispose();
        public virtual void FixedTick();
        public virtual void Initialize();
        public virtual void LateDispose();
        public virtual void LateTick();
        public virtual void Tick();
    }

    public class KeyedFactory<TBase, TKey> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key);
    }

    public class KeyedFactory<TBase, TKey, TParam1> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key, TParam1 param1);
    }

    public class KeyedFactory<TBase, TKey, TParam1, TParam2> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key, TParam1 param1, TParam2 param2);
    }

    public class KeyedFactory<TBase, TKey, TParam1, TParam2, TParam3> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key, TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public class KeyedFactory<TBase, TKey, TParam1, TParam2, TParam3, TParam4> : Zenject.KeyedFactoryBase<TBase, TKey>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        public KeyedFactory() {}
        public virtual TBase Create(TKey key, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public abstract class KeyedFactoryBase<TBase, TKey> : Zenject.IValidatable
    {
        protected Zenject.DiContainer Container { get; }
        public System.Collections.Generic.ICollection<TKey> Keys { get; }
        protected abstract System.Collections.Generic.IEnumerable<System.Type> ProvidedTypes { get; }
        protected System.Collections.Generic.Dictionary<TKey, System.Type> TypeMap { get; }
        protected KeyedFactoryBase() {}
        protected static Zenject.ConditionCopyNonLazyBinder AddBindingInternal<TDerived>(Zenject.DiContainer container, TKey key) where TDerived : TBase;
        protected System.Type GetTypeForKey(TKey key);
        public bool HasKey(TKey key);
        [Zenject.Inject] public void Initialize();
        public virtual void Validate();
    }

    public class LateTickablesTaskUpdater : Zenject.TaskUpdater<Zenject.ILateTickable>
    {
        public LateTickablesTaskUpdater() {}
        protected virtual void UpdateItem(Zenject.ILateTickable task);
    }

    [Zenject.NoReflectionBaking] [Zenject.ZenjectAllowDuringValidation] public class LazyInject<T> : Zenject.IValidatable
    {
        public T Value { get; }
        public LazyInject(Zenject.DiContainer container, Zenject.InjectContext context) {}
    }

    [Zenject.NoReflectionBaking] public class LazyInstanceInjector
    {
        public System.Collections.Generic.IEnumerable<object> Instances { get; }
        public LazyInstanceInjector(Zenject.DiContainer container) {}
        public void AddInstance(object instance);
        public void AddInstances(System.Collections.Generic.IEnumerable<object> instances);
        public void LazyInject(object instance);
        public void LazyInjectAll();
    }

    public class ListPool<T> : Zenject.StaticMemoryPool<System.Collections.Generic.List<T>>
    {
        public static Zenject.ListPool<T> Instance { get; }
        public ListPool() {}
    }

    public enum LoadSceneRelationship
    {
        public const Zenject.LoadSceneRelationship Child = 1;
        public const Zenject.LoadSceneRelationship None = 0;
        public const Zenject.LoadSceneRelationship Sibling = 2;
        public int value__;
    }

    public class MemoryPool<TValue> : Zenject.MemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory, Zenject.IFactory<TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TValue item);
        public virtual TValue Spawn();
    }

    public class MemoryPool<TParam1, TValue> : Zenject.MemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TValue item);
        public virtual TValue Spawn(TParam1 param);
    }

    public class MemoryPool<TParam1, TParam2, TValue> : Zenject.MemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TValue item);
        public virtual TValue Spawn(TParam1 param1, TParam2 param2);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.MemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TValue item);
        public virtual TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.MemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue item);
        public virtual TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.MemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue item);
        public virtual TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.MemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue item);
        public virtual TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.MemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue item);
        public virtual TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
    }

    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : Zenject.MemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>
    {
        public MemoryPool() {}
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TValue item);
        public virtual TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
    }

    [Zenject.ZenjectAllowDuringValidation] public class MemoryPoolBase<TContract> : System.IDisposable, Zenject.IMemoryPool, Zenject.IValidatable
    {
        protected Zenject.DiContainer Container { get; }
        public System.Collections.Generic.IEnumerable<TContract> InactiveItems { get; }
        public virtual System.Type ItemType { get; }
        public virtual int NumActive { get; }
        public virtual int NumInactive { get; }
        public virtual int NumTotal { get; }
        public MemoryPoolBase() {}
        public virtual void Clear();
        public virtual void Despawn(TContract item);
        public virtual void Dispose();
        public virtual void ExpandBy(int numToAdd);
        protected TContract GetInternal();
        protected virtual void OnCreated(TContract item);
        protected virtual void OnDespawned(TContract item);
        protected virtual void OnDestroyed(TContract item);
        protected virtual void OnSpawned(TContract item);
        public virtual void Resize(int desiredPoolSize);
        public virtual void ShrinkBy(int numToRemove);
    }

    [Zenject.NoReflectionBaking] public class MemoryPoolBindInfo
    {
        public Zenject.PoolExpandMethods ExpandMethod { get; set; }
        public int InitialSize { get; set; }
        public int MaxSize { get; set; }
        public MemoryPoolBindInfo() {}
    }

    [Zenject.NoReflectionBaking] public class MemoryPoolBindingFinalizer<TContract> : Zenject.ProviderBindingFinalizer
    {
        public MemoryPoolBindingFinalizer(Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, Zenject.MemoryPoolBindInfo poolBindInfo) {}
        protected virtual void OnFinalizeBinding(Zenject.DiContainer container);
    }

    [Zenject.NoReflectionBaking] public class MemoryPoolExpandBinder<TContract> : Zenject.FactoryArgumentsToChoiceBinder<TContract>
    {
        protected Zenject.MemoryPoolBindInfo MemoryPoolBindInfo { get; }
        public MemoryPoolExpandBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, Zenject.MemoryPoolBindInfo poolBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TContract> ExpandByDoubling();
        public Zenject.FactoryArgumentsToChoiceBinder<TContract> ExpandByOneAtATime();
    }

    [Zenject.NoReflectionBaking] public class MemoryPoolIdInitialSizeMaxSizeBinder<TContract> : Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract>
    {
        public MemoryPoolIdInitialSizeMaxSizeBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, Zenject.MemoryPoolBindInfo poolBindInfo) {}
        public Zenject.MemoryPoolInitialSizeMaxSizeBinder<TContract> WithId(object identifier);
    }

    [Zenject.NoReflectionBaking] public class MemoryPoolInitialSizeMaxSizeBinder<TContract> : Zenject.MemoryPoolMaxSizeBinder<TContract>
    {
        public MemoryPoolInitialSizeMaxSizeBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, Zenject.MemoryPoolBindInfo poolBindInfo) {}
        public Zenject.FactoryArgumentsToChoiceBinder<TContract> WithFixedSize(int size);
        public Zenject.MemoryPoolMaxSizeBinder<TContract> WithInitialSize(int size);
    }

    [Zenject.NoReflectionBaking] public class MemoryPoolMaxSizeBinder<TContract> : Zenject.MemoryPoolExpandBinder<TContract>
    {
        public MemoryPoolMaxSizeBinder(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, Zenject.MemoryPoolBindInfo poolBindInfo) {}
        public Zenject.MemoryPoolExpandBinder<TContract> WithMaxSize(int size);
    }

    public class MemoryPoolSettings
    {
        public static readonly Zenject.MemoryPoolSettings Default;
        public Zenject.PoolExpandMethods ExpandMethod;
        public int InitialSize;
        public int MaxSize;
        public MemoryPoolSettings() {}
        public MemoryPoolSettings(int initialSize, int maxSize, Zenject.PoolExpandMethods expandMethod) {}
    }

    [Zenject.NoReflectionBaking] public class MethodMultipleProviderUntyped : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodMultipleProviderUntyped(System.Func<Zenject.InjectContext, System.Collections.Generic.IEnumerable<object>> method, Zenject.DiContainer container) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProvider<TReturn> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProvider(System.Func<Zenject.InjectContext, TReturn> method, Zenject.DiContainer container) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderMultiple<TReturn> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderMultiple(System.Func<Zenject.InjectContext, System.Collections.Generic.IEnumerable<TReturn>> method, Zenject.DiContainer container) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderSimple<TReturn> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderSimple(System.Func<TReturn> method) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderUntyped : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderUntyped(System.Func<Zenject.InjectContext, object> method, Zenject.DiContainer container) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderWithContainer<TValue> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<Zenject.DiContainer, TValue> method) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> method) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TValue> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<Zenject.DiContainer, TParam1, TValue> method) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TValue> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<Zenject.DiContainer, TParam1, TParam2, TValue> method) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TValue> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TValue> method) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TValue> method) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TValue> method) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public MethodProviderWithContainer(System.Func<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> method) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    public class MonoInstaller : Zenject.MonoInstallerBase
    {
        public MonoInstaller() {}
    }

    public class MonoInstaller<TDerived> : Zenject.MonoInstaller where TDerived : Zenject.MonoInstaller<TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container);
        public static TDerived InstallFromResource(Zenject.DiContainer container, object[] extraArgs);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, object[] extraArgs);
    }

    public class MonoInstaller<TParam1, TDerived> : Zenject.MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container, TParam1 p1);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, TParam1 p1);
    }

    public class MonoInstaller<TParam1, TParam2, TDerived> : Zenject.MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TParam2, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container, TParam1 p1, TParam2 p2);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, TParam1 p1, TParam2 p2);
    }

    public class MonoInstaller<TParam1, TParam2, TParam3, TDerived> : Zenject.MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TParam2, TParam3, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
    }

    public class MonoInstaller<TParam1, TParam2, TParam3, TParam4, TDerived> : Zenject.MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TParam2, TParam3, TParam4, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
    }

    public class MonoInstaller<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived> : Zenject.MonoInstallerBase where TDerived : Zenject.MonoInstaller<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived>
    {
        public MonoInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
    }

    [System.Diagnostics.DebuggerStepThrough] public class MonoInstallerBase : UnityEngine.MonoBehaviour, Zenject.IInstaller
    {
        [Zenject.Inject] protected Zenject.DiContainer Container { get; set; }
        public virtual bool IsEnabled { get; }
        public MonoInstallerBase() {}
        public virtual void InstallBindings();
        public virtual void Start();
    }

    public static class MonoInstallerUtil
    {
        public static TInstaller CreateInstaller<TInstaller>(string resourcePath, Zenject.DiContainer container) where TInstaller : Zenject.MonoInstallerBase;
        public static string GetDefaultResourcePath<TInstaller>() where TInstaller : Zenject.MonoInstallerBase;
    }

    public abstract class MonoKernel : UnityEngine.MonoBehaviour
    {
        protected bool IsDestroyed { get; }
        protected MonoKernel() {}
        public virtual void FixedUpdate();
        public void Initialize();
        public virtual void LateUpdate();
        public virtual void OnDestroy();
        public virtual void Start();
        public virtual void Update();
    }

    public class MonoMemoryPool<TValue> : Zenject.MemoryPool<TValue> where TValue : UnityEngine.Component
    {
        [Zenject.Inject] public MonoMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TValue> : Zenject.MemoryPool<TParam1, TValue> where TValue : UnityEngine.Component
    {
        [Zenject.Inject] public MonoMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TParam2, TValue> : Zenject.MemoryPool<TParam1, TParam2, TValue> where TValue : UnityEngine.Component
    {
        [Zenject.Inject] public MonoMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : UnityEngine.Component
    {
        [Zenject.Inject] public MonoMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : UnityEngine.Component
    {
        [Zenject.Inject] public MonoMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void OnSpawned(TValue item);
    }

    public class MonoMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : UnityEngine.Component
    {
        [Zenject.Inject] public MonoMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void OnSpawned(TValue item);
    }

    public class MonoPoolableMemoryPool<TValue> : Zenject.MemoryPool<TValue> where TValue : UnityEngine.Component, Zenject.IPoolable
    {
        [Zenject.Inject] public MonoPoolableMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void Reinitialize(TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TValue> : Zenject.MemoryPool<TParam1, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1>
    {
        [Zenject.Inject] public MonoPoolableMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TValue> : Zenject.MemoryPool<TParam1, TParam2, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2>
    {
        [Zenject.Inject] public MonoPoolableMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3>
    {
        [Zenject.Inject] public MonoPoolableMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4>
    {
        [Zenject.Inject] public MonoPoolableMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5>
    {
        [Zenject.Inject] public MonoPoolableMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>
    {
        [Zenject.Inject] public MonoPoolableMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>
    {
        [Zenject.Inject] public MonoPoolableMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue item);
    }

    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> where TValue : UnityEngine.Component, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>
    {
        [Zenject.Inject] public MonoPoolableMemoryPool() {}
        protected virtual void OnCreated(TValue item);
        protected virtual void OnDespawned(TValue item);
        protected virtual void OnDestroyed(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TValue item);
    }

    [Zenject.NoReflectionBaking] public class NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder : Zenject.TransformScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(Zenject.BindInfo bindInfo, Zenject.GameObjectCreationParameters gameObjectInfo) {}
        public Zenject.TransformScopeConcreteIdArgConditionCopyNonLazyBinder WithGameObjectName(string gameObjectName);
    }

    [Zenject.NoReflectionBaking] public class NonLazyBinder : Zenject.IfNotBoundBinder
    {
        public NonLazyBinder(Zenject.BindInfo bindInfo) {}
        public Zenject.IfNotBoundBinder Lazy();
        public Zenject.IfNotBoundBinder NonLazy();
    }

    [Zenject.NoReflectionBaking] public class NullBindingFinalizer : Zenject.IBindingFinalizer
    {
        public virtual Zenject.BindingInheritanceMethods BindingInheritanceMethod { get; }
        public NullBindingFinalizer() {}
        public virtual void FinalizeBinding(Zenject.DiContainer container);
    }

    public class PlaceholderFactory<TValue> : Zenject.PlaceholderFactoryBase<TValue>, Zenject.IFactory, Zenject.IFactory<TValue>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create();
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> : Zenject.PlaceholderFactoryBase<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10);
    }

    public class PlaceholderFactory<TParam1, TValue> : Zenject.PlaceholderFactoryBase<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TValue>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param);
    }

    public class PlaceholderFactory<TParam1, TParam2, TValue> : Zenject.PlaceholderFactoryBase<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TValue>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2);
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TValue> : Zenject.PlaceholderFactoryBase<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TValue>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3);
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.PlaceholderFactoryBase<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TValue>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.PlaceholderFactoryBase<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    }

    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.PlaceholderFactoryBase<TValue>, Zenject.IFactory, Zenject.IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
    {
        protected virtual System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        public PlaceholderFactory() {}
        [JetBrains.Annotations.NotNull] public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    }

    public abstract class PlaceholderFactoryBase<TValue> : Zenject.IPlaceholderFactory, Zenject.IValidatable
    {
        protected abstract System.Collections.Generic.IEnumerable<System.Type> ParamTypes { get; }
        protected PlaceholderFactoryBase() {}
        protected TValue CreateInternal(System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs);
        public virtual void Validate();
    }

    [Zenject.NoReflectionBaking] public class PlaceholderFactoryBindingFinalizer<TContract> : Zenject.ProviderBindingFinalizer
    {
        public PlaceholderFactoryBindingFinalizer(Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo) {}
        protected virtual void OnFinalizeBinding(Zenject.DiContainer container);
    }

    public class PoolableManager
    {
        public PoolableManager([Zenject.InjectLocal] System.Collections.Generic.List<Zenject.IPoolable> poolables, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned();
    }

    public class PoolableManager<T>
    {
        public PoolableManager([Zenject.InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T>> poolables, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T param);
    }

    public class PoolableManager<T1, T2>
    {
        public PoolableManager([Zenject.InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T1, T2>> poolables, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T1 p1, T2 p2);
    }

    public class PoolableManager<T1, T2, T3>
    {
        public PoolableManager([Zenject.InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T1, T2, T3>> poolables, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T1 p1, T2 p2, T3 p3);
    }

    public class PoolableManager<T1, T2, T3, T4>
    {
        public PoolableManager([Zenject.InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T1, T2, T3, T4>> poolables, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T1 p1, T2 p2, T3 p3, T4 p4);
    }

    public class PoolableManager<T1, T2, T3, T4, T5>
    {
        public PoolableManager([Zenject.InjectLocal] System.Collections.Generic.List<Zenject.IPoolable<T1, T2, T3, T4, T5>> poolables, [Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<ModestTree.Util.ValuePair<System.Type, int>> priorities) {}
        public void TriggerOnDespawned();
        public void TriggerOnSpawned(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5);
    }

    public class PoolableMemoryPool<TValue> : Zenject.MemoryPool<TValue> where TValue : Zenject.IPoolable
    {
        public PoolableMemoryPool() {}
        protected virtual void OnDespawned(TValue item);
        protected virtual void Reinitialize(TValue item);
    }

    public class PoolableMemoryPool<TParam1, TValue> : Zenject.MemoryPool<TParam1, TValue> where TValue : Zenject.IPoolable<TParam1>
    {
        public PoolableMemoryPool() {}
        protected virtual void OnDespawned(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TValue> : Zenject.MemoryPool<TParam1, TParam2, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2>
    {
        public PoolableMemoryPool() {}
        protected virtual void OnDespawned(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3>
    {
        public PoolableMemoryPool() {}
        protected virtual void OnDespawned(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4>
    {
        public PoolableMemoryPool() {}
        protected virtual void OnDespawned(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5>
    {
        public PoolableMemoryPool() {}
        protected virtual void OnDespawned(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>
    {
        public PoolableMemoryPool() {}
        protected virtual void OnDespawned(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>
    {
        public PoolableMemoryPool() {}
        protected virtual void OnDespawned(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue item);
    }

    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue> where TValue : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>
    {
        public PoolableMemoryPool() {}
        protected virtual void OnDespawned(TValue item);
        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TValue item);
    }

    [Zenject.NoReflectionBaking] public class PoolableMemoryPoolProvider<TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, Zenject.IValidatable where TContract : Zenject.IPoolable<Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<Zenject.IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(Zenject.DiContainer container, System.Guid poolId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual void Validate();
    }

    [Zenject.NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, Zenject.IValidatable where TContract : Zenject.IPoolable<TParam1, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, Zenject.IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(Zenject.DiContainer container, System.Guid poolId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual void Validate();
    }

    [Zenject.NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, Zenject.IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, Zenject.IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(Zenject.DiContainer container, System.Guid poolId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual void Validate();
    }

    [Zenject.NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, Zenject.IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, Zenject.IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(Zenject.DiContainer container, System.Guid poolId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual void Validate();
    }

    [Zenject.NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, Zenject.IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, Zenject.IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(Zenject.DiContainer container, System.Guid poolId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual void Validate();
    }

    [Zenject.NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, Zenject.IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, Zenject.IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(Zenject.DiContainer container, System.Guid poolId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual void Validate();
    }

    [Zenject.NoReflectionBaking] public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool> : Zenject.PoolableMemoryPoolProviderBase<TContract>, Zenject.IValidatable where TContract : Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool> where TMemoryPool : Zenject.MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Zenject.IMemoryPool, TContract>
    {
        public PoolableMemoryPoolProvider(Zenject.DiContainer container, System.Guid poolId) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual void Validate();
    }

    public abstract class PoolableMemoryPoolProviderBase<TContract> : Zenject.IProvider
    {
        protected Zenject.DiContainer Container { get; }
        public virtual bool IsCached { get; }
        protected System.Guid PoolId { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public PoolableMemoryPoolProviderBase(Zenject.DiContainer container, System.Guid poolId) {}
        public abstract void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    public class PoolableStaticMemoryPool<TValue> : Zenject.StaticMemoryPool<TValue> where TValue : class, Zenject.IPoolable, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TValue> : Zenject.StaticMemoryPool<TParam1, TValue> where TValue : class, Zenject.IPoolable<TParam1>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> where TValue : class, Zenject.IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>, new()
    {
        public PoolableStaticMemoryPool() {}
    }

    public class PoolCleanupChecker : Zenject.ILateDisposable
    {
        public PoolCleanupChecker([Zenject.Inject(Optional = true, Source = 1)] System.Collections.Generic.List<Zenject.IMemoryPool> poolFactories, [Zenject.Inject(Source = 1)] System.Collections.Generic.List<System.Type> ignoredPools) {}
        public virtual void LateDispose();
    }

    [Zenject.NoReflectionBaking] public class PoolExceededFixedSizeException : System.Exception
    {
        public PoolExceededFixedSizeException(string errorMessage) {}
    }

    public enum PoolExpandMethods
    {
        public const Zenject.PoolExpandMethods Disabled = 2;
        public const Zenject.PoolExpandMethods Double = 1;
        public const Zenject.PoolExpandMethods OneAtATime = 0;
        public int value__;
    }

    public class PoolWrapperFactory<T> : Zenject.IFactory, Zenject.IFactory<T> where T : System.IDisposable
    {
        public PoolWrapperFactory(Zenject.IMemoryPool<T> pool) {}
        public virtual T Create();
    }

    public class PoolWrapperFactory<TParam1, TValue> : Zenject.IFactory, Zenject.IFactory<TParam1, TValue> where TValue : System.IDisposable
    {
        public PoolWrapperFactory(Zenject.IMemoryPool<TParam1, TValue> pool) {}
        public virtual TValue Create(TParam1 arg);
    }

    [Zenject.NoReflectionBaking] public class PrefabBindingFinalizer : Zenject.ProviderBindingFinalizer
    {
        public PrefabBindingFinalizer(Zenject.BindInfo bindInfo, Zenject.GameObjectCreationParameters gameObjectBindInfo, UnityEngine.Object prefab, System.Func<System.Type, Zenject.IPrefabInstantiator, Zenject.IProvider> providerFactory) {}
        protected virtual void OnFinalizeBinding(Zenject.DiContainer container);
    }

    public class PrefabFactory<T> : Zenject.IFactory, Zenject.IFactory<UnityEngine.Object, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab);
    }

    public class PrefabFactory<P1, T> : Zenject.IFactory, Zenject.IFactory<UnityEngine.Object, P1, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab, P1 param);
    }

    public class PrefabFactory<P1, P2, T> : Zenject.IFactory, Zenject.IFactory<UnityEngine.Object, P1, P2, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab, P1 param, P2 param2);
    }

    public class PrefabFactory<P1, P2, P3, T> : Zenject.IFactory, Zenject.IFactory<UnityEngine.Object, P1, P2, P3, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab, P1 param, P2 param2, P3 param3);
    }

    public class PrefabFactory<P1, P2, P3, P4, T> : Zenject.IFactory, Zenject.IFactory<UnityEngine.Object, P1, P2, P3, P4, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabFactory() {}
        public virtual T Create(UnityEngine.Object prefab, P1 param, P2 param2, P3 param3, P4 param4);
    }

    [Zenject.NoReflectionBaking] public class PrefabGameObjectProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public PrefabGameObjectProvider(Zenject.IPrefabInstantiator prefabCreator) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class PrefabInstantiator : Zenject.IPrefabInstantiator
    {
        public virtual System.Type ArgumentTarget { get; }
        public virtual System.Collections.Generic.List<Zenject.TypeValuePair> ExtraArguments { get; }
        public virtual Zenject.GameObjectCreationParameters GameObjectCreationParameters { get; }
        public PrefabInstantiator(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Type argumentTarget, System.Collections.Generic.IEnumerable<System.Type> instantiateCallbackTypes, System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArguments, Zenject.IPrefabProvider prefabProvider, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        public virtual UnityEngine.Object GetPrefab(Zenject.InjectContext context);
        public virtual UnityEngine.GameObject Instantiate(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class PrefabInstantiatorCached : Zenject.IPrefabInstantiator
    {
        public virtual System.Type ArgumentTarget { get; }
        public virtual System.Collections.Generic.List<Zenject.TypeValuePair> ExtraArguments { get; }
        public virtual Zenject.GameObjectCreationParameters GameObjectCreationParameters { get; }
        public PrefabInstantiatorCached(Zenject.IPrefabInstantiator subInstantiator) {}
        public virtual UnityEngine.Object GetPrefab(Zenject.InjectContext context);
        public virtual UnityEngine.GameObject Instantiate(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class PrefabProvider : Zenject.IPrefabProvider
    {
        public PrefabProvider(UnityEngine.Object prefab) {}
        public virtual UnityEngine.Object GetPrefab(Zenject.InjectContext _);
    }

    [Zenject.NoReflectionBaking] public class PrefabProviderCustom : Zenject.IPrefabProvider
    {
        public PrefabProviderCustom(System.Func<Zenject.InjectContext, UnityEngine.Object> getter) {}
        public virtual UnityEngine.Object GetPrefab(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class PrefabProviderResource : Zenject.IPrefabProvider
    {
        public PrefabProviderResource(string resourcePath) {}
        public virtual UnityEngine.Object GetPrefab(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class PrefabResourceBindingFinalizer : Zenject.ProviderBindingFinalizer
    {
        public PrefabResourceBindingFinalizer(Zenject.BindInfo bindInfo, Zenject.GameObjectCreationParameters gameObjectBindInfo, string resourcePath, System.Func<System.Type, Zenject.IPrefabInstantiator, Zenject.IProvider> providerFactory) {}
        protected virtual void OnFinalizeBinding(Zenject.DiContainer container);
    }

    public class PrefabResourceFactory<T> : Zenject.IFactory, Zenject.IFactory<string, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName);
    }

    public class PrefabResourceFactory<P1, T> : Zenject.IFactory, Zenject.IFactory<string, P1, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName, P1 param);
    }

    public class PrefabResourceFactory<P1, P2, T> : Zenject.IFactory, Zenject.IFactory<string, P1, P2, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName, P1 param, P2 param2);
    }

    public class PrefabResourceFactory<P1, P2, P3, T> : Zenject.IFactory, Zenject.IFactory<string, P1, P2, P3, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName, P1 param, P2 param2, P3 param3);
    }

    public class PrefabResourceFactory<P1, P2, P3, P4, T> : Zenject.IFactory, Zenject.IFactory<string, P1, P2, P3, P4, T>
    {
        public Zenject.DiContainer Container { get; }
        public PrefabResourceFactory() {}
        public virtual T Create(string prefabResourceName, P1 param, P2 param2, P3 param3, P4 param4);
    }

    [Zenject.NoReflectionBaking] public class ProfileBlock : System.IDisposable
    {
        public static System.Text.RegularExpressions.Regex ProfilePattern { get; set; }
        public static System.Threading.Thread UnityMainThread { get; set; }
        public virtual void Dispose();
        public static Zenject.ProfileBlock Start(string sampleName);
        public static Zenject.ProfileBlock Start(string sampleNameFormat, object obj);
        public static Zenject.ProfileBlock Start(string sampleNameFormat, object obj1, object obj2);
    }

    public class ProjectContext : Zenject.Context
    {
        public const string ProjectContextResourcePath = ProjectContext;
        public const string ProjectContextResourcePathOld = ProjectCompositionRoot;
        public static event System.Action PostInstall;
        public static event System.Action PostResolve;
        public static event System.Action PreInstall;
        public static event System.Action PreResolve;
        public virtual Zenject.DiContainer Container { get; }
        public static bool HasInstance { get; }
        public static Zenject.ProjectContext Instance { get; }
        public bool ParentNewObjectsUnderContext { get; set; }
        public static bool ValidateOnNextRun { get; set; }
        public ProjectContext() {}
        public void Awake();
        public void EnsureIsInitialized();
        protected virtual void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        public static UnityEngine.GameObject TryGetPrefab();
    }

    public class ProjectKernel : Zenject.MonoKernel
    {
        public ProjectKernel() {}
        public void DestroyEverythingInOrder();
        public void ForceUnloadAllScenes(bool immediate = False);
        public void OnApplicationQuit();
    }

    [Zenject.NoReflectionBaking] public abstract class ProviderBindingFinalizer : Zenject.IBindingFinalizer
    {
        protected Zenject.BindInfo BindInfo { get; }
        public virtual Zenject.BindingInheritanceMethods BindingInheritanceMethod { get; }
        public ProviderBindingFinalizer(Zenject.BindInfo bindInfo) {}
        public virtual void FinalizeBinding(Zenject.DiContainer container);
        protected Zenject.ScopeTypes GetScope();
        protected abstract void OnFinalizeBinding(Zenject.DiContainer container);
        protected void RegisterProvider<TContract>(Zenject.DiContainer container, Zenject.IProvider provider);
        protected void RegisterProvider(Zenject.DiContainer container, System.Type contractType, Zenject.IProvider provider);
        protected void RegisterProviderForAllContracts(Zenject.DiContainer container, Zenject.IProvider provider);
        protected void RegisterProviderPerContract(Zenject.DiContainer container, System.Func<Zenject.DiContainer, System.Type, Zenject.IProvider> providerFunc);
        protected void RegisterProvidersForAllContractsPerConcreteType(Zenject.DiContainer container, System.Collections.Generic.List<System.Type> concreteTypes, System.Func<Zenject.DiContainer, System.Type, Zenject.IProvider> providerFunc);
        protected void RegisterProvidersPerContractAndConcreteType(Zenject.DiContainer container, System.Collections.Generic.List<System.Type> concreteTypes, System.Func<System.Type, System.Type, Zenject.IProvider> providerFunc);
    }

    public static class ProviderUtil
    {
        public static System.Type GetTypeToInstantiate(System.Type contractType, System.Type concreteType);
    }

    public enum ReflectionBakingCoverageModes
    {
        public const Zenject.ReflectionBakingCoverageModes FallbackToDirectReflection = 0;
        public const Zenject.ReflectionBakingCoverageModes FallbackToDirectReflectionWithWarning = 2;
        public const Zenject.ReflectionBakingCoverageModes NoCheckAssumeFullCoverage = 1;
        public int value__;
    }

    [Zenject.NoReflectionBaking] public class ResolveProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public ResolveProvider(System.Type contractType, Zenject.DiContainer container, object identifier, bool isOptional, Zenject.InjectSources source, bool matchAll) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class ResourceProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public ResourceProvider(string resourcePath, System.Type resourceType, bool matchSingle) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    public enum RootResolveMethods
    {
        public const Zenject.RootResolveMethods All = 1;
        public const Zenject.RootResolveMethods NonLazyOnly = 0;
        public int value__;
    }

    public abstract class RunnableContext : Zenject.Context
    {
        public bool Initialized { get; }
        protected RunnableContext() {}
        public static T CreateComponent<T>(UnityEngine.GameObject gameObject) where T : Zenject.RunnableContext;
        protected void Initialize();
        public void Run();
        protected abstract void RunInternal();
    }

    public class SceneContext : Zenject.RunnableContext
    {
        public static System.Action<Zenject.DiContainer> ExtraBindingsInstallMethod;
        public static System.Action<Zenject.DiContainer> ExtraBindingsLateInstallMethod;
        public UnityEngine.Events.UnityEvent OnPostInstall;
        public UnityEngine.Events.UnityEvent OnPostResolve;
        public UnityEngine.Events.UnityEvent OnPreInstall;
        public UnityEngine.Events.UnityEvent OnPreResolve;
        public static System.Collections.Generic.IEnumerable<Zenject.DiContainer> ParentContainers;
        public event System.Action PostInstall;
        public event System.Action PostResolve;
        public event System.Action PreInstall;
        public event System.Action PreResolve;
        public virtual Zenject.DiContainer Container { get; }
        public System.Collections.Generic.IEnumerable<string> ContractNames { get; set; }
        public bool HasInstalled { get; }
        public bool HasResolved { get; }
        public bool IsValidating { get; }
        public System.Collections.Generic.IEnumerable<string> ParentContractNames { get; set; }
        public bool ParentNewObjectsUnderSceneContext { get; set; }
        public SceneContext() {}
        public void Awake();
        public static Zenject.SceneContext Create();
        protected virtual void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        public void Install();
        public void Resolve();
        protected virtual void RunInternal();
        public void Validate();
    }

    public class SceneContextRegistry
    {
        public System.Collections.Generic.IEnumerable<Zenject.SceneContext> SceneContexts { get; }
        public SceneContextRegistry() {}
        public void Add(Zenject.SceneContext context);
        public Zenject.DiContainer GetContainerForScene(UnityEngine.SceneManagement.Scene scene);
        public Zenject.SceneContext GetSceneContextForScene(string name);
        public Zenject.SceneContext GetSceneContextForScene(UnityEngine.SceneManagement.Scene scene);
        public void Remove(Zenject.SceneContext context);
        public Zenject.DiContainer TryGetContainerForScene(UnityEngine.SceneManagement.Scene scene);
        public Zenject.SceneContext TryGetSceneContextForScene(string name);
        public Zenject.SceneContext TryGetSceneContextForScene(UnityEngine.SceneManagement.Scene scene);
    }

    public class SceneContextRegistryAdderAndRemover : System.IDisposable, Zenject.IInitializable
    {
        public SceneContextRegistryAdderAndRemover(Zenject.SceneContext sceneContext, Zenject.SceneContextRegistry registry) {}
        public virtual void Dispose();
        public virtual void Initialize();
    }

    public class SceneDecoratorContext : Zenject.Context
    {
        public virtual Zenject.DiContainer Container { get; }
        public string DecoratedContractName { get; }
        public System.Collections.Generic.IEnumerable<Zenject.MonoInstaller> LateInstallerPrefabs { get; set; }
        public System.Collections.Generic.IEnumerable<Zenject.MonoInstaller> LateInstallers { get; set; }
        public System.Collections.Generic.IEnumerable<Zenject.ScriptableObjectInstaller> LateScriptableObjectInstallers { get; set; }
        public SceneDecoratorContext() {}
        protected virtual void GetInjectableMonoBehaviours(System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects();
        public void Initialize(Zenject.DiContainer container);
        public void InstallDecoratorInstallers();
        public void InstallDecoratorSceneBindings();
        public void InstallLateDecoratorInstallers();
    }

    public class SceneKernel : Zenject.MonoKernel
    {
        public SceneKernel() {}
    }

    [Zenject.NoReflectionBaking] public class ScopableBindingFinalizer : Zenject.ProviderBindingFinalizer
    {
        public ScopableBindingFinalizer(Zenject.BindInfo bindInfo, System.Func<Zenject.DiContainer, System.Type, Zenject.IProvider> providerFactory) {}
        protected virtual void OnFinalizeBinding(Zenject.DiContainer container);
    }

    [Zenject.NoReflectionBaking] public class ScopeConcreteIdArgConditionCopyNonLazyBinder : Zenject.ConcreteIdArgConditionCopyNonLazyBinder
    {
        public ScopeConcreteIdArgConditionCopyNonLazyBinder(Zenject.BindInfo bindInfo) {}
        public Zenject.ConcreteIdArgConditionCopyNonLazyBinder AsCached();
        public Zenject.ConcreteIdArgConditionCopyNonLazyBinder AsSingle();
        public Zenject.ConcreteIdArgConditionCopyNonLazyBinder AsTransient();
    }

    public enum ScopeTypes
    {
        public const Zenject.ScopeTypes Singleton = 2;
        public const Zenject.ScopeTypes Transient = 1;
        public const Zenject.ScopeTypes Unset = 0;
        public int value__;
    }

    public class ScriptableObjectInstaller : Zenject.ScriptableObjectInstallerBase
    {
        public ScriptableObjectInstaller() {}
    }

    public class ScriptableObjectInstaller<TDerived> : Zenject.ScriptableObjectInstaller where TDerived : Zenject.ScriptableObjectInstaller<TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container);
    }

    public class ScriptableObjectInstaller<TParam1, TDerived> : Zenject.ScriptableObjectInstallerBase where TDerived : Zenject.ScriptableObjectInstaller<TParam1, TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container, TParam1 p1);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, TParam1 p1);
    }

    public class ScriptableObjectInstaller<TParam1, TParam2, TDerived> : Zenject.ScriptableObjectInstallerBase where TDerived : Zenject.ScriptableObjectInstaller<TParam1, TParam2, TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container, TParam1 p1, TParam2 p2);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, TParam1 p1, TParam2 p2);
    }

    public class ScriptableObjectInstaller<TParam1, TParam2, TParam3, TDerived> : Zenject.ScriptableObjectInstallerBase where TDerived : Zenject.ScriptableObjectInstaller<TParam1, TParam2, TParam3, TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3);
    }

    public class ScriptableObjectInstaller<TParam1, TParam2, TParam3, TParam4, TDerived> : Zenject.ScriptableObjectInstallerBase where TDerived : Zenject.ScriptableObjectInstaller<TParam1, TParam2, TParam3, TParam4, TDerived>
    {
        public ScriptableObjectInstaller() {}
        public static TDerived InstallFromResource(Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
        public static TDerived InstallFromResource(string resourcePath, Zenject.DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
    }

    public class ScriptableObjectInstallerBase : UnityEngine.ScriptableObject, Zenject.IInstaller
    {
        protected Zenject.DiContainer Container { get; }
        public ScriptableObjectInstallerBase() {}
        public virtual void InstallBindings();
    }

    public static class ScriptableObjectInstallerUtil
    {
        public static TInstaller CreateInstaller<TInstaller>(string resourcePath, Zenject.DiContainer container) where TInstaller : Zenject.ScriptableObjectInstallerBase;
        public static string GetDefaultResourcePath<TInstaller>() where TInstaller : Zenject.ScriptableObjectInstallerBase;
    }

    [Zenject.NoReflectionBaking] public class ScriptableObjectInstanceProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public ScriptableObjectInstanceProvider(UnityEngine.Object resource, System.Type resourceType, Zenject.DiContainer container, System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArguments, bool createNew, object concreteIdentifier, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class ScriptableObjectResourceProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public ScriptableObjectResourceProvider(string resourcePath, System.Type resourceType, Zenject.DiContainer container, System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArguments, bool createNew, object concreteIdentifier, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SignalBindingBindInfo
    {
        public object Identifier { get; set; }
        public System.Type SignalType { get; }
        public SignalBindingBindInfo(System.Type signalType) {}
    }

    public class SignalBus : Zenject.ILateDisposable
    {
        public int NumSubscribers { get; }
        public Zenject.SignalBus ParentBus { get; }
        public SignalBus([Zenject.Inject(Source = 1)] System.Collections.Generic.List<Zenject.SignalDeclaration> signalDeclarations, [Zenject.Inject(Optional = true, Source = 2)] Zenject.SignalBus parentBus, [Zenject.InjectOptional] Zenject.ZenjectSettings zenjectSettings, Zenject.SignalSubscription.Pool subscriptionPool, Zenject.SignalDeclaration.Factory signalDeclarationFactory, Zenject.DiContainer container) {}
        public void AbstractFire<TSignal>() where TSignal : new();
        public void AbstractFire<TSignal>(TSignal signal);
        public void AbstractFireId<TSignal>(object identifier, TSignal signal);
        public void DeclareSignal<T>(object identifier = default(object), System.Nullable<Zenject.SignalMissingHandlerResponses> missingHandlerResponse = default(System.Nullable<Zenject.SignalMissingHandlerResponses>), System.Nullable<bool> forceAsync = default(System.Nullable<bool>), System.Nullable<int> asyncTickPriority = default(System.Nullable<int>));
        public void DeclareSignal(System.Type signalType, object identifier = default(object), System.Nullable<Zenject.SignalMissingHandlerResponses> missingHandlerResponse = default(System.Nullable<Zenject.SignalMissingHandlerResponses>), System.Nullable<bool> forceAsync = default(System.Nullable<bool>), System.Nullable<int> asyncTickPriority = default(System.Nullable<int>));
        public void Fire<TSignal>();
        public void Fire(object signal);
        public void Fire<TSignal>(TSignal signal);
        public void FireId<TSignal>(object identifier);
        public void FireId(object identifier, object signal);
        public void FireId<TSignal>(object identifier, TSignal signal);
        public bool IsSignalDeclared<TSignal>();
        public bool IsSignalDeclared<TSignal>(object identifier);
        public bool IsSignalDeclared(System.Type signalType);
        public bool IsSignalDeclared(System.Type signalType, object identifier);
        public virtual void LateDispose();
        public void Subscribe<TSignal>(System.Action callback);
        public void Subscribe<TSignal>(System.Action<TSignal> callback);
        public void Subscribe(System.Type signalType, System.Action<object> callback);
        public void SubscribeId<TSignal>(object identifier, System.Action callback);
        public void SubscribeId<TSignal>(object identifier, System.Action<TSignal> callback);
        public void SubscribeId(System.Type signalType, object identifier, System.Action<object> callback);
        public void TryFire<TSignal>();
        public void TryFire(object signal);
        public void TryFire<TSignal>(TSignal signal);
        public void TryFireId<TSignal>(object identifier);
        public void TryFireId(object identifier, object signal);
        public void TryFireId<TSignal>(object identifier, TSignal signal);
        public void TryUnsubscribe<TSignal>(System.Action callback);
        public void TryUnsubscribe<TSignal>(System.Action<TSignal> callback);
        public void TryUnsubscribe(System.Type signalType, System.Action callback);
        public void TryUnsubscribe(System.Type signalType, System.Action<object> callback);
        public void TryUnsubscribeId<TSignal>(object identifier, System.Action callback);
        public void TryUnsubscribeId<TSignal>(object identifier, System.Action<TSignal> callback);
        public void TryUnsubscribeId(System.Type signalType, object identifier, System.Action callback);
        public void TryUnsubscribeId(System.Type signalType, object identifier, System.Action<object> callback);
        public void Unsubscribe<TSignal>(System.Action callback);
        public void Unsubscribe<TSignal>(System.Action<TSignal> callback);
        public void Unsubscribe(System.Type signalType, System.Action callback);
        public void Unsubscribe(System.Type signalType, System.Action<object> callback);
        public void UnsubscribeId<TSignal>(object identifier, System.Action callback);
        public void UnsubscribeId<TSignal>(object identifier, System.Action<TSignal> callback);
        public void UnsubscribeId(System.Type signalType, object identifier, System.Action callback);
        public void UnsubscribeId(System.Type signalType, object identifier, System.Action<object> callback);
    }

    public class SignalBusInstaller : Zenject.Installer<Zenject.SignalBusInstaller>
    {
        public SignalBusInstaller() {}
        public virtual void InstallBindings();
    }

    public class SignalCallbackWithLookupWrapper : System.IDisposable
    {
        public SignalCallbackWithLookupWrapper(Zenject.SignalBindingBindInfo signalBindInfo, System.Type objectType, System.Guid lookupId, System.Func<object, System.Action<object>> methodGetter, Zenject.SignalBus signalBus, Zenject.DiContainer container) {}
        public virtual void Dispose();
    }

    public class SignalCallbackWrapper : System.IDisposable
    {
        public SignalCallbackWrapper(Zenject.SignalBindingBindInfo bindInfo, System.Action<object> action, Zenject.SignalBus signalBus) {}
        public virtual void Dispose();
    }

    [Zenject.NoReflectionBaking] public class SignalCopyBinder
    {
        public SignalCopyBinder() {}
        public SignalCopyBinder(Zenject.BindInfo bindInfo) {}
        public void AddCopyBindInfo(Zenject.BindInfo bindInfo);
        public void CopyIntoAllSubContainers();
        public void CopyIntoDirectSubContainers();
        public void MoveIntoAllSubContainers();
        public void MoveIntoDirectSubContainers();
    }

    public class SignalDeclaration : System.IDisposable, Zenject.ITickable
    {
        public Zenject.BindingId BindingId { get; }
        public bool IsAsync { get; }
        public System.Collections.Generic.List<Zenject.SignalSubscription> Subscriptions { get; }
        public int TickPriority { get; }
        public SignalDeclaration(Zenject.SignalDeclarationBindInfo bindInfo, [Zenject.InjectOptional] Zenject.ZenjectSettings zenjectSettings) {}
        public void Add(Zenject.SignalSubscription subscription);
        public virtual void Dispose();
        public void Fire(object signal);
        public void Remove(Zenject.SignalSubscription subscription);
        public virtual void Tick();
        public class Factory : Zenject.PlaceholderFactory<Zenject.SignalDeclarationBindInfo, Zenject.SignalDeclaration>
        {
            public Factory() {}
        }
    }

    public class SignalDeclarationAsyncInitializer : Zenject.IInitializable
    {
        public SignalDeclarationAsyncInitializer([Zenject.Inject(Source = 1)] System.Collections.Generic.List<Zenject.SignalDeclaration> declarations, [Zenject.Inject(Optional = true, Source = 1)] Zenject.LazyInject<Zenject.TickableManager> tickManager) {}
        public virtual void Initialize();
    }

    [Zenject.NoReflectionBaking] public class SignalDeclarationBindInfo
    {
        public object Identifier { get; set; }
        public Zenject.SignalMissingHandlerResponses MissingHandlerResponse { get; set; }
        public bool RunAsync { get; set; }
        public System.Type SignalType { get; }
        public int TickPriority { get; set; }
        public SignalDeclarationBindInfo(System.Type signalType) {}
    }

    public enum SignalDefaultSyncModes
    {
        public const Zenject.SignalDefaultSyncModes Asynchronous = 1;
        public const Zenject.SignalDefaultSyncModes Synchronous = 0;
        public int value__;
    }

    [System.Runtime.CompilerServices.Extension] public static class SignalExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static Zenject.BindSignalIdToBinder<TSignal> BindSignal<TSignal>(Zenject.DiContainer container);
        public static Zenject.SignalDeclarationBindInfo CreateDefaultSignalDeclarationBindInfo(Zenject.DiContainer container, System.Type signalType);
        [System.Runtime.CompilerServices.Extension] public static Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignal<TSignal>(Zenject.DiContainer container);
        [System.Runtime.CompilerServices.Extension] public static Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignal(Zenject.DiContainer container, System.Type type);
        [System.Runtime.CompilerServices.Extension] public static Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignalWithInterfaces<TSignal>(Zenject.DiContainer container);
    }

    public enum SignalMissingHandlerResponses
    {
        public const Zenject.SignalMissingHandlerResponses Ignore = 0;
        public const Zenject.SignalMissingHandlerResponses Throw = 1;
        public int value__;
        public const Zenject.SignalMissingHandlerResponses Warn = 2;
    }

    public class SignalSubscription : System.IDisposable, Zenject.IPoolable<System.Action<object>, Zenject.SignalDeclaration>
    {
        public Zenject.BindingId SignalId { get; }
        public SignalSubscription(Zenject.SignalSubscription.Pool pool) {}
        public virtual void Dispose();
        public void Invoke(object signal);
        public void OnDeclarationDespawned();
        public virtual void OnDespawned();
        public virtual void OnSpawned(System.Action<object> callback, Zenject.SignalDeclaration declaration);
        public class Pool : Zenject.PoolableMemoryPool<System.Action<object>, Zenject.SignalDeclaration, Zenject.SignalSubscription>
        {
            public Pool() {}
        }
    }

    [System.Diagnostics.DebuggerStepThrough] public struct SignalSubscriptionId : System.IEquatable<Zenject.SignalSubscriptionId>
    {
        public object Callback { get; }
        public Zenject.BindingId SignalId { get; }
        public SignalSubscriptionId(Zenject.BindingId signalId, object callback) {}
        public virtual bool Equals(object that);
        public virtual bool Equals(Zenject.SignalSubscriptionId that);
        public virtual int GetHashCode();
        public static bool operator ==(Zenject.SignalSubscriptionId left, Zenject.SignalSubscriptionId right);
        public static bool operator !=(Zenject.SignalSubscriptionId left, Zenject.SignalSubscriptionId right);
    }

    [Zenject.NoReflectionBaking] public class SignalTickPriorityCopyBinder : Zenject.SignalCopyBinder
    {
        protected Zenject.SignalDeclarationBindInfo SignalBindInfo { get; }
        public SignalTickPriorityCopyBinder(Zenject.SignalDeclarationBindInfo signalBindInfo) {}
        public Zenject.SignalCopyBinder WithTickPriority(int priority);
    }

    [Zenject.NoReflectionBaking] public class SingleProviderBindingFinalizer : Zenject.ProviderBindingFinalizer
    {
        public SingleProviderBindingFinalizer(Zenject.BindInfo bindInfo, System.Func<Zenject.DiContainer, System.Type, Zenject.IProvider> providerFactory) {}
        protected virtual void OnFinalizeBinding(Zenject.DiContainer container);
    }

    public static class StaticContext
    {
        public static Zenject.DiContainer Container { get; }
        public static bool HasContainer { get; }
        public static void Clear();
    }

    [Zenject.NoReflectionBaking] public class StaticMemoryPool<TValue> : Zenject.StaticMemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TValue> where TValue : class, new()
    {
        public System.Action<TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TValue> onSpawnMethod = default(System.Action<TValue>), System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public virtual TValue Spawn();
    }

    [Zenject.NoReflectionBaking] public class StaticMemoryPool<TParam1, TValue> : Zenject.StaticMemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public virtual TValue Spawn(TParam1 param);
    }

    [Zenject.NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TValue> : Zenject.StaticMemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TParam2, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TParam2, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public virtual TValue Spawn(TParam1 p1, TParam2 p2);
    }

    [Zenject.NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TValue> : Zenject.StaticMemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TParam2, TParam3, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TParam2, TParam3, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public virtual TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3);
    }

    [Zenject.NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : Zenject.StaticMemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TParam2, TParam3, TParam4, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TParam2, TParam3, TParam4, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public virtual TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4);
    }

    [Zenject.NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : Zenject.StaticMemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public virtual TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5);
    }

    [Zenject.NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : Zenject.StaticMemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public virtual TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6);
    }

    [Zenject.NoReflectionBaking] public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : Zenject.StaticMemoryPoolBase<TValue>, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool, Zenject.IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> where TValue : class, new()
    {
        public System.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> OnSpawnMethod { set; }
        public StaticMemoryPool(System.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> onSpawnMethod, System.Action<TValue> onDespawnedMethod = default(System.Action<TValue>)) {}
        public virtual TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7);
    }

    [Zenject.NoReflectionBaking] public abstract class StaticMemoryPoolBase<TValue> : Zenject.StaticMemoryPoolBaseBase<TValue> where TValue : class, new()
    {
        public StaticMemoryPoolBase(System.Action<TValue> onDespawnedMethod) {}
        protected virtual TValue Alloc();
    }

    [Zenject.NoReflectionBaking] public abstract class StaticMemoryPoolBaseBase<TValue> : System.IDisposable, Zenject.IDespawnableMemoryPool<TValue>, Zenject.IMemoryPool where TValue : class
    {
        public virtual System.Type ItemType { get; }
        public virtual int NumActive { get; }
        public virtual int NumInactive { get; }
        public virtual int NumTotal { get; }
        public System.Action<TValue> OnDespawnedMethod { set; }
        public StaticMemoryPoolBaseBase(System.Action<TValue> onDespawnedMethod) {}
        protected abstract TValue Alloc();
        public virtual void Clear();
        public void ClearActiveCount();
        public virtual void Despawn(TValue element);
        public virtual void Dispose();
        public virtual void ExpandBy(int numToAdd);
        public virtual void Resize(int desiredPoolSize);
        public virtual void ShrinkBy(int numToRemove);
        protected TValue SpawnInternal();
    }

    public static class StaticMemoryPoolRegistry
    {
        public static event System.Action<Zenject.IMemoryPool> PoolAdded;
        public static event System.Action<Zenject.IMemoryPool> PoolRemoved;
        public static System.Collections.Generic.IEnumerable<Zenject.IMemoryPool> Pools { get; }
        public static void Add(Zenject.IMemoryPool memoryPool);
        public static void Remove(Zenject.IMemoryPool memoryPool);
    }

    [Zenject.NoReflectionBaking] public class SubContainerBinder
    {
        protected Zenject.IBindingFinalizer SubFinalizer { set; }
        public SubContainerBinder(Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement, object subIdentifier, bool resolveAll) {}
        public Zenject.WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller<TInstaller>() where TInstaller : Zenject.InstallerBase;
        public Zenject.WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller(System.Type installerType);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstance(Zenject.DiContainer subContainer);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstanceGetter(System.Func<Zenject.InjectContext, Zenject.DiContainer> subContainerGetter);
        public Zenject.WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(System.Action<Zenject.DiContainer> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab(UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource(string resourcePath);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller<TInstaller>() where TInstaller : Zenject.InstallerBase;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller(System.Type installerType);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(System.Action<Zenject.DiContainer> installerMethod);
        [System.Obsolete(@"ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")] public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab(UnityEngine.Object prefab);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter) where TInstaller : Zenject.InstallerBase;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(UnityEngine.Object prefab) where TInstaller : Zenject.InstallerBase;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Type installerType);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(UnityEngine.Object prefab, System.Type installerType);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(System.Func<Zenject.InjectContext, UnityEngine.Object> prefabGetter, System.Action<Zenject.DiContainer> installerMethod);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(UnityEngine.Object prefab, System.Action<Zenject.DiContainer> installerMethod);
        [System.Obsolete(@"ByNewPrefabResource has been renamed to ByNewContextPrefabResource to avoid confusion with ByNewPrefabResourceInstaller and ByNewPrefabResourceMethod")] public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource(string resourcePath);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller<TInstaller>(string resourcePath) where TInstaller : Zenject.InstallerBase;
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller(string resourcePath, System.Type installerType);
        public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(string resourcePath, System.Action<Zenject.DiContainer> installerMethod);
    }

    [Zenject.NoReflectionBaking] public class SubContainerBindingFinalizer : Zenject.ProviderBindingFinalizer
    {
        public SubContainerBindingFinalizer(Zenject.BindInfo bindInfo, object subIdentifier, bool resolveAll, System.Func<Zenject.DiContainer, Zenject.ISubContainerCreator> creatorFactory) {}
        protected virtual void OnFinalizeBinding(Zenject.DiContainer container);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorBindInfo
    {
        public bool CreateKernel { get; set; }
        public string DefaultParentName { get; set; }
        public System.Type KernelType { get; set; }
        public SubContainerCreatorBindInfo() {}
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByInstaller : Zenject.ISubContainerCreator
    {
        public SubContainerCreatorByInstaller(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Type installerType) {}
        public SubContainerCreatorByInstaller(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Type installerType, System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArgs) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByInstance : Zenject.ISubContainerCreator
    {
        public SubContainerCreatorByInstance(Zenject.DiContainer subcontainer) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByInstanceGetter : Zenject.ISubContainerCreator
    {
        public SubContainerCreatorByInstanceGetter(System.Func<Zenject.InjectContext, Zenject.DiContainer> subcontainerGetter) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByMethod : Zenject.SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Action<Zenject.DiContainer> installMethod) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1> : Zenject.SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Action<Zenject.DiContainer, TParam1> installMethod) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : Zenject.SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installMethod) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2> : Zenject.SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2> installMethod) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3> : Zenject.SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3> installMethod) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4> : Zenject.SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4> installMethod) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : Zenject.SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installMethod) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : Zenject.SubContainerCreatorByMethodBase
    {
        public SubContainerCreatorByMethod(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installMethod) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public abstract class SubContainerCreatorByMethodBase : Zenject.ISubContainerCreator
    {
        public SubContainerCreatorByMethodBase(Zenject.DiContainer container, Zenject.SubContainerCreatorBindInfo containerBindInfo) {}
        protected Zenject.DiContainer CreateEmptySubContainer();
        public abstract Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public abstract class SubContainerCreatorByNewGameObjectDynamicContext : Zenject.SubContainerCreatorDynamicContext
    {
        public SubContainerCreatorByNewGameObjectDynamicContext(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo) {}
        protected virtual UnityEngine.GameObject CreateGameObject(Zenject.InjectContext context, out bool shouldMakeActive);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewGameObjectInstaller : Zenject.SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectInstaller(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Type installerType, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod : Zenject.SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1> : Zenject.SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : Zenject.SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2> : Zenject.SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3> : Zenject.SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4> : Zenject.SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : Zenject.SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : Zenject.SubContainerCreatorByNewGameObjectDynamicContext
    {
        public SubContainerCreatorByNewGameObjectMethod(Zenject.DiContainer container, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefab : Zenject.ISubContainerCreator
    {
        public SubContainerCreatorByNewPrefab(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext parentContext, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public abstract class SubContainerCreatorByNewPrefabDynamicContext : Zenject.SubContainerCreatorDynamicContext
    {
        public SubContainerCreatorByNewPrefabDynamicContext(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo) {}
        protected virtual UnityEngine.GameObject CreateGameObject(Zenject.InjectContext context, out bool shouldMakeActive);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabInstaller : Zenject.SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabInstaller(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Type installerType, System.Collections.Generic.List<Zenject.TypeValuePair> extraArgs) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod : Zenject.SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1> : Zenject.SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : Zenject.SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2> : Zenject.SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3> : Zenject.SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4> : Zenject.SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : Zenject.SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : Zenject.SubContainerCreatorByNewPrefabDynamicContext
    {
        public SubContainerCreatorByNewPrefabMethod(Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo, System.Action<Zenject.DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod) {}
        protected virtual void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorByNewPrefabWithParams : Zenject.ISubContainerCreator
    {
        protected Zenject.DiContainer Container { get; }
        public SubContainerCreatorByNewPrefabWithParams(System.Type installerType, Zenject.DiContainer container, Zenject.IPrefabProvider prefabProvider, Zenject.GameObjectCreationParameters gameObjectBindInfo) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext parentContext, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public class SubContainerCreatorCached : Zenject.ISubContainerCreator
    {
        public SubContainerCreatorCached(Zenject.ISubContainerCreator subCreator) {}
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext context, out System.Action injectAction);
    }

    [Zenject.NoReflectionBaking] public abstract class SubContainerCreatorDynamicContext : Zenject.ISubContainerCreator
    {
        protected Zenject.DiContainer Container { get; }
        public SubContainerCreatorDynamicContext(Zenject.DiContainer container) {}
        protected abstract void AddInstallers(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.GameObjectContext context);
        protected abstract UnityEngine.GameObject CreateGameObject(Zenject.InjectContext context, out bool shouldMakeActive);
        public virtual Zenject.DiContainer CreateSubContainer(System.Collections.Generic.List<Zenject.TypeValuePair> args, Zenject.InjectContext parentContext, out System.Action injectAction);
    }

    public static class SubContainerCreatorUtil
    {
        public static void ApplyBindSettings(Zenject.SubContainerCreatorBindInfo subContainerBindInfo, Zenject.DiContainer subContainer);
    }

    [Zenject.NoReflectionBaking] public class SubContainerDependencyProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public SubContainerDependencyProvider(System.Type dependencyType, object identifier, Zenject.ISubContainerCreator subContainerCreator, bool resolveAll) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    [Zenject.NoReflectionBaking] public class SubContainerPrefabBindingFinalizer : Zenject.ProviderBindingFinalizer
    {
        public SubContainerPrefabBindingFinalizer(Zenject.BindInfo bindInfo, object subIdentifier, bool resolveAll, System.Func<Zenject.DiContainer, Zenject.ISubContainerCreator> subContainerCreatorFactory) {}
        protected virtual void OnFinalizeBinding(Zenject.DiContainer container);
    }

    [System.Diagnostics.DebuggerStepThrough] public abstract class TaskUpdater<TTask>
    {
        protected TaskUpdater() {}
        public void AddTask(TTask task, int priority);
        public void OnFrameStart();
        public void RemoveTask(TTask task);
        public void UpdateAll();
        protected abstract void UpdateItem(TTask task);
        public void UpdateRange(int minPriority, int maxPriority);
    }

    public class TickableManager
    {
        public bool IsPaused { get; set; }
        public System.Collections.Generic.IEnumerable<Zenject.ITickable> Tickables { get; }
        [Zenject.Inject] public TickableManager() {}
        public void Add(Zenject.ITickable tickable);
        public void Add(Zenject.ITickable tickable, int priority);
        public void AddFixed(Zenject.IFixedTickable tickable);
        public void AddFixed(Zenject.IFixedTickable tickable, int priority);
        public void AddLate(Zenject.ILateTickable tickable);
        public void AddLate(Zenject.ILateTickable tickable, int priority);
        public void FixedUpdate();
        [Zenject.Inject] public void Initialize();
        public void LateUpdate();
        public void Remove(Zenject.ITickable tickable);
        public void RemoveFixed(Zenject.IFixedTickable tickable);
        public void RemoveLate(Zenject.ILateTickable tickable);
        public void Update();
    }

    public class TickablesTaskUpdater : Zenject.TaskUpdater<Zenject.ITickable>
    {
        public TickablesTaskUpdater() {}
        protected virtual void UpdateItem(Zenject.ITickable task);
    }

    public enum ToChoices
    {
        public const Zenject.ToChoices Concrete = 1;
        public const Zenject.ToChoices Self = 0;
        public int value__;
    }

    [Zenject.NoReflectionBaking] public class TransformScopeConcreteIdArgConditionCopyNonLazyBinder : Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        protected Zenject.GameObjectCreationParameters GameObjectInfo { get; }
        public TransformScopeConcreteIdArgConditionCopyNonLazyBinder(Zenject.BindInfo bindInfo, Zenject.GameObjectCreationParameters gameObjectInfo) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder UnderTransform(System.Func<Zenject.InjectContext, UnityEngine.Transform> parentGetter);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder UnderTransform(UnityEngine.Transform parent);
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder UnderTransformGroup(string transformGroupname);
    }

    [Zenject.NoReflectionBaking] public class TransientProvider : Zenject.IProvider
    {
        public virtual bool IsCached { get; }
        public virtual bool TypeVariesBasedOnMemberType { get; }
        public TransientProvider(System.Type concreteType, Zenject.DiContainer container, System.Collections.Generic.IEnumerable<Zenject.TypeValuePair> extraArguments, string bindingContext, object concreteIdentifier, System.Action<Zenject.InjectContext, object> instantiateCallback) {}
        public virtual void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List<object> buffer);
        public virtual System.Type GetInstanceType(Zenject.InjectContext context);
    }

    public static class TypeAnalyzer
    {
        public const string ReflectionBakingFactoryMethodName = __zenCreate;
        public const string ReflectionBakingFieldSetterPrefix = __zenFieldSetter;
        public const string ReflectionBakingGetInjectInfoMethodName = __zenCreateInjectTypeInfo;
        public const string ReflectionBakingInjectMethodPrefix = __zenInjectMethod;
        public const string ReflectionBakingPropertySetterPrefix = __zenPropertySetter;
        public static Zenject.ReflectionBakingCoverageModes ReflectionBakingCoverageMode { get; set; }
        public static Zenject.InjectTypeInfo GetInfo<T>();
        public static Zenject.InjectTypeInfo GetInfo(System.Type type);
        public static bool HasInfo<T>();
        public static bool HasInfo(System.Type type);
        public static bool ShouldAllowDuringValidation<T>();
        public static bool ShouldAllowDuringValidation(System.Type type);
        public static bool ShouldSkipTypeAnalysis(System.Type type);
        public static Zenject.InjectTypeInfo TryGetInfo<T>();
        public static Zenject.InjectTypeInfo TryGetInfo(System.Type type);
    }

    [System.Diagnostics.DebuggerStepThrough] public struct TypeValuePair
    {
        public System.Type Type;
        public object Value;
        public TypeValuePair(System.Type type, object value) {}
    }

    public enum ValidationErrorResponses
    {
        public const Zenject.ValidationErrorResponses Log = 0;
        public const Zenject.ValidationErrorResponses Throw = 1;
        public int value__;
    }

    [Zenject.NoReflectionBaking] public class ValidationMarker
    {
        public bool InstantiateFailed { get; }
        public System.Type MarkedType { get; }
        public ValidationMarker(System.Type markedType) {}
        public ValidationMarker(System.Type markedType, bool instantiateFailed) {}
    }

    public static class ValidationUtil
    {
        public static System.Collections.Generic.List<Zenject.TypeValuePair> CreateDefaultArgs(params System.Type[] argTypes);
    }

    [Zenject.NoReflectionBaking] public class WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder : Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder(Zenject.SubContainerCreatorBindInfo subContainerBindInfo, Zenject.BindInfo bindInfo) {}
        public Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel();
        public Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel<TKernel>() where TKernel : Zenject.Kernel;
    }

    [Zenject.NoReflectionBaking] public class WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder : Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder
    {
        public WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder(Zenject.SubContainerCreatorBindInfo subContainerBindInfo, Zenject.BindInfo bindInfo) {}
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel();
        public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel<TKernel>() where TKernel : Zenject.Kernel;
    }

    public class ZenAutoInjecter : UnityEngine.MonoBehaviour
    {
        public Zenject.ZenAutoInjecter.ContainerSources ContainerSource { get; set; }
        public ZenAutoInjecter() {}
        public void Awake();
        [Zenject.Inject] public void Construct();
        public enum ContainerSources
        {
            public const Zenject.ZenAutoInjecter.ContainerSources ProjectContext = 1;
            public const Zenject.ZenAutoInjecter.ContainerSources SceneContext = 0;
            public const Zenject.ZenAutoInjecter.ContainerSources SearchHierarchy = 2;
            public int value__;
        }
    }

    public class ZenjectBinding : UnityEngine.MonoBehaviour
    {
        public Zenject.ZenjectBinding.BindTypes BindType { get; }
        public UnityEngine.Component[] Components { get; }
        public Zenject.Context Context { get; set; }
        public string Identifier { get; }
        public bool UseSceneContext { get; }
        public ZenjectBinding() {}
        public void Start();
        public enum BindTypes
        {
            public const Zenject.ZenjectBinding.BindTypes AllInterfaces = 1;
            public const Zenject.ZenjectBinding.BindTypes AllInterfacesAndSelf = 2;
            public const Zenject.ZenjectBinding.BindTypes BaseType = 3;
            public const Zenject.ZenjectBinding.BindTypes Self = 0;
            public int value__;
        }
    }

    [System.Diagnostics.DebuggerStepThrough] [Zenject.NoReflectionBaking] public class ZenjectException : System.Exception
    {
        public ZenjectException(string message) {}
        public ZenjectException(string message, System.Exception innerException) {}
    }

    public class ZenjectManagersInstaller : Zenject.Installer<Zenject.ZenjectManagersInstaller>
    {
        public ZenjectManagersInstaller() {}
        public virtual void InstallBindings();
    }

    public class ZenjectSceneLoader
    {
        public ZenjectSceneLoader([Zenject.InjectOptional] Zenject.SceneContext sceneRoot, Zenject.ProjectKernel projectKernel) {}
        public void LoadScene(int sceneIndex, UnityEngine.SceneManagement.LoadSceneMode loadMode = 0, System.Action<Zenject.DiContainer> extraBindings = default(System.Action<Zenject.DiContainer>), Zenject.LoadSceneRelationship containerMode = 0, System.Action<Zenject.DiContainer> extraBindingsLate = default(System.Action<Zenject.DiContainer>));
        public void LoadScene(string sceneName, UnityEngine.SceneManagement.LoadSceneMode loadMode = 0, System.Action<Zenject.DiContainer> extraBindings = default(System.Action<Zenject.DiContainer>), Zenject.LoadSceneRelationship containerMode = 0, System.Action<Zenject.DiContainer> extraBindingsLate = default(System.Action<Zenject.DiContainer>));
        public UnityEngine.AsyncOperation LoadSceneAsync(int sceneIndex, UnityEngine.SceneManagement.LoadSceneMode loadMode = 0, System.Action<Zenject.DiContainer> extraBindings = default(System.Action<Zenject.DiContainer>), Zenject.LoadSceneRelationship containerMode = 0, System.Action<Zenject.DiContainer> extraBindingsLate = default(System.Action<Zenject.DiContainer>));
        public UnityEngine.AsyncOperation LoadSceneAsync(string sceneName, UnityEngine.SceneManagement.LoadSceneMode loadMode = 0, System.Action<Zenject.DiContainer> extraBindings = default(System.Action<Zenject.DiContainer>), Zenject.LoadSceneRelationship containerMode = 0, System.Action<Zenject.DiContainer> extraBindingsLate = default(System.Action<Zenject.DiContainer>));
    }

    [Zenject.NoReflectionBaking] [Zenject.ZenjectAllowDuringValidation] public class ZenjectSettings
    {
        public static Zenject.ZenjectSettings Default;
        public bool DisplayWarningWhenResolvingDuringInstall { get; }
        public bool EnsureDeterministicDestructionOrderOnApplicationQuit { get; }
        public Zenject.ZenjectSettings.SignalSettings Signals { get; }
        public Zenject.ValidationErrorResponses ValidationErrorResponse { get; }
        public Zenject.RootResolveMethods ValidationRootResolveMethod { get; }
        public ZenjectSettings() {}
        public ZenjectSettings(Zenject.ValidationErrorResponses validationErrorResponse, Zenject.RootResolveMethods validationRootResolveMethod = 0, bool displayWarningWhenResolvingDuringInstall = True, bool ensureDeterministicDestructionOrderOnApplicationQuit = False, Zenject.ZenjectSettings.SignalSettings signalSettings = default(Zenject.ZenjectSettings.SignalSettings)) {}
        public class SignalSettings
        {
            public static Zenject.ZenjectSettings.SignalSettings Default;
            public int DefaultAsyncTickPriority { get; }
            public Zenject.SignalDefaultSyncModes DefaultSyncMode { get; }
            public Zenject.SignalMissingHandlerResponses MissingHandlerDefaultResponse { get; }
            public bool RequireStrictUnsubscribe { get; }
            public SignalSettings() {}
            public SignalSettings(Zenject.SignalDefaultSyncModes defaultSyncMode, Zenject.SignalMissingHandlerResponses missingHandlerDefaultResponse = 2, bool requireStrictUnsubscribe = False, int defaultAsyncTickPriority = 1) {}
        }
    }

    public class ZenjectStateMachineBehaviourAutoInjecter : UnityEngine.MonoBehaviour
    {
        public ZenjectStateMachineBehaviourAutoInjecter() {}
        [Zenject.Inject] public void Construct(Zenject.DiContainer container);
        public void Start();
    }

    public delegate Zenject.InjectTypeInfo ZenTypeInfoGetter();
}

namespace Zenject.Internal
{
    [Zenject.NoReflectionBaking] public class DecoratorProvider<TContract> : Zenject.Internal.IDecoratorProvider
    {
        public DecoratorProvider(Zenject.DiContainer container) {}
        public void AddFactoryId(System.Guid factoryBindId);
        public virtual void GetAllInstances(Zenject.IProvider provider, Zenject.InjectContext context, System.Collections.Generic.List<object> buffer);
    }

    public interface IDecoratorProvider
    {
        public abstract void GetAllInstances(Zenject.IProvider provider, Zenject.InjectContext context, System.Collections.Generic.List<object> buffer);
    }

    [Zenject.NoReflectionBaking] public class LookupId
    {
        public Zenject.BindingId BindingId;
        public Zenject.IProvider Provider;
        public LookupId() {}
        public LookupId(Zenject.IProvider provider, Zenject.BindingId bindingId) {}
        public virtual int GetHashCode();
        public void Reset();
    }

    public static class ReflectionInfoTypeInfoConverter
    {
        public static Zenject.InjectTypeInfo.InjectConstructorInfo ConvertConstructor(Zenject.Internal.ReflectionTypeInfo.InjectConstructorInfo injectConstructor, System.Type type);
        public static Zenject.InjectTypeInfo.InjectMemberInfo ConvertField(System.Type parentType, Zenject.Internal.ReflectionTypeInfo.InjectFieldInfo injectField);
        public static Zenject.InjectTypeInfo.InjectMethodInfo ConvertMethod(Zenject.Internal.ReflectionTypeInfo.InjectMethodInfo injectMethod);
        public static Zenject.InjectTypeInfo.InjectMemberInfo ConvertProperty(System.Type parentType, Zenject.Internal.ReflectionTypeInfo.InjectPropertyInfo injectProperty);
    }

    public static class ReflectionTypeAnalyzer
    {
        public static void AddCustomInjectAttribute<T>() where T : System.Attribute;
        public static void AddCustomInjectAttribute(System.Type type);
        public static Zenject.Internal.ReflectionTypeInfo GetReflectionInfo(System.Type type);
    }

    [Zenject.NoReflectionBaking] public class ReflectionTypeInfo
    {
        public readonly System.Type BaseType;
        public readonly Zenject.Internal.ReflectionTypeInfo.InjectConstructorInfo InjectConstructor;
        public readonly System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectFieldInfo> InjectFields;
        public readonly System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectMethodInfo> InjectMethods;
        public readonly System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectPropertyInfo> InjectProperties;
        public readonly System.Type Type;
        public ReflectionTypeInfo(System.Type type, System.Type baseType, Zenject.Internal.ReflectionTypeInfo.InjectConstructorInfo injectConstructor, System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectMethodInfo> injectMethods, System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectFieldInfo> injectFields, System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectPropertyInfo> injectProperties) {}
        [Zenject.NoReflectionBaking] public class InjectConstructorInfo
        {
            public readonly System.Reflection.ConstructorInfo ConstructorInfo;
            public readonly System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectParameterInfo> Parameters;
            public InjectConstructorInfo(System.Reflection.ConstructorInfo constructorInfo, System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectParameterInfo> parameters) {}
        }
        [Zenject.NoReflectionBaking] public class InjectFieldInfo
        {
            public readonly System.Reflection.FieldInfo FieldInfo;
            public readonly Zenject.InjectableInfo InjectableInfo;
            public InjectFieldInfo(System.Reflection.FieldInfo fieldInfo, Zenject.InjectableInfo injectableInfo) {}
        }
        [Zenject.NoReflectionBaking] public class InjectMethodInfo
        {
            public readonly System.Reflection.MethodInfo MethodInfo;
            public readonly System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectParameterInfo> Parameters;
            public InjectMethodInfo(System.Reflection.MethodInfo methodInfo, System.Collections.Generic.List<Zenject.Internal.ReflectionTypeInfo.InjectParameterInfo> parameters) {}
        }
        [Zenject.NoReflectionBaking] public class InjectParameterInfo
        {
            public readonly Zenject.InjectableInfo InjectableInfo;
            public readonly System.Reflection.ParameterInfo ParameterInfo;
            public InjectParameterInfo(System.Reflection.ParameterInfo parameterInfo, Zenject.InjectableInfo injectableInfo) {}
        }
        [Zenject.NoReflectionBaking] public class InjectPropertyInfo
        {
            public readonly Zenject.InjectableInfo InjectableInfo;
            public readonly System.Reflection.PropertyInfo PropertyInfo;
            public InjectPropertyInfo(System.Reflection.PropertyInfo propertyInfo, Zenject.InjectableInfo injectableInfo) {}
        }
    }

    [Zenject.NoReflectionBaking] public class SingletonMarkRegistry
    {
        public SingletonMarkRegistry() {}
        public void MarkNonSingleton(System.Type type);
        public void MarkSingleton(System.Type type);
    }

    public static class ZenPools
    {
        public static void DespawnArray<T>(T[] arr);
        public static void DespawnBindInfo(Zenject.BindInfo bindInfo);
        public static void DespawnDictionary<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
        public static void DespawnHashSet<T>(System.Collections.Generic.HashSet<T> set);
        public static void DespawnInjectContext(Zenject.InjectContext context);
        public static void DespawnList<T>(System.Collections.Generic.List<T> list);
        public static void DespawnLookupId(Zenject.Internal.LookupId lookupId);
        public static void DespawnStatement(Zenject.BindStatement statement);
        public static T[] SpawnArray<T>(int length);
        public static Zenject.BindInfo SpawnBindInfo();
        public static System.Collections.Generic.Dictionary<TKey, TValue> SpawnDictionary<TKey, TValue>();
        public static System.Collections.Generic.HashSet<T> SpawnHashSet<T>();
        public static Zenject.InjectContext SpawnInjectContext(Zenject.DiContainer container, System.Type memberType);
        public static Zenject.InjectContext SpawnInjectContext(Zenject.DiContainer container, Zenject.InjectableInfo injectableInfo, Zenject.InjectContext currentContext, object targetInstance, System.Type targetType, object concreteIdentifier);
        public static System.Collections.Generic.List<T> SpawnList<T>();
        public static Zenject.Internal.LookupId SpawnLookupId(Zenject.IProvider provider, Zenject.BindingId bindingId);
        public static Zenject.BindStatement SpawnStatement();
    }

    public static class ZenUtilInternal
    {
        public static void AddStateMachineBehaviourAutoInjectersInScene(UnityEngine.SceneManagement.Scene scene);
        public static void AddStateMachineBehaviourAutoInjectersUnderGameObject(UnityEngine.GameObject root);
        public static bool AreFunctionsEqual(System.Delegate left, System.Delegate right);
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(Zenject.Internal.ZenUtilInternal.<GetAllSceneContexts>d__5))] public static System.Collections.Generic.IEnumerable<Zenject.SceneContext> GetAllSceneContexts();
        public static int GetInheritanceDelta(System.Type derived, System.Type parent);
        public static void GetInjectableMonoBehavioursInScene(UnityEngine.SceneManagement.Scene scene, System.Collections.Generic.List<UnityEngine.MonoBehaviour> monoBehaviours);
        public static void GetInjectableMonoBehavioursUnderGameObject(UnityEngine.GameObject gameObject, System.Collections.Generic.List<UnityEngine.MonoBehaviour> injectableComponents);
        public static UnityEngine.Transform GetOrCreateInactivePrefabParent();
        public static System.Collections.Generic.IEnumerable<UnityEngine.GameObject> GetRootGameObjects(UnityEngine.SceneManagement.Scene scene);
        public static bool IsInjectableMonoBehaviourType(System.Type type);
        public static bool IsNull(object obj);
        public static bool IsOutsideUnity();
    }
}
